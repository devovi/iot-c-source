
ATSAML11E16A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002748  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  0000fb00  0000fb00  0002fb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000018  20000000  00002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000260  20000020  00002770  00020020  2**4
                  ALLOC
  4 .heap         00000200  20000280  000029d0  00020020  2**0
                  ALLOC
  5 .stack        00000400  20000480  00002bd0  00020020  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00032e24  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004bc0  00000000  00000000  00066ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012c52  00000000  00000000  0006ba89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ff0  00000000  00000000  0007e6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001660  00000000  00000000  0007f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000204ba  00000000  00000000  00080d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00018f4b  00000000  00000000  000a11e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009d01d  00000000  00000000  000ba130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002898  00000000  00000000  00157150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 08 00 20 c9 03 00 00 c5 03 00 00 c5 03 00 00     ... ............
	...
      2c:	c5 03 00 00 00 00 00 00 00 00 00 00 c5 03 00 00     ................
      3c:	c5 03 00 00 c5 03 00 00 c5 03 00 00 97 23 00 00     .............#..
      4c:	c5 03 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      5c:	47 19 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     G...............
      6c:	d7 15 00 00 49 16 00 00 bb 16 00 00 2d 17 00 00     ....I.......-...
      7c:	9f 17 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      8c:	c5 03 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      9c:	c5 03 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      ac:	c5 03 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      bc:	c5 03 00 00 c5 03 00 00 c5 03 00 00 91 22 00 00     ............."..
      cc:	c5 03 00 00 c5 03 00 00 27 14 00 00 3f 14 00 00     ........'...?...
      dc:	c5 03 00 00 c5 03 00 00 c5 03 00 00 c5 03 00 00     ................
      ec:	c5 03 00 00 c5 03 00 00                             ........

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	23ff      	movs	r3, #255	; 0xff
      f6:	4003      	ands	r3, r0
      f8:	009b      	lsls	r3, r3, #2
      fa:	f641 4c00 	movw	ip, #7168	; 0x1c00
      fe:	f2c4 0c00 	movt	ip, #16384	; 0x4000
     102:	4463      	add	r3, ip
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     104:	2280      	movs	r2, #128	; 0x80
     106:	589a      	ldr	r2, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     108:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10a:	0652      	lsls	r2, r2, #25
     10c:	d404      	bmi.n	118 <__acle_se_nsc_periph_clock_init+0x24>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     10e:	2240      	movs	r2, #64	; 0x40
     110:	4311      	orrs	r1, r2
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     112:	3240      	adds	r2, #64	; 0x40
     114:	5099      	str	r1, [r3, r2]
	}
	return 0;
     116:	2000      	movs	r0, #0
}
     118:	0001      	movs	r1, r0
     11a:	0002      	movs	r2, r0
     11c:	0003      	movs	r3, r0
     11e:	4684      	mov	ip, r0
     120:	f38e 8800 	msr	CPSR_f, lr
     124:	4774      	bxns	lr

00000126 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     126:	b5f0      	push	{r4, r5, r6, r7, lr}
     128:	46ce      	mov	lr, r9
     12a:	4647      	mov	r7, r8
     12c:	b580      	push	{r7, lr}
     12e:	b087      	sub	sp, #28
     130:	9002      	str	r0, [sp, #8]
     132:	9103      	str	r1, [sp, #12]
     134:	9204      	str	r2, [sp, #16]
     136:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     138:	f642 2300 	movw	r3, #10752	; 0x2a00
     13c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     140:	6898      	ldr	r0, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     142:	6999      	ldr	r1, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     146:	69dc      	ldr	r4, [r3, #28]
     148:	46a4      	mov	ip, r4
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     14c:	9e02      	ldr	r6, [sp, #8]
     14e:	4046      	eors	r6, r0
     150:	403e      	ands	r6, r7
     152:	4046      	eors	r6, r0
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     154:	9b04      	ldr	r3, [sp, #16]
     156:	9301      	str	r3, [sp, #4]
     158:	001d      	movs	r5, r3
     15a:	404d      	eors	r5, r1
     15c:	403d      	ands	r5, r7
     15e:	404d      	eors	r5, r1
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9c05      	ldr	r4, [sp, #20]
     162:	4054      	eors	r4, r2
     164:	403c      	ands	r4, r7
     166:	4054      	eors	r4, r2
     168:	46a1      	mov	r9, r4
	uint32_t config_nonsec_mask = 0;
     16a:	2100      	movs	r1, #0
	for (i = 0; i < 8; i++) {
     16c:	2300      	movs	r3, #0
		if (nonsec_mask & (1u << i)) {
     16e:	2001      	movs	r0, #1
			config_nonsec_mask |= (0xFu << (i * 4));
     170:	f240 080f 	movw	r8, #15
     174:	e002      	b.n	17c <__acle_se_nsc_ext_irq_init+0x56>
	for (i = 0; i < 8; i++) {
     176:	3301      	adds	r3, #1
     178:	2b08      	cmp	r3, #8
     17a:	d008      	beq.n	18e <__acle_se_nsc_ext_irq_init+0x68>
		if (nonsec_mask & (1u << i)) {
     17c:	0002      	movs	r2, r0
     17e:	409a      	lsls	r2, r3
     180:	4217      	tst	r7, r2
     182:	d0f8      	beq.n	176 <__acle_se_nsc_ext_irq_init+0x50>
			config_nonsec_mask |= (0xFu << (i * 4));
     184:	009a      	lsls	r2, r3, #2
     186:	4644      	mov	r4, r8
     188:	4094      	lsls	r4, r2
     18a:	4321      	orrs	r1, r4
     18c:	e7f3      	b.n	176 <__acle_se_nsc_ext_irq_init+0x50>
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     18e:	4660      	mov	r0, ip
     190:	9b03      	ldr	r3, [sp, #12]
     192:	4058      	eors	r0, r3
     194:	4008      	ands	r0, r1
     196:	4663      	mov	r3, ip
     198:	4058      	eors	r0, r3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     19a:	f642 2300 	movw	r3, #10752	; 0x2a00
     19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1a2:	781a      	ldrb	r2, [r3, #0]
     1a4:	2102      	movs	r1, #2
     1a6:	438a      	bics	r2, r1
     1a8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1aa:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1b2:	3101      	adds	r1, #1
     1b4:	6853      	ldr	r3, [r2, #4]
     1b6:	4219      	tst	r1, r3
     1b8:	d1fc      	bne.n	1b4 <__acle_se_nsc_ext_irq_init+0x8e>
     1ba:	f642 2200 	movw	r2, #10752	; 0x2a00
     1be:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1c2:	2102      	movs	r1, #2
     1c4:	6853      	ldr	r3, [r2, #4]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <__acle_se_nsc_ext_irq_init+0x9e>
	((Eic *)hw)->EVCTRL.reg = data;
     1ca:	f642 2300 	movw	r3, #10752	; 0x2a00
     1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1d2:	609e      	str	r6, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1d4:	619d      	str	r5, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1d6:	464a      	mov	r2, r9
     1d8:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1da:	61d8      	str	r0, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	2102      	movs	r1, #2
     1e0:	430a      	orrs	r2, r1
     1e2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1e4:	f642 2200 	movw	r2, #10752	; 0x2a00
     1e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1ec:	3101      	adds	r1, #1
     1ee:	6853      	ldr	r3, [r2, #4]
     1f0:	4219      	tst	r1, r3
     1f2:	d1fc      	bne.n	1ee <__acle_se_nsc_ext_irq_init+0xc8>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     1f4:	2000      	movs	r0, #0
     1f6:	b007      	add	sp, #28
     1f8:	0001      	movs	r1, r0
     1fa:	0002      	movs	r2, r0
     1fc:	0003      	movs	r3, r0
     1fe:	4684      	mov	ip, r0
     200:	bc0c      	pop	{r2, r3}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	bcf0      	pop	{r4, r5, r6, r7}
     208:	bc02      	pop	{r1}
     20a:	4686      	mov	lr, r0
     20c:	f381 8800 	msr	CPSR_f, r1
     210:	470c      	bxns	r1
	...

00000214 <__do_global_dtors_aux>:
     214:	b510      	push	{r4, lr}
     216:	f240 0420 	movw	r4, #32
     21a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     21e:	7823      	ldrb	r3, [r4, #0]
     220:	b963      	cbnz	r3, 23c <__do_global_dtors_aux+0x28>
     222:	f240 0300 	movw	r3, #0
     226:	f2c0 0300 	movt	r3, #0
     22a:	b12b      	cbz	r3, 238 <__do_global_dtors_aux+0x24>
     22c:	f244 0020 	movw	r0, #16416	; 0x4020
     230:	f2c0 0080 	movt	r0, #128	; 0x80
     234:	e000      	b.n	238 <__do_global_dtors_aux+0x24>
     236:	bf00      	nop
     238:	2301      	movs	r3, #1
     23a:	7023      	strb	r3, [r4, #0]
     23c:	bd10      	pop	{r4, pc}
     23e:	46c0      	nop			; (mov r8, r8)

00000240 <frame_dummy>:
     240:	f240 0300 	movw	r3, #0
     244:	f2c0 0300 	movt	r3, #0
     248:	b510      	push	{r4, lr}
     24a:	b14b      	cbz	r3, 260 <frame_dummy+0x20>
     24c:	f240 0124 	movw	r1, #36	; 0x24
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c2 0100 	movt	r1, #8192	; 0x2000
     258:	f2c0 0080 	movt	r0, #128	; 0x80
     25c:	e000      	b.n	260 <frame_dummy+0x20>
     25e:	bf00      	nop
     260:	f244 0020 	movw	r0, #16416	; 0x4020
     264:	f2c0 0080 	movt	r0, #128	; 0x80
     268:	6803      	ldr	r3, [r0, #0]
     26a:	b903      	cbnz	r3, 26e <frame_dummy+0x2e>
     26c:	bd10      	pop	{r4, pc}
     26e:	f240 0300 	movw	r3, #0
     272:	f2c0 0300 	movt	r3, #0
     276:	2b00      	cmp	r3, #0
     278:	d0f8      	beq.n	26c <frame_dummy+0x2c>
     27a:	4798      	blx	r3
     27c:	e7f6      	b.n	26c <frame_dummy+0x2c>
     27e:	46c0      	nop			; (mov r8, r8)

00000280 <ADF7024_WriteReadByte>:
struct ADF7024_RDB ADF7024_RDBCurrent;


void ADF7024_WriteReadByte(unsigned char writeByte,
                           unsigned char* readByte)
{
     280:	b510      	push	{r4, lr}
     282:	b082      	sub	sp, #8
     284:	000c      	movs	r4, r1
    unsigned char data = 0;
    
    data = writeByte;
     286:	466b      	mov	r3, sp
     288:	1dd9      	adds	r1, r3, #7
     28a:	7008      	strb	r0, [r1, #0]
    //SPI_Read(0, &data, 1);
	_spi_m_sync_io_read(0, &data, 1);
     28c:	2201      	movs	r2, #1
     28e:	2000      	movs	r0, #0
     290:	f640 532b 	movw	r3, #3371	; 0xd2b
     294:	f2c0 0300 	movt	r3, #0
     298:	4798      	blx	r3
    if(readByte)
     29a:	b11c      	cbz	r4, 2a4 <ADF7024_WriteReadByte+0x24>
    {
        *readByte = data;
     29c:	466b      	mov	r3, sp
     29e:	3307      	adds	r3, #7
     2a0:	781b      	ldrb	r3, [r3, #0]
     2a2:	7023      	strb	r3, [r4, #0]
    }
}
     2a4:	b002      	add	sp, #8
     2a6:	bd10      	pop	{r4, pc}

000002a8 <ADF7024_GetStatus>:
 * @param status - Status word.
 *
 * @return None.
*******************************************************************************/
void ADF7024_GetStatus(unsigned char* status)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	0005      	movs	r5, r0
	ADF7024_CS_ASSERT;
	ADF7024_WriteReadByte(SPI_NOP, 0);
     2ac:	2100      	movs	r1, #0
     2ae:	20ff      	movs	r0, #255	; 0xff
     2b0:	f240 2481 	movw	r4, #641	; 0x281
     2b4:	f2c0 0400 	movt	r4, #0
     2b8:	47a0      	blx	r4
	ADF7024_WriteReadByte(SPI_NOP, status);
     2ba:	0029      	movs	r1, r5
     2bc:	20ff      	movs	r0, #255	; 0xff
     2be:	47a0      	blx	r4
	ADF7024_CS_DEASSERT;
}
     2c0:	bd70      	pop	{r4, r5, r6, pc}

000002c2 <ADF7024_SetCommand>:
 * @param command - Command.
 *
 * @return None.
*******************************************************************************/
void ADF7024_SetCommand(unsigned char command)
{
     2c2:	b510      	push	{r4, lr}
	ADF7024_CS_ASSERT;
	ADF7024_WriteReadByte(command, 0);
     2c4:	2100      	movs	r1, #0
     2c6:	f240 2381 	movw	r3, #641	; 0x281
     2ca:	f2c0 0300 	movt	r3, #0
     2ce:	4798      	blx	r3
	ADF7024_CS_DEASSERT;
}
     2d0:	bd10      	pop	{r4, pc}

000002d2 <ADF7024_SetRAM>:
 * @return None.
*******************************************************************************/
void ADF7024_SetRAM(unsigned long address,
                    unsigned long length,
                    unsigned char* data)
{
     2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2d4:	0004      	movs	r4, r0
     2d6:	000f      	movs	r7, r1
     2d8:	0015      	movs	r5, r2
	ADF7024_CS_ASSERT;
	ADF7024_WriteReadByte(SPI_MEM_WR | ((address & 0x700) >> 8), 0);//doubt
     2da:	05c0      	lsls	r0, r0, #23
     2dc:	0fc0      	lsrs	r0, r0, #31
     2de:	231e      	movs	r3, #30
     2e0:	4318      	orrs	r0, r3
     2e2:	2100      	movs	r1, #0
     2e4:	f240 2681 	movw	r6, #641	; 0x281
     2e8:	f2c0 0600 	movt	r6, #0
     2ec:	47b0      	blx	r6
	ADF7024_WriteReadByte(address & 0xFF, 0);//doubt
     2ee:	b2e0      	uxtb	r0, r4
     2f0:	2100      	movs	r1, #0
     2f2:	47b0      	blx	r6
	while(length--)
     2f4:	b15f      	cbz	r7, 30e <ADF7024_SetRAM+0x3c>
     2f6:	002c      	movs	r4, r5
     2f8:	19ed      	adds	r5, r5, r7
	{
		ADF7024_WriteReadByte(*(data++), 0);//doubt
     2fa:	f240 2681 	movw	r6, #641	; 0x281
     2fe:	f2c0 0600 	movt	r6, #0
     302:	7820      	ldrb	r0, [r4, #0]
     304:	2100      	movs	r1, #0
     306:	47b0      	blx	r6
     308:	3401      	adds	r4, #1
	while(length--)
     30a:	42ac      	cmp	r4, r5
     30c:	d1f9      	bne.n	302 <ADF7024_SetRAM+0x30>
	}
	ADF7024_CS_DEASSERT;
}
     30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000310 <ADF7024_Init>:
{
     310:	b570      	push	{r4, r5, r6, lr}
     312:	b082      	sub	sp, #8
    unsigned char  status  = 0;
     314:	2200      	movs	r2, #0
     316:	466b      	mov	r3, sp
     318:	71da      	strb	r2, [r3, #7]
    ADF7024_RDBCurrent = ADF7024_RDBDefault;//doubt
     31a:	f240 00cc 	movw	r0, #204	; 0xcc
     31e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     322:	f240 0100 	movw	r1, #0
     326:	f2c2 0100 	movt	r1, #8192	; 0x2000
     32a:	3218      	adds	r2, #24
     32c:	f242 43c5 	movw	r3, #9413	; 0x24c5
     330:	f2c0 0300 	movt	r3, #0
     334:	4798      	blx	r3
	SPI_0_init();		 //doubt
     336:	f240 63b5 	movw	r3, #1717	; 0x6b5
     33a:	f2c0 0300 	movt	r3, #0
     33e:	4798      	blx	r3
     340:	f240 33e8 	movw	r3, #1000	; 0x3e8
     344:	3b01      	subs	r3, #1
     346:	b29b      	uxth	r3, r3
    while ((miso == 0) && (timeout < 1000))
     348:	2b00      	cmp	r3, #0
     34a:	d1fb      	bne.n	344 <ADF7024_Init+0x34>
    while(!(status & STATUS_CMD_READY))
     34c:	466b      	mov	r3, sp
     34e:	3307      	adds	r3, #7
     350:	781b      	ldrb	r3, [r3, #0]
     352:	069b      	lsls	r3, r3, #26
     354:	d40b      	bmi.n	36e <ADF7024_Init+0x5e>
        ADF7024_GetStatus(&status);
     356:	466b      	mov	r3, sp
     358:	1ddc      	adds	r4, r3, #7
     35a:	f240 25a9 	movw	r5, #681	; 0x2a9
     35e:	f2c0 0500 	movt	r5, #0
    while(!(status & STATUS_CMD_READY))
     362:	2620      	movs	r6, #32
        ADF7024_GetStatus(&status);
     364:	0020      	movs	r0, r4
     366:	47a8      	blx	r5
    while(!(status & STATUS_CMD_READY))
     368:	7823      	ldrb	r3, [r4, #0]
     36a:	421e      	tst	r6, r3
     36c:	d0fa      	beq.n	364 <ADF7024_Init+0x54>
    ADF7024_SetRAM(0x100, 64, (unsigned char*)&ADF7024_RDBCurrent);//doubt
     36e:	f240 02cc 	movw	r2, #204	; 0xcc
     372:	f2c2 0200 	movt	r2, #8192	; 0x2000
     376:	2140      	movs	r1, #64	; 0x40
     378:	f240 1000 	movw	r0, #256	; 0x100
     37c:	f240 23d3 	movw	r3, #723	; 0x2d3
     380:	f2c0 0300 	movt	r3, #0
     384:	4798      	blx	r3
    ADF7024_SetCommand(CMD_CONFIG_DEV);
     386:	20bb      	movs	r0, #187	; 0xbb
     388:	f240 23c3 	movw	r3, #707	; 0x2c3
     38c:	f2c0 0300 	movt	r3, #0
     390:	4798      	blx	r3
}
     392:	20ff      	movs	r0, #255	; 0xff
     394:	b002      	add	sp, #8
     396:	bd70      	pop	{r4, r5, r6, pc}

00000398 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     398:	b510      	push	{r4, lr}
	system_init();
     39a:	f640 037d 	movw	r3, #2173	; 0x87d
     39e:	f2c0 0300 	movt	r3, #0
     3a2:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     3a4:	f243 2300 	movw	r3, #12800	; 0x3200
     3a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3ac:	2200      	movs	r2, #0
     3ae:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     3b0:	f24e 1300 	movw	r3, #57600	; 0xe100
     3b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3b8:	f240 2180 	movw	r1, #640	; 0x280
     3bc:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     3be:	3104      	adds	r1, #4
     3c0:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
}
     3c2:	bd10      	pop	{r4, pc}

000003c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3c4:	e7fe      	b.n	3c4 <Dummy_Handler>
	...

000003c8 <Reset_Handler>:
{
     3c8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     3ca:	f242 7248 	movw	r2, #10056	; 0x2748
     3ce:	f2c0 0200 	movt	r2, #0
     3d2:	f240 0300 	movw	r3, #0
     3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3da:	429a      	cmp	r2, r3
     3dc:	d020      	beq.n	420 <STACK_SIZE+0x20>
                for (; pDest < &_erelocate;) {
     3de:	001a      	movs	r2, r3
     3e0:	f240 0318 	movw	r3, #24
     3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3e8:	429a      	cmp	r2, r3
     3ea:	d219      	bcs.n	420 <STACK_SIZE+0x20>
     3ec:	f240 0318 	movw	r3, #24
     3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3f4:	3303      	adds	r3, #3
     3f6:	4a24      	ldr	r2, [pc, #144]	; (488 <STACK_SIZE+0x88>)
     3f8:	1a9b      	subs	r3, r3, r2
     3fa:	089b      	lsrs	r3, r3, #2
     3fc:	3301      	adds	r3, #1
     3fe:	009b      	lsls	r3, r3, #2
     400:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     402:	f240 0100 	movw	r1, #0
     406:	f2c2 0100 	movt	r1, #8192	; 0x2000
     40a:	1851      	adds	r1, r2, r1
     40c:	f242 7048 	movw	r0, #10056	; 0x2748
     410:	f2c0 0000 	movt	r0, #0
     414:	1810      	adds	r0, r2, r0
     416:	6800      	ldr	r0, [r0, #0]
     418:	6008      	str	r0, [r1, #0]
     41a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     41c:	429a      	cmp	r2, r3
     41e:	d1f0      	bne.n	402 <STACK_SIZE+0x2>
        for (pDest = &_szero; pDest < &_ezero;) {
     420:	f240 0220 	movw	r2, #32
     424:	f2c2 0200 	movt	r2, #8192	; 0x2000
     428:	f240 2380 	movw	r3, #640	; 0x280
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	429a      	cmp	r2, r3
     432:	d213      	bcs.n	45c <STACK_SIZE+0x5c>
     434:	f240 0220 	movw	r2, #32
     438:	f2c2 0200 	movt	r2, #8192	; 0x2000
     43c:	43d3      	mvns	r3, r2
     43e:	f240 2180 	movw	r1, #640	; 0x280
     442:	f2c2 0100 	movt	r1, #8192	; 0x2000
     446:	468c      	mov	ip, r1
     448:	4463      	add	r3, ip
     44a:	2103      	movs	r1, #3
     44c:	438b      	bics	r3, r1
     44e:	3304      	adds	r3, #4
     450:	4694      	mov	ip, r2
     452:	4463      	add	r3, ip
                *pDest++ = 0;
     454:	2100      	movs	r1, #0
     456:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     458:	4293      	cmp	r3, r2
     45a:	d1fc      	bne.n	456 <STACK_SIZE+0x56>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     45c:	f240 0300 	movw	r3, #0
     460:	f2c0 0300 	movt	r3, #0
     464:	227f      	movs	r2, #127	; 0x7f
     466:	4393      	bics	r3, r2
     468:	f64e 5200 	movw	r2, #60672	; 0xed00
     46c:	f2ce 0200 	movt	r2, #57344	; 0xe000
     470:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     472:	f242 4375 	movw	r3, #9333	; 0x2475
     476:	f2c0 0300 	movt	r3, #0
     47a:	4798      	blx	r3
        main();
     47c:	f242 336f 	movw	r3, #9071	; 0x236f
     480:	f2c0 0300 	movt	r3, #0
     484:	4798      	blx	r3
     486:	e7fe      	b.n	486 <STACK_SIZE+0x86>
     488:	20000004 	.word	0x20000004

0000048c <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
     48e:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC;
     490:	f640 0300 	movw	r3, #2048	; 0x800
     494:	f2c4 0300 	movt	r3, #16384	; 0x4000
     498:	69da      	ldr	r2, [r3, #28]
     49a:	2180      	movs	r1, #128	; 0x80
     49c:	430a      	orrs	r2, r1
     49e:	61da      	str	r2, [r3, #28]
     4a0:	f641 4300 	movw	r3, #7168	; 0x1c00
     4a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     4a8:	3940      	subs	r1, #64	; 0x40
     4aa:	22c0      	movs	r2, #192	; 0xc0
     4ac:	5099      	str	r1, [r3, r2]
	hri_mclk_set_APBCMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
#else
	nsc_periph_clock_init(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
#endif
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     4ae:	f240 043c 	movw	r4, #60	; 0x3c
     4b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
     4b6:	f641 4100 	movw	r1, #7168	; 0x1c00
     4ba:	f2c4 2100 	movt	r1, #16896	; 0x4200
     4be:	f240 05ec 	movw	r5, #236	; 0xec
     4c2:	f2c2 0500 	movt	r5, #8192	; 0x2000
     4c6:	2300      	movs	r3, #0
     4c8:	9302      	str	r3, [sp, #8]
     4ca:	f240 131c 	movw	r3, #284	; 0x11c
     4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d2:	9301      	str	r3, [sp, #4]
     4d4:	2701      	movs	r7, #1
     4d6:	9700      	str	r7, [sp, #0]
     4d8:	2300      	movs	r3, #0
     4da:	0022      	movs	r2, r4
     4dc:	0028      	movs	r0, r5
     4de:	f640 16c5 	movw	r6, #2501	; 0x9c5
     4e2:	f2c0 0600 	movt	r6, #0
     4e6:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     4e8:	1d22      	adds	r2, r4, #4
     4ea:	2310      	movs	r3, #16
     4ec:	2100      	movs	r1, #0
     4ee:	0028      	movs	r0, r5
     4f0:	f640 2479 	movw	r4, #2681	; 0xa79
     4f4:	f2c0 0400 	movt	r4, #0
     4f8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fa:	f240 2300 	movw	r3, #512	; 0x200
     4fe:	f2c6 0300 	movt	r3, #24576	; 0x6000
     502:	2204      	movs	r2, #4
     504:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     506:	f243 2300 	movw	r3, #12800	; 0x3200
     50a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     50e:	f2c4 0200 	movt	r2, #16384	; 0x4000
     512:	629a      	str	r2, [r3, #40]	; 0x28
     514:	22c0      	movs	r2, #192	; 0xc0
     516:	0612      	lsls	r2, r2, #24
     518:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51a:	2242      	movs	r2, #66	; 0x42
     51c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     51e:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     520:	2001      	movs	r0, #1
     522:	4301      	orrs	r1, r0
     524:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     526:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     528:	2131      	movs	r1, #49	; 0x31
     52a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     52c:	240f      	movs	r4, #15
     52e:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     530:	4302      	orrs	r2, r0
     532:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     534:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(LIGHT_SENSOR, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(LIGHT_SENSOR, PINMUX_PA02B_ADC_AIN0);
}
     536:	b005      	add	sp, #20
     538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000053a <RAND_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TRNG_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
     53a:	f640 0300 	movw	r3, #2048	; 0x800
     53e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     542:	69da      	ldr	r2, [r3, #28]
     544:	f240 4100 	movw	r1, #1024	; 0x400
     548:	430a      	orrs	r2, r1
     54a:	61da      	str	r2, [r3, #28]

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
     54c:	4770      	bx	lr

0000054e <RAND_0_init>:

void RAND_0_init(void)
{
     54e:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
     550:	f240 533b 	movw	r3, #1339	; 0x53b
     554:	f2c0 0300 	movt	r3, #0
     558:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
     55a:	f642 0100 	movw	r1, #10240	; 0x2800
     55e:	f2c4 2100 	movt	r1, #16896	; 0x4200
     562:	f240 00e4 	movw	r0, #228	; 0xe4
     566:	f2c2 0000 	movt	r0, #8192	; 0x2000
     56a:	f640 4327 	movw	r3, #3111	; 0xc27
     56e:	f2c0 0300 	movt	r3, #0
     572:	4798      	blx	r3
}
     574:	bd10      	pop	{r4, pc}

00000576 <RTC_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     576:	f640 0300 	movw	r3, #2048	; 0x800
     57a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     57e:	695a      	ldr	r2, [r3, #20]
     580:	f240 2100 	movw	r1, #512	; 0x200
     584:	430a      	orrs	r2, r1
     586:	615a      	str	r2, [r3, #20]
void RTC_CLOCK_init(void)
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
#endif
}
     588:	4770      	bx	lr

0000058a <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     58a:	b5f0      	push	{r4, r5, r6, r7, lr}
     58c:	46d6      	mov	lr, sl
     58e:	464f      	mov	r7, r9
     590:	4646      	mov	r6, r8
     592:	b5c0      	push	{r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     594:	f240 2200 	movw	r2, #512	; 0x200
     598:	f2c6 0200 	movt	r2, #24576	; 0x6000
     59c:	2310      	movs	r3, #16
     59e:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a0:	f243 2300 	movw	r3, #12800	; 0x3200
     5a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5a8:	2110      	movs	r1, #16
     5aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
     5ae:	6299      	str	r1, [r3, #40]	; 0x28
     5b0:	2100      	movs	r1, #0
     5b2:	f2cc 0102 	movt	r1, #49154	; 0xc002
     5b6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     5b8:	2444      	movs	r4, #68	; 0x44
     5ba:	5d19      	ldrb	r1, [r3, r4]
     5bc:	2004      	movs	r0, #4
     5be:	4381      	bics	r1, r0
     5c0:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     5c4:	f240 0c01 	movw	ip, #1
     5c8:	4661      	mov	r1, ip
     5ca:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5cc:	46e2      	mov	sl, ip
     5ce:	4651      	mov	r1, sl
     5d0:	4308      	orrs	r0, r1
     5d2:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d4:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d6:	2532      	movs	r5, #50	; 0x32
     5d8:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5da:	f240 090f 	movw	r9, #15
     5de:	464c      	mov	r4, r9
     5e0:	43a0      	bics	r0, r4
	tmp |= PORT_PMUX_PMUXE(data);
     5e2:	2703      	movs	r7, #3
     5e4:	4338      	orrs	r0, r7
     5e6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ea:	f244 0000 	movw	r0, #16384	; 0x4000
     5ee:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
     5f6:	6298      	str	r0, [r3, #40]	; 0x28
     5f8:	20c0      	movs	r0, #192	; 0xc0
     5fa:	0600      	lsls	r0, r0, #24
     5fc:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fe:	343f      	adds	r4, #63	; 0x3f
     600:	5d1e      	ldrb	r6, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     602:	4661      	mov	r1, ip
     604:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     606:	4651      	mov	r1, sl
     608:	430e      	orrs	r6, r1
     60a:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60c:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     60e:	f240 0837 	movw	r8, #55	; 0x37
     612:	4641      	mov	r1, r8
     614:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     616:	4649      	mov	r1, r9
     618:	438c      	bics	r4, r1
	tmp |= PORT_PMUX_PMUXE(data);
     61a:	433c      	orrs	r4, r7
     61c:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61e:	4641      	mov	r1, r8
     620:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     622:	f248 0400 	movw	r4, #32768	; 0x8000
     626:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     628:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	f2c4 0400 	movt	r4, #16384	; 0x4000
     62e:	629c      	str	r4, [r3, #40]	; 0x28
     630:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	264f      	movs	r6, #79	; 0x4f
     634:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     636:	4661      	mov	r1, ip
     638:	438c      	bics	r4, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	4651      	mov	r1, sl
     63c:	430c      	orrs	r4, r1
     63e:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     640:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	4641      	mov	r1, r8
     644:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     646:	270f      	movs	r7, #15
     648:	403c      	ands	r4, r7
	tmp |= PORT_PMUX_PMUXO(data);
     64a:	2630      	movs	r6, #48	; 0x30
     64c:	4334      	orrs	r4, r6
     64e:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     650:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     652:	2420      	movs	r4, #32
     654:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	f240 0820 	movw	r8, #32
     65a:	f2c4 0800 	movt	r8, #16384	; 0x4000
     65e:	4641      	mov	r1, r8
     660:	6299      	str	r1, [r3, #40]	; 0x28
     662:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     664:	f240 0845 	movw	r8, #69	; 0x45
     668:	4641      	mov	r1, r8
     66a:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     66c:	4661      	mov	r1, ip
     66e:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     670:	4651      	mov	r1, sl
     672:	4308      	orrs	r0, r1
     674:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	4641      	mov	r1, r8
     678:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67a:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     67c:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     67e:	4331      	orrs	r1, r6
     680:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     682:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     684:	6154      	str	r4, [r2, #20]
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
}
     686:	bc1c      	pop	{r2, r3, r4}
     688:	4690      	mov	r8, r2
     68a:	4699      	mov	r9, r3
     68c:	46a2      	mov	sl, r4
     68e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000690 <SPI_0_CLOCK_init>:
     690:	f641 4300 	movw	r3, #7168	; 0x1c00
     694:	f2c4 0300 	movt	r3, #16384	; 0x4000
     698:	2240      	movs	r2, #64	; 0x40
     69a:	21ac      	movs	r1, #172	; 0xac
     69c:	505a      	str	r2, [r3, r1]
     69e:	3904      	subs	r1, #4
     6a0:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     6a2:	f640 0300 	movw	r3, #2048	; 0x800
     6a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6aa:	69da      	ldr	r2, [r3, #28]
     6ac:	39a6      	subs	r1, #166	; 0xa6
     6ae:	430a      	orrs	r2, r1
     6b0:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     6b2:	4770      	bx	lr

000006b4 <SPI_0_init>:

int SPI_0_init(void)
{
     6b4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     6b6:	f240 6391 	movw	r3, #1681	; 0x691
     6ba:	f2c0 0300 	movt	r3, #0
     6be:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     6c0:	f240 4100 	movw	r1, #1024	; 0x400
     6c4:	f2c4 2100 	movt	r1, #16896	; 0x4200
     6c8:	f240 1034 	movw	r0, #308	; 0x134
     6cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6d0:	f640 4359 	movw	r3, #3161	; 0xc59
     6d4:	f2c0 0300 	movt	r3, #0
     6d8:	4798      	blx	r3
	SPI_0_PORT_init();
     6da:	f240 538b 	movw	r3, #1419	; 0x58b
     6de:	f2c0 0300 	movt	r3, #0
     6e2:	4798      	blx	r3
	
	return 0;
}
     6e4:	2000      	movs	r0, #0
     6e6:	bd10      	pop	{r4, pc}

000006e8 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     6e8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ea:	f243 2300 	movw	r3, #12800	; 0x3200
     6ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6f2:	2240      	movs	r2, #64	; 0x40
     6f4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     6f6:	2501      	movs	r5, #1
     6f8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6fa:	2401      	movs	r4, #1
     6fc:	4321      	orrs	r1, r4
     6fe:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     700:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     702:	2030      	movs	r0, #48	; 0x30
     704:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     706:	3a31      	subs	r2, #49	; 0x31
     708:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     70a:	3a0c      	subs	r2, #12
     70c:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	2141      	movs	r1, #65	; 0x41
     712:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     714:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     716:	4322      	orrs	r2, r4
     718:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     71c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     71e:	3932      	subs	r1, #50	; 0x32
     720:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     722:	3121      	adds	r1, #33	; 0x21
     724:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     726:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
}
     728:	bd30      	pop	{r4, r5, pc}

0000072a <USART_0_CLOCK_init>:
     72a:	f641 4300 	movw	r3, #7168	; 0x1c00
     72e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     732:	2140      	movs	r1, #64	; 0x40
     734:	22b0      	movs	r2, #176	; 0xb0
     736:	5099      	str	r1, [r3, r2]
     738:	3103      	adds	r1, #3
     73a:	3a08      	subs	r2, #8
     73c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     73e:	f640 0300 	movw	r3, #2048	; 0x800
     742:	f2c4 0300 	movt	r3, #16384	; 0x4000
     746:	69da      	ldr	r2, [r3, #28]
     748:	393f      	subs	r1, #63	; 0x3f
     74a:	430a      	orrs	r2, r1
     74c:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	nsc_periph_clock_init(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
#endif
}
     74e:	4770      	bx	lr

00000750 <USART_0_init>:

void USART_0_init(void)
{
     750:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     752:	f240 732b 	movw	r3, #1835	; 0x72b
     756:	f2c0 0300 	movt	r3, #0
     75a:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM1, (void *)NULL);
     75c:	f640 0100 	movw	r1, #2048	; 0x800
     760:	f2c4 2100 	movt	r1, #16896	; 0x4200
     764:	f240 104c 	movw	r0, #332	; 0x14c
     768:	f2c2 0000 	movt	r0, #8192	; 0x2000
     76c:	2200      	movs	r2, #0
     76e:	f241 031b 	movw	r3, #4123	; 0x101b
     772:	f2c0 0300 	movt	r3, #0
     776:	4798      	blx	r3
	USART_0_PORT_init();
     778:	f240 63e9 	movw	r3, #1769	; 0x6e9
     77c:	f2c0 0300 	movt	r3, #0
     780:	4798      	blx	r3
}
     782:	bd10      	pop	{r4, pc}

00000784 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     784:	f640 0300 	movw	r3, #2048	; 0x800
     788:	f2c4 0300 	movt	r3, #16384	; 0x4000
     78c:	695a      	ldr	r2, [r3, #20]
     78e:	f240 1100 	movw	r1, #256	; 0x100
     792:	430a      	orrs	r2, r1
     794:	615a      	str	r2, [r3, #20]
void WDT_0_CLOCK_init(void)
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
#endif
}
     796:	4770      	bx	lr

00000798 <WDT_0_init>:

void WDT_0_init(void)
{
     798:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     79a:	f240 7385 	movw	r3, #1925	; 0x785
     79e:	f2c0 0300 	movt	r3, #0
     7a2:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     7a4:	f242 41d8 	movw	r1, #9432	; 0x24d8
     7a8:	f2c0 0100 	movt	r1, #0
     7ac:	2248      	movs	r2, #72	; 0x48
     7ae:	2001      	movs	r0, #1
     7b0:	f241 036b 	movw	r3, #4203	; 0x106b
     7b4:	f2c0 0300 	movt	r3, #0
     7b8:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     7ba:	f240 1018 	movw	r0, #280	; 0x118
     7be:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7c2:	f242 0300 	movw	r3, #8192	; 0x2000
     7c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7ca:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     7cc:	f242 23ff 	movw	r3, #8959	; 0x22ff
     7d0:	f2c0 0300 	movt	r3, #0
     7d4:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     7d6:	bd10      	pop	{r4, pc}

000007d8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     7d8:	b510      	push	{r4, lr}
     7da:	f641 4300 	movw	r3, #7168	; 0x1c00
     7de:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7e2:	2140      	movs	r1, #64	; 0x40
     7e4:	2298      	movs	r2, #152	; 0x98
     7e6:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     7e8:	f640 0300 	movw	r3, #2048	; 0x800
     7ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7f0:	69da      	ldr	r2, [r3, #28]
     7f2:	393f      	subs	r1, #63	; 0x3f
     7f4:	430a      	orrs	r2, r1
     7f6:	61da      	str	r2, [r3, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);

	event_system_init();
     7f8:	f640 3359 	movw	r3, #2905	; 0xb59
     7fc:	f2c0 0300 	movt	r3, #0
     800:	4798      	blx	r3
}
     802:	bd10      	pop	{r4, pc}

00000804 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     804:	b570      	push	{r4, r5, r6, lr}
     806:	f641 4300 	movw	r3, #7168	; 0x1c00
     80a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     80e:	2141      	movs	r1, #65	; 0x41
     810:	228c      	movs	r2, #140	; 0x8c
     812:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     814:	f640 0300 	movw	r3, #2048	; 0x800
     818:	f2c4 0300 	movt	r3, #16384	; 0x4000
     81c:	695a      	ldr	r2, [r3, #20]
     81e:	f240 4100 	movw	r1, #1024	; 0x400
     822:	430a      	orrs	r2, r1
     824:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     826:	f240 2200 	movw	r2, #512	; 0x200
     82a:	f2c6 0200 	movt	r2, #24576	; 0x6000
     82e:	2080      	movs	r0, #128	; 0x80
     830:	0500      	lsls	r0, r0, #20
     832:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     834:	f243 2300 	movw	r3, #12800	; 0x3200
     838:	f2c4 0300 	movt	r3, #16384	; 0x4000
     83c:	2100      	movs	r1, #0
     83e:	f2c4 0102 	movt	r1, #16386	; 0x4002
     842:	6299      	str	r1, [r3, #40]	; 0x28
     844:	f640 0100 	movw	r1, #2048	; 0x800
     848:	f2cc 0102 	movt	r1, #49154	; 0xc002
     84c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     84e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN_Msk;
     850:	215b      	movs	r1, #91	; 0x5b
     852:	5c5c      	ldrb	r4, [r3, r1]
     854:	2504      	movs	r5, #4
     856:	432c      	orrs	r4, r5
     858:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     85a:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     85e:	2001      	movs	r0, #1
     860:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     862:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     864:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     866:	391e      	subs	r1, #30
     868:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     86a:	300e      	adds	r0, #14
     86c:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     86e:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON, PINMUX_PA27A_EIC_EXTINT5);

	ext_irq_init();
     870:	f640 33a3 	movw	r3, #2979	; 0xba3
     874:	f2c0 0300 	movt	r3, #0
     878:	4798      	blx	r3
}
     87a:	bd70      	pop	{r4, r5, r6, pc}

0000087c <system_init>:

void system_init(void)
{
     87c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     87e:	f241 4357 	movw	r3, #5207	; 0x1457
     882:	f2c0 0300 	movt	r3, #0
     886:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     888:	f240 2300 	movw	r3, #512	; 0x200
     88c:	f2c6 0300 	movt	r3, #24576	; 0x6000
     890:	2280      	movs	r2, #128	; 0x80
     892:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     894:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     896:	f243 2300 	movw	r3, #12800	; 0x3200
     89a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     89e:	f2c4 0200 	movt	r2, #16384	; 0x4000
     8a2:	629a      	str	r2, [r3, #40]	; 0x28
     8a4:	22c0      	movs	r2, #192	; 0xc0
     8a6:	0612      	lsls	r2, r2, #24
     8a8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8aa:	2147      	movs	r1, #71	; 0x47
     8ac:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     8ae:	2001      	movs	r0, #1
     8b0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8b2:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     8b4:	f240 438d 	movw	r3, #1165	; 0x48d
     8b8:	f2c0 0300 	movt	r3, #0
     8bc:	4798      	blx	r3

	RAND_0_init();
     8be:	f240 534f 	movw	r3, #1359	; 0x54f
     8c2:	f2c0 0300 	movt	r3, #0
     8c6:	4798      	blx	r3
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     8c8:	f640 0300 	movw	r3, #2048	; 0x800
     8cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     8d0:	69da      	ldr	r2, [r3, #28]
     8d2:	2110      	movs	r1, #16
     8d4:	430a      	orrs	r2, r1
     8d6:	61da      	str	r2, [r3, #28]
     8d8:	f641 4300 	movw	r3, #7168	; 0x1c00
     8dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     8e0:	3130      	adds	r1, #48	; 0x30
     8e2:	22b8      	movs	r2, #184	; 0xb8
     8e4:	5099      	str	r1, [r3, r2]
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     8e6:	f242 238d 	movw	r3, #8845	; 0x228d
     8ea:	f2c0 0300 	movt	r3, #0
     8ee:	4798      	blx	r3
     8f0:	0002      	movs	r2, r0
     8f2:	f241 0100 	movw	r1, #4096	; 0x1000
     8f6:	f2c4 2100 	movt	r1, #16896	; 0x4200
     8fa:	f240 1058 	movw	r0, #344	; 0x158
     8fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
     902:	f640 63df 	movw	r3, #3807	; 0xedf
     906:	f2c0 0300 	movt	r3, #0
     90a:	4798      	blx	r3

	TIMER_0_init();

	RTC_CLOCK_init();
     90c:	f240 5377 	movw	r3, #1399	; 0x577
     910:	f2c0 0300 	movt	r3, #0
     914:	4798      	blx	r3
	RTC_init();
     916:	f641 3385 	movw	r3, #7045	; 0x1b85
     91a:	f2c0 0300 	movt	r3, #0
     91e:	4798      	blx	r3

	//SPI_0_init();

	USART_0_init();
     920:	f240 7351 	movw	r3, #1873	; 0x751
     924:	f2c0 0300 	movt	r3, #0
     928:	4798      	blx	r3

	WDT_0_init();
     92a:	f240 7399 	movw	r3, #1945	; 0x799
     92e:	f2c0 0300 	movt	r3, #0
     932:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     934:	f240 73d9 	movw	r3, #2009	; 0x7d9
     938:	f2c0 0300 	movt	r3, #0
     93c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     93e:	f640 0305 	movw	r3, #2053	; 0x805
     942:	f2c0 0300 	movt	r3, #0
     946:	4798      	blx	r3
}
     948:	bd10      	pop	{r4, pc}

0000094a <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     94a:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     94c:	6983      	ldr	r3, [r0, #24]
     94e:	b103      	cbz	r3, 952 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     950:	4798      	blx	r3
	}
}
     952:	bd10      	pop	{r4, pc}

00000954 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     954:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     956:	69c3      	ldr	r3, [r0, #28]
     958:	b103      	cbz	r3, 95c <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     95a:	4798      	blx	r3
	}
}
     95c:	bd10      	pop	{r4, pc}

0000095e <adc_async_channel_conversion_done>:
{
     95e:	b5f0      	push	{r4, r5, r6, r7, lr}
     960:	b083      	sub	sp, #12
     962:	0005      	movs	r5, r0
     964:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     966:	6a03      	ldr	r3, [r0, #32]
     968:	5c5b      	ldrb	r3, [r3, r1]
     96a:	005c      	lsls	r4, r3, #1
     96c:	18e4      	adds	r4, r4, r3
     96e:	00e4      	lsls	r4, r4, #3
     970:	6a83      	ldr	r3, [r0, #40]	; 0x28
     972:	469c      	mov	ip, r3
     974:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     976:	1d27      	adds	r7, r4, #4
     978:	9201      	str	r2, [sp, #4]
     97a:	466b      	mov	r3, sp
     97c:	7919      	ldrb	r1, [r3, #4]
     97e:	0038      	movs	r0, r7
     980:	f241 1335 	movw	r3, #4405	; 0x1135
     984:	f2c0 0300 	movt	r3, #0
     988:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     98a:	0028      	movs	r0, r5
     98c:	f241 33ff 	movw	r3, #5119	; 0x13ff
     990:	f2c0 0300 	movt	r3, #0
     994:	4798      	blx	r3
     996:	2801      	cmp	r0, #1
     998:	d90a      	bls.n	9b0 <adc_async_channel_conversion_done+0x52>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     99a:	9b01      	ldr	r3, [sp, #4]
     99c:	0a19      	lsrs	r1, r3, #8
     99e:	0038      	movs	r0, r7
     9a0:	f241 1335 	movw	r3, #4405	; 0x1135
     9a4:	f2c0 0300 	movt	r3, #0
     9a8:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     9aa:	8aa3      	ldrh	r3, [r4, #20]
     9ac:	3301      	adds	r3, #1
     9ae:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     9b0:	8aa3      	ldrh	r3, [r4, #20]
     9b2:	3301      	adds	r3, #1
     9b4:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     9b6:	6823      	ldr	r3, [r4, #0]
     9b8:	b113      	cbz	r3, 9c0 <adc_async_channel_conversion_done+0x62>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     9ba:	0031      	movs	r1, r6
     9bc:	0028      	movs	r0, r5
     9be:	4798      	blx	r3
}
     9c0:	b003      	add	sp, #12
     9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000009c4 <adc_async_init>:
{
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	46d6      	mov	lr, sl
     9c8:	464f      	mov	r7, r9
     9ca:	b580      	push	{r7, lr}
     9cc:	b083      	sub	sp, #12
     9ce:	0007      	movs	r7, r0
     9d0:	9101      	str	r1, [sp, #4]
     9d2:	0016      	movs	r6, r2
     9d4:	001c      	movs	r4, r3
     9d6:	ab0a      	add	r3, sp, #40	; 0x28
     9d8:	781d      	ldrb	r5, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     9da:	2800      	cmp	r0, #0
     9dc:	d046      	beq.n	a6c <adc_async_init+0xa8>
     9de:	2900      	cmp	r1, #0
     9e0:	d046      	beq.n	a70 <adc_async_init+0xac>
     9e2:	2a00      	cmp	r2, #0
     9e4:	d046      	beq.n	a74 <adc_async_init+0xb0>
     9e6:	2000      	movs	r0, #0
     9e8:	b115      	cbz	r5, 9f0 <adc_async_init+0x2c>
     9ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
     9ec:	1e43      	subs	r3, r0, #1
     9ee:	4198      	sbcs	r0, r3
     9f0:	f242 4af4 	movw	sl, #9460	; 0x24f4
     9f4:	f2c0 0a00 	movt	sl, #0
     9f8:	223f      	movs	r2, #63	; 0x3f
     9fa:	4651      	mov	r1, sl
     9fc:	f241 096b 	movw	r9, #4203	; 0x106b
     a00:	f2c0 0900 	movt	r9, #0
     a04:	47c8      	blx	r9
	ASSERT(channel_amount <= (channel_max + 1));
     a06:	1c62      	adds	r2, r4, #1
     a08:	0feb      	lsrs	r3, r5, #31
     a0a:	17d0      	asrs	r0, r2, #31
     a0c:	42aa      	cmp	r2, r5
     a0e:	4158      	adcs	r0, r3
     a10:	b2c0      	uxtb	r0, r0
     a12:	2240      	movs	r2, #64	; 0x40
     a14:	4651      	mov	r1, sl
     a16:	47c8      	blx	r9
	for (uint8_t i = 0; i <= channel_max; i++) {
     a18:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     a1a:	22ff      	movs	r2, #255	; 0xff
     a1c:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     a1e:	3301      	adds	r3, #1
     a20:	b2db      	uxtb	r3, r3
     a22:	429c      	cmp	r4, r3
     a24:	d2fa      	bcs.n	a1c <adc_async_init+0x58>
	descr->channel_map    = channel_map;
     a26:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     a28:	2324      	movs	r3, #36	; 0x24
     a2a:	54fc      	strb	r4, [r7, r3]
	descr->channel_amount = channel_amount;
     a2c:	3301      	adds	r3, #1
     a2e:	54fd      	strb	r5, [r7, r3]
	descr->descr_ch       = descr_ch;
     a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a32:	62bb      	str	r3, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     a34:	9901      	ldr	r1, [sp, #4]
     a36:	0038      	movs	r0, r7
     a38:	f241 3377 	movw	r3, #4983	; 0x1377
     a3c:	f2c0 0300 	movt	r3, #0
     a40:	4798      	blx	r3
	if (init_status) {
     a42:	b970      	cbnz	r0, a62 <adc_async_init+0x9e>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     a44:	f640 135f 	movw	r3, #2399	; 0x95f
     a48:	f2c0 0300 	movt	r3, #0
     a4c:	60bb      	str	r3, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     a4e:	f640 134b 	movw	r3, #2379	; 0x94b
     a52:	f2c0 0300 	movt	r3, #0
     a56:	603b      	str	r3, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     a58:	f640 1355 	movw	r3, #2389	; 0x955
     a5c:	f2c0 0300 	movt	r3, #0
     a60:	607b      	str	r3, [r7, #4]
}
     a62:	b003      	add	sp, #12
     a64:	bc0c      	pop	{r2, r3}
     a66:	4691      	mov	r9, r2
     a68:	469a      	mov	sl, r3
     a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     a6c:	2000      	movs	r0, #0
     a6e:	e7bf      	b.n	9f0 <adc_async_init+0x2c>
     a70:	2000      	movs	r0, #0
     a72:	e7bd      	b.n	9f0 <adc_async_init+0x2c>
     a74:	2000      	movs	r0, #0
     a76:	e7bb      	b.n	9f0 <adc_async_init+0x2c>

00000a78 <adc_async_register_channel_buffer>:
{
     a78:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7a:	b083      	sub	sp, #12
     a7c:	0007      	movs	r7, r0
     a7e:	000c      	movs	r4, r1
     a80:	9200      	str	r2, [sp, #0]
     a82:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     a84:	b300      	cbz	r0, ac8 <adc_async_register_channel_buffer+0x50>
     a86:	b30a      	cbz	r2, acc <adc_async_register_channel_buffer+0x54>
     a88:	0018      	movs	r0, r3
     a8a:	1e43      	subs	r3, r0, #1
     a8c:	4198      	sbcs	r0, r3
     a8e:	f242 45f4 	movw	r5, #9460	; 0x24f4
     a92:	f2c0 0500 	movt	r5, #0
     a96:	2266      	movs	r2, #102	; 0x66
     a98:	0029      	movs	r1, r5
     a9a:	f241 066b 	movw	r6, #4203	; 0x106b
     a9e:	f2c0 0600 	movt	r6, #0
     aa2:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     aa4:	2324      	movs	r3, #36	; 0x24
     aa6:	5cfb      	ldrb	r3, [r7, r3]
     aa8:	2000      	movs	r0, #0
     aaa:	42a3      	cmp	r3, r4
     aac:	4140      	adcs	r0, r0
     aae:	b2c0      	uxtb	r0, r0
     ab0:	2267      	movs	r2, #103	; 0x67
     ab2:	0029      	movs	r1, r5
     ab4:	47b0      	blx	r6
	if (descr->channel_map[channel] != 0xFF) {
     ab6:	6a39      	ldr	r1, [r7, #32]
     ab8:	5d0b      	ldrb	r3, [r1, r4]
     aba:	2bff      	cmp	r3, #255	; 0xff
     abc:	d12c      	bne.n	b18 <adc_async_register_channel_buffer+0xa0>
	for (i = 0; i <= descr->channel_max; i++) {
     abe:	3bdb      	subs	r3, #219	; 0xdb
     ac0:	5cf8      	ldrb	r0, [r7, r3]
     ac2:	2600      	movs	r6, #0
     ac4:	2300      	movs	r3, #0
     ac6:	e007      	b.n	ad8 <adc_async_register_channel_buffer+0x60>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     ac8:	2000      	movs	r0, #0
     aca:	e7e0      	b.n	a8e <adc_async_register_channel_buffer+0x16>
     acc:	2000      	movs	r0, #0
     ace:	e7de      	b.n	a8e <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
     ad0:	3301      	adds	r3, #1
     ad2:	b2db      	uxtb	r3, r3
     ad4:	4283      	cmp	r3, r0
     ad6:	d805      	bhi.n	ae4 <adc_async_register_channel_buffer+0x6c>
		if (descr->channel_map[i] != 0xFF) {
     ad8:	5cca      	ldrb	r2, [r1, r3]
     ada:	2aff      	cmp	r2, #255	; 0xff
     adc:	d0f8      	beq.n	ad0 <adc_async_register_channel_buffer+0x58>
			index++;
     ade:	3601      	adds	r6, #1
     ae0:	b2f6      	uxtb	r6, r6
     ae2:	e7f5      	b.n	ad0 <adc_async_register_channel_buffer+0x58>
	if (index > descr->channel_amount) {
     ae4:	2325      	movs	r3, #37	; 0x25
     ae6:	5cfb      	ldrb	r3, [r7, r3]
     ae8:	42b3      	cmp	r3, r6
     aea:	d318      	bcc.n	b1e <adc_async_register_channel_buffer+0xa6>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     aec:	0073      	lsls	r3, r6, #1
     aee:	199b      	adds	r3, r3, r6
     af0:	00dd      	lsls	r5, r3, #3
     af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     af4:	1958      	adds	r0, r3, r5
     af6:	3004      	adds	r0, #4
     af8:	9a01      	ldr	r2, [sp, #4]
     afa:	9900      	ldr	r1, [sp, #0]
     afc:	f241 03d7 	movw	r3, #4311	; 0x10d7
     b00:	f2c0 0300 	movt	r3, #0
     b04:	4798      	blx	r3
     b06:	b968      	cbnz	r0, b24 <adc_async_register_channel_buffer+0xac>
	descr->channel_map[channel]            = index;
     b08:	6a3b      	ldr	r3, [r7, #32]
     b0a:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b0e:	195b      	adds	r3, r3, r5
     b10:	2200      	movs	r2, #0
     b12:	829a      	strh	r2, [r3, #20]
}
     b14:	b003      	add	sp, #12
     b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     b18:	200d      	movs	r0, #13
     b1a:	4240      	negs	r0, r0
     b1c:	e7fa      	b.n	b14 <adc_async_register_channel_buffer+0x9c>
		return ERR_NO_RESOURCE;
     b1e:	201c      	movs	r0, #28
     b20:	4240      	negs	r0, r0
     b22:	e7f7      	b.n	b14 <adc_async_register_channel_buffer+0x9c>
		return ERR_INVALID_ARG;
     b24:	200d      	movs	r0, #13
     b26:	4240      	negs	r0, r0
     b28:	e7f4      	b.n	b14 <adc_async_register_channel_buffer+0x9c>

00000b2a <adc_async_start_conversion>:
{
     b2a:	b510      	push	{r4, lr}
     b2c:	0004      	movs	r4, r0
	ASSERT(descr);
     b2e:	f242 41f4 	movw	r1, #9460	; 0x24f4
     b32:	f2c0 0100 	movt	r1, #0
     b36:	1e43      	subs	r3, r0, #1
     b38:	4198      	sbcs	r0, r3
     b3a:	b2c0      	uxtb	r0, r0
     b3c:	22d6      	movs	r2, #214	; 0xd6
     b3e:	f241 036b 	movw	r3, #4203	; 0x106b
     b42:	f2c0 0300 	movt	r3, #0
     b46:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     b48:	0020      	movs	r0, r4
     b4a:	f241 4311 	movw	r3, #5137	; 0x1411
     b4e:	f2c0 0300 	movt	r3, #0
     b52:	4798      	blx	r3
}
     b54:	2000      	movs	r0, #0
     b56:	bd10      	pop	{r4, pc}

00000b58 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     b58:	b510      	push	{r4, lr}
	return _event_system_init();
     b5a:	f641 233d 	movw	r3, #6717	; 0x1a3d
     b5e:	f2c0 0300 	movt	r3, #0
     b62:	4798      	blx	r3
}
     b64:	bd10      	pop	{r4, pc}

00000b66 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     b66:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     b68:	f240 0350 	movw	r3, #80	; 0x50
     b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b70:	685c      	ldr	r4, [r3, #4]
     b72:	42a0      	cmp	r0, r4
     b74:	d00d      	beq.n	b92 <process_ext_irq+0x2c>
     b76:	2201      	movs	r2, #1
     b78:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     b7a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     b7c:	25ff      	movs	r5, #255	; 0xff
     b7e:	e003      	b.n	b88 <process_ext_irq+0x22>
     b80:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     b82:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     b84:	085b      	lsrs	r3, r3, #1
     b86:	b95b      	cbnz	r3, ba0 <process_ext_irq+0x3a>
		if (ext_irqs[middle].pin < pin) {
     b88:	42a0      	cmp	r0, r4
     b8a:	d9f9      	bls.n	b80 <process_ext_irq+0x1a>
	while (upper >= lower) {
     b8c:	b142      	cbz	r2, ba0 <process_ext_irq+0x3a>
			lower = middle + 1;
     b8e:	0031      	movs	r1, r6
     b90:	e7f7      	b.n	b82 <process_ext_irq+0x1c>
			if (ext_irqs[middle].cb) {
     b92:	f240 0350 	movw	r3, #80	; 0x50
     b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	b103      	cbz	r3, ba0 <process_ext_irq+0x3a>
				ext_irqs[middle].cb();
     b9e:	4798      	blx	r3
		}
	}
}
     ba0:	bd70      	pop	{r4, r5, r6, pc}

00000ba2 <ext_irq_init>:
{
     ba2:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     ba4:	f240 0350 	movw	r3, #80	; 0x50
     ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bac:	2201      	movs	r2, #1
     bae:	4252      	negs	r2, r2
     bb0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     bb2:	2200      	movs	r2, #0
     bb4:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     bb6:	f640 3067 	movw	r0, #2919	; 0xb67
     bba:	f2c0 0000 	movt	r0, #0
     bbe:	f641 0311 	movw	r3, #6161	; 0x1811
     bc2:	f2c0 0300 	movt	r3, #0
     bc6:	4798      	blx	r3
}
     bc8:	bd10      	pop	{r4, pc}

00000bca <ext_irq_register>:
{
     bca:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     bcc:	f240 0350 	movw	r3, #80	; 0x50
     bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	4298      	cmp	r0, r3
     bd8:	d009      	beq.n	bee <ext_irq_register+0x24>
	if (NULL == cb) {
     bda:	b309      	cbz	r1, c20 <ext_irq_register+0x56>
			if (NULL == ext_irqs[i].cb) {
     bdc:	f240 0350 	movw	r3, #80	; 0x50
     be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	b173      	cbz	r3, c06 <ext_irq_register+0x3c>
		return ERR_INVALID_ARG;
     be8:	200d      	movs	r0, #13
     bea:	4240      	negs	r0, r0
     bec:	e017      	b.n	c1e <ext_irq_register+0x54>
			ext_irqs[i].cb = cb;
     bee:	f240 0350 	movw	r3, #80	; 0x50
     bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bf6:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     bf8:	b959      	cbnz	r1, c12 <ext_irq_register+0x48>
		return _ext_irq_enable(pin, false);
     bfa:	f641 1319 	movw	r3, #6425	; 0x1919
     bfe:	f2c0 0300 	movt	r3, #0
     c02:	4798      	blx	r3
     c04:	e00b      	b.n	c1e <ext_irq_register+0x54>
				ext_irqs[i].cb  = cb;
     c06:	f240 0350 	movw	r3, #80	; 0x50
     c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c0e:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     c10:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     c12:	2101      	movs	r1, #1
     c14:	f641 1319 	movw	r3, #6425	; 0x1919
     c18:	f2c0 0300 	movt	r3, #0
     c1c:	4798      	blx	r3
}
     c1e:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     c20:	200d      	movs	r0, #13
     c22:	4240      	negs	r0, r0
     c24:	e7fb      	b.n	c1e <ext_irq_register+0x54>

00000c26 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
     c26:	b570      	push	{r4, r5, r6, lr}
     c28:	0004      	movs	r4, r0
     c2a:	000d      	movs	r5, r1
	ASSERT(desc);
     c2c:	f242 5110 	movw	r1, #9488	; 0x2510
     c30:	f2c0 0100 	movt	r1, #0
     c34:	1e43      	subs	r3, r0, #1
     c36:	4198      	sbcs	r0, r3
     c38:	b2c0      	uxtb	r0, r0
     c3a:	2229      	movs	r2, #41	; 0x29
     c3c:	f241 036b 	movw	r3, #4203	; 0x106b
     c40:	f2c0 0300 	movt	r3, #0
     c44:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
     c46:	0029      	movs	r1, r5
     c48:	0020      	movs	r0, r4
     c4a:	f242 23b1 	movw	r3, #8881	; 0x22b1
     c4e:	f2c0 0300 	movt	r3, #0
     c52:	4798      	blx	r3
}
     c54:	bd70      	pop	{r4, r5, r6, pc}
	...

00000c58 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     c58:	b570      	push	{r4, r5, r6, lr}
     c5a:	0004      	movs	r4, r0
     c5c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     c5e:	b328      	cbz	r0, cac <spi_m_sync_init+0x54>
     c60:	0008      	movs	r0, r1
     c62:	1e43      	subs	r3, r0, #1
     c64:	4198      	sbcs	r0, r3
     c66:	b2c0      	uxtb	r0, r0
     c68:	f242 512c 	movw	r1, #9516	; 0x252c
     c6c:	f2c0 0100 	movt	r1, #0
     c70:	2240      	movs	r2, #64	; 0x40
     c72:	f241 036b 	movw	r3, #4203	; 0x106b
     c76:	f2c0 0300 	movt	r3, #0
     c7a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c7c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     c7e:	1d20      	adds	r0, r4, #4
     c80:	0029      	movs	r1, r5
     c82:	f641 53db 	movw	r3, #7643	; 0x1ddb
     c86:	f2c0 0300 	movt	r3, #0
     c8a:	4798      	blx	r3

	if (rc < 0) {
     c8c:	2800      	cmp	r0, #0
     c8e:	db0c      	blt.n	caa <spi_m_sync_init+0x52>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     c90:	4b07      	ldr	r3, [pc, #28]	; (cb0 <spi_m_sync_init+0x58>)
     c92:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     c94:	f640 532b 	movw	r3, #3371	; 0xd2b
     c98:	f2c0 0300 	movt	r3, #0
     c9c:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     c9e:	f640 536b 	movw	r3, #3435	; 0xd6b
     ca2:	f2c0 0300 	movt	r3, #0
     ca6:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     ca8:	2000      	movs	r0, #0
}
     caa:	bd70      	pop	{r4, r5, r6, pc}
     cac:	2000      	movs	r0, #0
     cae:	e7db      	b.n	c68 <spi_m_sync_init+0x10>
     cb0:	ffff8000 	.word	0xffff8000

00000cb4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     cb4:	b510      	push	{r4, lr}
     cb6:	0004      	movs	r4, r0
	ASSERT(spi);
     cb8:	f242 512c 	movw	r1, #9516	; 0x252c
     cbc:	f2c0 0100 	movt	r1, #0
     cc0:	1e43      	subs	r3, r0, #1
     cc2:	4198      	sbcs	r0, r3
     cc4:	b2c0      	uxtb	r0, r0
     cc6:	2257      	movs	r2, #87	; 0x57
     cc8:	f241 036b 	movw	r3, #4203	; 0x106b
     ccc:	f2c0 0300 	movt	r3, #0
     cd0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     cd2:	1d20      	adds	r0, r4, #4
     cd4:	f641 7303 	movw	r3, #7939	; 0x1f03
     cd8:	f2c0 0300 	movt	r3, #0
     cdc:	4798      	blx	r3
}
     cde:	bd10      	pop	{r4, pc}

00000ce0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     ce0:	b530      	push	{r4, r5, lr}
     ce2:	b087      	sub	sp, #28
     ce4:	0004      	movs	r4, r0
     ce6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     ce8:	b1e8      	cbz	r0, d26 <spi_m_sync_transfer+0x46>
     cea:	0008      	movs	r0, r1
     cec:	1e43      	subs	r3, r0, #1
     cee:	4198      	sbcs	r0, r3
     cf0:	b2c0      	uxtb	r0, r0
     cf2:	f242 512c 	movw	r1, #9516	; 0x252c
     cf6:	f2c0 0100 	movt	r1, #0
     cfa:	22b5      	movs	r2, #181	; 0xb5
     cfc:	f241 036b 	movw	r3, #4203	; 0x106b
     d00:	f2c0 0300 	movt	r3, #0
     d04:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     d06:	682b      	ldr	r3, [r5, #0]
     d08:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     d0a:	686b      	ldr	r3, [r5, #4]
     d0c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     d0e:	68ab      	ldr	r3, [r5, #8]
     d10:	9301      	str	r3, [sp, #4]
     d12:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     d14:	1d20      	adds	r0, r4, #4
     d16:	a903      	add	r1, sp, #12
     d18:	f641 7339 	movw	r3, #7993	; 0x1f39
     d1c:	f2c0 0300 	movt	r3, #0
     d20:	4798      	blx	r3
}
     d22:	b007      	add	sp, #28
     d24:	bd30      	pop	{r4, r5, pc}
     d26:	2000      	movs	r0, #0
     d28:	e7e3      	b.n	cf2 <spi_m_sync_transfer+0x12>

00000d2a <_spi_m_sync_io_read>:
{
     d2a:	b570      	push	{r4, r5, r6, lr}
     d2c:	b084      	sub	sp, #16
     d2e:	0004      	movs	r4, r0
     d30:	000e      	movs	r6, r1
     d32:	0015      	movs	r5, r2
	ASSERT(io);
     d34:	f242 512c 	movw	r1, #9516	; 0x252c
     d38:	f2c0 0100 	movt	r1, #0
     d3c:	1e43      	subs	r3, r0, #1
     d3e:	4198      	sbcs	r0, r3
     d40:	b2c0      	uxtb	r0, r0
     d42:	2288      	movs	r2, #136	; 0x88
     d44:	f241 036b 	movw	r3, #4203	; 0x106b
     d48:	f2c0 0300 	movt	r3, #0
     d4c:	4798      	blx	r3
	xfer.rxbuf = buf;
     d4e:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     d50:	2300      	movs	r3, #0
     d52:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     d54:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     d56:	0020      	movs	r0, r4
     d58:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     d5a:	a901      	add	r1, sp, #4
     d5c:	f640 43e1 	movw	r3, #3297	; 0xce1
     d60:	f2c0 0300 	movt	r3, #0
     d64:	4798      	blx	r3
}
     d66:	b004      	add	sp, #16
     d68:	bd70      	pop	{r4, r5, r6, pc}

00000d6a <_spi_m_sync_io_write>:
{
     d6a:	b570      	push	{r4, r5, r6, lr}
     d6c:	b084      	sub	sp, #16
     d6e:	0004      	movs	r4, r0
     d70:	000e      	movs	r6, r1
     d72:	0015      	movs	r5, r2
	ASSERT(io);
     d74:	f242 512c 	movw	r1, #9516	; 0x252c
     d78:	f2c0 0100 	movt	r1, #0
     d7c:	1e43      	subs	r3, r0, #1
     d7e:	4198      	sbcs	r0, r3
     d80:	b2c0      	uxtb	r0, r0
     d82:	22a5      	movs	r2, #165	; 0xa5
     d84:	f241 036b 	movw	r3, #4203	; 0x106b
     d88:	f2c0 0300 	movt	r3, #0
     d8c:	4798      	blx	r3
	xfer.rxbuf = 0;
     d8e:	2300      	movs	r3, #0
     d90:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     d92:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     d94:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     d96:	0020      	movs	r0, r4
     d98:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     d9a:	a901      	add	r1, sp, #4
     d9c:	f640 43e1 	movw	r3, #3297	; 0xce1
     da0:	f2c0 0300 	movt	r3, #0
     da4:	4798      	blx	r3
}
     da6:	b004      	add	sp, #16
     da8:	bd70      	pop	{r4, r5, r6, pc}

00000daa <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     daa:	b570      	push	{r4, r5, r6, lr}
     dac:	0004      	movs	r4, r0
     dae:	000d      	movs	r5, r1
	ASSERT(spi && io);
     db0:	b188      	cbz	r0, dd6 <spi_m_sync_get_io_descriptor+0x2c>
     db2:	0008      	movs	r0, r1
     db4:	1e43      	subs	r3, r0, #1
     db6:	4198      	sbcs	r0, r3
     db8:	b2c0      	uxtb	r0, r0
     dba:	f242 512c 	movw	r1, #9516	; 0x252c
     dbe:	f2c0 0100 	movt	r1, #0
     dc2:	22bf      	movs	r2, #191	; 0xbf
     dc4:	f241 036b 	movw	r3, #4203	; 0x106b
     dc8:	f2c0 0300 	movt	r3, #0
     dcc:	4798      	blx	r3
	*io = &spi->io;
     dce:	340c      	adds	r4, #12
     dd0:	602c      	str	r4, [r5, #0]
	return 0;
}
     dd2:	2000      	movs	r0, #0
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	2000      	movs	r0, #0
     dd8:	e7ef      	b.n	dba <spi_m_sync_get_io_descriptor+0x10>

00000dda <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ddc:	46ce      	mov	lr, r9
     dde:	4647      	mov	r7, r8
     de0:	b580      	push	{r7, lr}
     de2:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     de4:	6803      	ldr	r3, [r0, #0]
     de6:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     de8:	b12b      	cbz	r3, df6 <timer_add_timer_task+0x1c>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     dea:	688e      	ldr	r6, [r1, #8]
     dec:	001c      	movs	r4, r3
     dee:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     df0:	2701      	movs	r7, #1
     df2:	1abf      	subs	r7, r7, r2
     df4:	e00f      	b.n	e16 <timer_add_timer_task+0x3c>
		list_insert_as_head(list, new_task);
     df6:	f241 0391 	movw	r3, #4241	; 0x1091
     dfa:	f2c0 0300 	movt	r3, #0
     dfe:	4798      	blx	r3
		return;
     e00:	e01a      	b.n	e38 <timer_add_timer_task+0x5e>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e02:	18fb      	adds	r3, r7, r3
     e04:	68a0      	ldr	r0, [r4, #8]
     e06:	4680      	mov	r8, r0
     e08:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     e0a:	42b3      	cmp	r3, r6
     e0c:	d20b      	bcs.n	e26 <timer_add_timer_task+0x4c>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     e0e:	6823      	ldr	r3, [r4, #0]
     e10:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e12:	b15b      	cbz	r3, e2c <timer_add_timer_task+0x52>
     e14:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     e16:	6863      	ldr	r3, [r4, #4]
     e18:	4293      	cmp	r3, r2
     e1a:	d8f2      	bhi.n	e02 <timer_add_timer_task+0x28>
			time_left = it->interval - (time - it->time_label);
     e1c:	68a0      	ldr	r0, [r4, #8]
     e1e:	4680      	mov	r8, r0
     e20:	4443      	add	r3, r8
     e22:	1a9b      	subs	r3, r3, r2
     e24:	e7f1      	b.n	e0a <timer_add_timer_task+0x30>
			break;
		prev = it;
	}

	if (it == head) {
     e26:	45a4      	cmp	ip, r4
     e28:	d00a      	beq.n	e40 <timer_add_timer_task+0x66>
     e2a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     e2c:	0020      	movs	r0, r4
     e2e:	f241 03c3 	movw	r3, #4291	; 0x10c3
     e32:	f2c0 0300 	movt	r3, #0
     e36:	4798      	blx	r3
	}
}
     e38:	bc0c      	pop	{r2, r3}
     e3a:	4690      	mov	r8, r2
     e3c:	4699      	mov	r9, r3
     e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     e40:	4648      	mov	r0, r9
     e42:	f241 0391 	movw	r3, #4241	; 0x1091
     e46:	f2c0 0300 	movt	r3, #0
     e4a:	4798      	blx	r3
     e4c:	e7f4      	b.n	e38 <timer_add_timer_task+0x5e>

00000e4e <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
     e50:	46d6      	mov	lr, sl
     e52:	4647      	mov	r7, r8
     e54:	b580      	push	{r7, lr}
     e56:	b083      	sub	sp, #12
     e58:	0007      	movs	r7, r0
	return (void *)list->head;
     e5a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     e5c:	6903      	ldr	r3, [r0, #16]
     e5e:	3301      	adds	r3, #1
     e60:	4698      	mov	r8, r3
     e62:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e64:	7e03      	ldrb	r3, [r0, #24]
     e66:	07db      	lsls	r3, r3, #31
     e68:	d417      	bmi.n	e9a <timer_process_counted+0x4c>
     e6a:	7e03      	ldrb	r3, [r0, #24]
     e6c:	079b      	lsls	r3, r3, #30
     e6e:	d414      	bmi.n	e9a <timer_process_counted+0x4c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     e70:	b1bc      	cbz	r4, ea2 <timer_process_counted+0x54>
     e72:	4643      	mov	r3, r8
     e74:	6862      	ldr	r2, [r4, #4]
     e76:	1a9b      	subs	r3, r3, r2
     e78:	68a2      	ldr	r2, [r4, #8]
     e7a:	4293      	cmp	r3, r2
     e7c:	d311      	bcc.n	ea2 <timer_process_counted+0x54>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     e7e:	f240 0c14 	movw	ip, #20
     e82:	4484      	add	ip, r0
     e84:	4663      	mov	r3, ip
     e86:	9301      	str	r3, [sp, #4]
     e88:	f241 06cb 	movw	r6, #4299	; 0x10cb
     e8c:	f2c0 0600 	movt	r6, #0
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     e90:	f640 5adb 	movw	sl, #3547	; 0xddb
     e94:	f2c0 0a00 	movt	sl, #0
     e98:	e015      	b.n	ec6 <timer_process_counted+0x78>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e9a:	7e3b      	ldrb	r3, [r7, #24]
     e9c:	2202      	movs	r2, #2
     e9e:	4313      	orrs	r3, r2
     ea0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     ea2:	b003      	add	sp, #12
     ea4:	bc0c      	pop	{r2, r3}
     ea6:	4690      	mov	r8, r2
     ea8:	469a      	mov	sl, r3
     eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eac:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     eae:	68e3      	ldr	r3, [r4, #12]
     eb0:	0020      	movs	r0, r4
     eb2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     eb4:	2d00      	cmp	r5, #0
     eb6:	d0f4      	beq.n	ea2 <timer_process_counted+0x54>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     eb8:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     eba:	4643      	mov	r3, r8
     ebc:	686a      	ldr	r2, [r5, #4]
     ebe:	1a9b      	subs	r3, r3, r2
     ec0:	68aa      	ldr	r2, [r5, #8]
     ec2:	4293      	cmp	r3, r2
     ec4:	d3ed      	bcc.n	ea2 <timer_process_counted+0x54>
		list_remove_head(&timer->tasks);
     ec6:	9801      	ldr	r0, [sp, #4]
     ec8:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     eca:	7c23      	ldrb	r3, [r4, #16]
     ecc:	2b01      	cmp	r3, #1
     ece:	d1ed      	bne.n	eac <timer_process_counted+0x5e>
			tmp->time_label = time;
     ed0:	4643      	mov	r3, r8
     ed2:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     ed4:	4642      	mov	r2, r8
     ed6:	0021      	movs	r1, r4
     ed8:	9801      	ldr	r0, [sp, #4]
     eda:	47d0      	blx	sl
     edc:	e7e6      	b.n	eac <timer_process_counted+0x5e>

00000ede <timer_init>:
{
     ede:	b570      	push	{r4, r5, r6, lr}
     ee0:	0005      	movs	r5, r0
     ee2:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     ee4:	b1e8      	cbz	r0, f22 <timer_init+0x44>
     ee6:	0008      	movs	r0, r1
     ee8:	1e43      	subs	r3, r0, #1
     eea:	4198      	sbcs	r0, r3
     eec:	b2c0      	uxtb	r0, r0
     eee:	f242 5148 	movw	r1, #9544	; 0x2548
     ef2:	f2c0 0100 	movt	r1, #0
     ef6:	223b      	movs	r2, #59	; 0x3b
     ef8:	f241 036b 	movw	r3, #4203	; 0x106b
     efc:	f2c0 0300 	movt	r3, #0
     f00:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     f02:	0021      	movs	r1, r4
     f04:	0028      	movs	r0, r5
     f06:	f242 0377 	movw	r3, #8311	; 0x2077
     f0a:	f2c0 0300 	movt	r3, #0
     f0e:	4798      	blx	r3
	descr->time                           = 0;
     f10:	2300      	movs	r3, #0
     f12:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     f14:	f640 634f 	movw	r3, #3663	; 0xe4f
     f18:	f2c0 0300 	movt	r3, #0
     f1c:	602b      	str	r3, [r5, #0]
}
     f1e:	2000      	movs	r0, #0
     f20:	bd70      	pop	{r4, r5, r6, pc}
     f22:	2000      	movs	r0, #0
     f24:	e7e3      	b.n	eee <timer_init+0x10>

00000f26 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f28:	46ce      	mov	lr, r9
     f2a:	4647      	mov	r7, r8
     f2c:	b580      	push	{r7, lr}
     f2e:	0004      	movs	r4, r0
     f30:	000f      	movs	r7, r1
     f32:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     f34:	2800      	cmp	r0, #0
     f36:	d037      	beq.n	fa8 <usart_sync_write+0x82>
     f38:	2900      	cmp	r1, #0
     f3a:	d037      	beq.n	fac <usart_sync_write+0x86>
     f3c:	0010      	movs	r0, r2
     f3e:	1e43      	subs	r3, r0, #1
     f40:	4198      	sbcs	r0, r3
     f42:	f242 5160 	movw	r1, #9568	; 0x2560
     f46:	f2c0 0100 	movt	r1, #0
     f4a:	22f1      	movs	r2, #241	; 0xf1
     f4c:	f241 036b 	movw	r3, #4203	; 0x106b
     f50:	f2c0 0300 	movt	r3, #0
     f54:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     f56:	3408      	adds	r4, #8
     f58:	f641 55bd 	movw	r5, #7613	; 0x1dbd
     f5c:	f2c0 0500 	movt	r5, #0
     f60:	0020      	movs	r0, r4
     f62:	47a8      	blx	r5
     f64:	2800      	cmp	r0, #0
     f66:	d0fb      	beq.n	f60 <usart_sync_write+0x3a>
     f68:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f6a:	f641 59ad 	movw	r9, #7597	; 0x1dad
     f6e:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f72:	f641 55bd 	movw	r5, #7613	; 0x1dbd
     f76:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f7a:	5db9      	ldrb	r1, [r7, r6]
     f7c:	0020      	movs	r0, r4
     f7e:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f80:	0020      	movs	r0, r4
     f82:	47a8      	blx	r5
     f84:	2800      	cmp	r0, #0
     f86:	d0fb      	beq.n	f80 <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     f88:	3601      	adds	r6, #1
     f8a:	4546      	cmp	r6, r8
     f8c:	d3f5      	bcc.n	f7a <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     f8e:	f641 55c7 	movw	r5, #7623	; 0x1dc7
     f92:	f2c0 0500 	movt	r5, #0
     f96:	0020      	movs	r0, r4
     f98:	47a8      	blx	r5
     f9a:	2800      	cmp	r0, #0
     f9c:	d0fb      	beq.n	f96 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     f9e:	0030      	movs	r0, r6
     fa0:	bc0c      	pop	{r2, r3}
     fa2:	4690      	mov	r8, r2
     fa4:	4699      	mov	r9, r3
     fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     fa8:	2000      	movs	r0, #0
     faa:	e7ca      	b.n	f42 <usart_sync_write+0x1c>
     fac:	2000      	movs	r0, #0
     fae:	e7c8      	b.n	f42 <usart_sync_write+0x1c>

00000fb0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fb2:	46ce      	mov	lr, r9
     fb4:	4647      	mov	r7, r8
     fb6:	b580      	push	{r7, lr}
     fb8:	0004      	movs	r4, r0
     fba:	4688      	mov	r8, r1
     fbc:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     fbe:	b340      	cbz	r0, 1012 <usart_sync_read+0x62>
     fc0:	b349      	cbz	r1, 1016 <usart_sync_read+0x66>
     fc2:	0010      	movs	r0, r2
     fc4:	1e43      	subs	r3, r0, #1
     fc6:	4198      	sbcs	r0, r3
     fc8:	f242 5160 	movw	r1, #9568	; 0x2560
     fcc:	f2c0 0100 	movt	r1, #0
     fd0:	f240 120c 	movw	r2, #268	; 0x10c
     fd4:	f241 036b 	movw	r3, #4203	; 0x106b
     fd8:	f2c0 0300 	movt	r3, #0
     fdc:	4798      	blx	r3
	uint32_t                      offset = 0;
     fde:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     fe0:	3408      	adds	r4, #8
     fe2:	f641 55d1 	movw	r5, #7633	; 0x1dd1
     fe6:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     fea:	f641 57b5 	movw	r7, #7605	; 0x1db5
     fee:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     ff2:	0020      	movs	r0, r4
     ff4:	47a8      	blx	r5
     ff6:	2800      	cmp	r0, #0
     ff8:	d0fb      	beq.n	ff2 <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ffa:	0020      	movs	r0, r4
     ffc:	47b8      	blx	r7
     ffe:	4643      	mov	r3, r8
    1000:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
    1002:	3601      	adds	r6, #1
    1004:	454e      	cmp	r6, r9
    1006:	d3f4      	bcc.n	ff2 <usart_sync_read+0x42>

	return (int32_t)offset;
}
    1008:	0030      	movs	r0, r6
    100a:	bc0c      	pop	{r2, r3}
    100c:	4690      	mov	r8, r2
    100e:	4699      	mov	r9, r3
    1010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1012:	2000      	movs	r0, #0
    1014:	e7d8      	b.n	fc8 <usart_sync_read+0x18>
    1016:	2000      	movs	r0, #0
    1018:	e7d6      	b.n	fc8 <usart_sync_read+0x18>

0000101a <usart_sync_init>:
{
    101a:	b570      	push	{r4, r5, r6, lr}
    101c:	0005      	movs	r5, r0
    101e:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1020:	b308      	cbz	r0, 1066 <usart_sync_init+0x4c>
    1022:	0008      	movs	r0, r1
    1024:	1e43      	subs	r3, r0, #1
    1026:	4198      	sbcs	r0, r3
    1028:	b2c0      	uxtb	r0, r0
    102a:	f242 5160 	movw	r1, #9568	; 0x2560
    102e:	f2c0 0100 	movt	r1, #0
    1032:	2234      	movs	r2, #52	; 0x34
    1034:	f241 036b 	movw	r3, #4203	; 0x106b
    1038:	f2c0 0300 	movt	r3, #0
    103c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    103e:	0028      	movs	r0, r5
    1040:	3008      	adds	r0, #8
    1042:	0021      	movs	r1, r4
    1044:	f641 537d 	movw	r3, #7549	; 0x1d7d
    1048:	f2c0 0300 	movt	r3, #0
    104c:	4798      	blx	r3
	if (init_status) {
    104e:	b948      	cbnz	r0, 1064 <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
    1050:	f640 73b1 	movw	r3, #4017	; 0xfb1
    1054:	f2c0 0300 	movt	r3, #0
    1058:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    105a:	f640 7327 	movw	r3, #3879	; 0xf27
    105e:	f2c0 0300 	movt	r3, #0
    1062:	602b      	str	r3, [r5, #0]
}
    1064:	bd70      	pop	{r4, r5, r6, pc}
    1066:	2000      	movs	r0, #0
    1068:	e7df      	b.n	102a <usart_sync_init+0x10>

0000106a <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    106a:	b900      	cbnz	r0, 106e <assert+0x4>
		__asm("BKPT #0");
    106c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    106e:	4770      	bx	lr

00001070 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1070:	6803      	ldr	r3, [r0, #0]
    1072:	b14b      	cbz	r3, 1088 <is_list_element+0x18>
		if (it == element) {
    1074:	428b      	cmp	r3, r1
    1076:	d009      	beq.n	108c <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	b11b      	cbz	r3, 1084 <is_list_element+0x14>
		if (it == element) {
    107c:	4299      	cmp	r1, r3
    107e:	d1fb      	bne.n	1078 <is_list_element+0x8>
			return true;
    1080:	2001      	movs	r0, #1
    1082:	e000      	b.n	1086 <is_list_element+0x16>
		}
	}

	return false;
    1084:	2000      	movs	r0, #0
}
    1086:	4770      	bx	lr
	return false;
    1088:	2000      	movs	r0, #0
    108a:	e7fc      	b.n	1086 <is_list_element+0x16>
			return true;
    108c:	2001      	movs	r0, #1
    108e:	e7fa      	b.n	1086 <is_list_element+0x16>

00001090 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0004      	movs	r4, r0
    1094:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    1096:	f241 0371 	movw	r3, #4209	; 0x1071
    109a:	f2c0 0300 	movt	r3, #0
    109e:	4798      	blx	r3
    10a0:	f242 517c 	movw	r1, #9596	; 0x257c
    10a4:	f2c0 0100 	movt	r1, #0
    10a8:	2301      	movs	r3, #1
    10aa:	4058      	eors	r0, r3
    10ac:	b2c0      	uxtb	r0, r0
    10ae:	2239      	movs	r2, #57	; 0x39
    10b0:	f241 036b 	movw	r3, #4203	; 0x106b
    10b4:	f2c0 0300 	movt	r3, #0
    10b8:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    10ba:	6823      	ldr	r3, [r4, #0]
    10bc:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    10be:	6025      	str	r5, [r4, #0]
}
    10c0:	bd70      	pop	{r4, r5, r6, pc}

000010c2 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    10c2:	6803      	ldr	r3, [r0, #0]
    10c4:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    10c6:	6001      	str	r1, [r0, #0]
}
    10c8:	4770      	bx	lr

000010ca <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    10ca:	6803      	ldr	r3, [r0, #0]
    10cc:	b10b      	cbz	r3, 10d2 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    10ce:	681a      	ldr	r2, [r3, #0]
    10d0:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    10d2:	0018      	movs	r0, r3
    10d4:	4770      	bx	lr

000010d6 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    10d6:	b570      	push	{r4, r5, r6, lr}
    10d8:	0004      	movs	r4, r0
    10da:	000e      	movs	r6, r1
    10dc:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    10de:	b178      	cbz	r0, 1100 <ringbuffer_init+0x2a>
    10e0:	b319      	cbz	r1, 112a <ringbuffer_init+0x54>
    10e2:	2001      	movs	r0, #1
    10e4:	b96a      	cbnz	r2, 1102 <ringbuffer_init+0x2c>
    10e6:	f242 519c 	movw	r1, #9628	; 0x259c
    10ea:	f2c0 0100 	movt	r1, #0
    10ee:	2228      	movs	r2, #40	; 0x28
    10f0:	2000      	movs	r0, #0
    10f2:	f241 036b 	movw	r3, #4203	; 0x106b
    10f6:	f2c0 0300 	movt	r3, #0
    10fa:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    10fc:	1e6b      	subs	r3, r5, #1
    10fe:	e00d      	b.n	111c <ringbuffer_init+0x46>
	ASSERT(rb && buf && size);
    1100:	2000      	movs	r0, #0
    1102:	f242 519c 	movw	r1, #9628	; 0x259c
    1106:	f2c0 0100 	movt	r1, #0
    110a:	2228      	movs	r2, #40	; 0x28
    110c:	f241 036b 	movw	r3, #4203	; 0x106b
    1110:	f2c0 0300 	movt	r3, #0
    1114:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1116:	1e6b      	subs	r3, r5, #1
    1118:	422b      	tst	r3, r5
    111a:	d108      	bne.n	112e <ringbuffer_init+0x58>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    111c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    111e:	2300      	movs	r3, #0
    1120:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1122:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1124:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1126:	2000      	movs	r0, #0
}
    1128:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    112a:	2000      	movs	r0, #0
    112c:	e7e9      	b.n	1102 <ringbuffer_init+0x2c>
		return ERR_INVALID_ARG;
    112e:	200d      	movs	r0, #13
    1130:	4240      	negs	r0, r0
    1132:	e7f9      	b.n	1128 <ringbuffer_init+0x52>

00001134 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1134:	b570      	push	{r4, r5, r6, lr}
    1136:	0004      	movs	r4, r0
    1138:	000d      	movs	r5, r1
	ASSERT(rb);
    113a:	f242 519c 	movw	r1, #9628	; 0x259c
    113e:	f2c0 0100 	movt	r1, #0
    1142:	1e43      	subs	r3, r0, #1
    1144:	4198      	sbcs	r0, r3
    1146:	b2c0      	uxtb	r0, r0
    1148:	2251      	movs	r2, #81	; 0x51
    114a:	f241 036b 	movw	r3, #4203	; 0x106b
    114e:	f2c0 0300 	movt	r3, #0
    1152:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1154:	6863      	ldr	r3, [r4, #4]
    1156:	68e2      	ldr	r2, [r4, #12]
    1158:	4013      	ands	r3, r2
    115a:	6822      	ldr	r2, [r4, #0]
    115c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    115e:	68e3      	ldr	r3, [r4, #12]
    1160:	6861      	ldr	r1, [r4, #4]
    1162:	68a2      	ldr	r2, [r4, #8]
    1164:	1a9a      	subs	r2, r3, r2
    1166:	428a      	cmp	r2, r1
    1168:	d901      	bls.n	116e <ringbuffer_put+0x3a>
		rb->read_index = rb->write_index - rb->size;
    116a:	1a59      	subs	r1, r3, r1
    116c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    116e:	3301      	adds	r3, #1
    1170:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1172:	2000      	movs	r0, #0
    1174:	bd70      	pop	{r4, r5, r6, pc}

00001176 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1176:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
    1178:	6942      	ldr	r2, [r0, #20]
	return tmp;
}

static inline hri_adc_intflag_reg_t hri_adc_read_INTFLAG_reg(const void *const hw)
{
	return ((Adc *)hw)->INTFLAG.reg;
    117a:	7991      	ldrb	r1, [r2, #6]
	return tmp;
}

static inline hri_adc_intenset_reg_t hri_adc_read_INTEN_reg(const void *const hw)
{
	return ((Adc *)hw)->INTENSET.reg;
    117c:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    117e:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1180:	07d9      	lsls	r1, r3, #31
    1182:	d404      	bmi.n	118e <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1184:	0799      	lsls	r1, r3, #30
    1186:	d40a      	bmi.n	119e <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    1188:	075b      	lsls	r3, r3, #29
    118a:	d40e      	bmi.n	11aa <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
    118c:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY_Msk;
    118e:	2301      	movs	r3, #1
    1190:	7193      	strb	r3, [r2, #6]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    1192:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    1194:	b292      	uxth	r2, r2
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    1196:	6883      	ldr	r3, [r0, #8]
    1198:	2100      	movs	r1, #0
    119a:	4798      	blx	r3
    119c:	e7f6      	b.n	118c <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN_Msk;
    119e:	2302      	movs	r3, #2
    11a0:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
    11a2:	6843      	ldr	r3, [r0, #4]
    11a4:	2100      	movs	r1, #0
    11a6:	4798      	blx	r3
    11a8:	e7f0      	b.n	118c <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON_Msk;
    11aa:	2304      	movs	r3, #4
    11ac:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
    11ae:	6803      	ldr	r3, [r0, #0]
    11b0:	2100      	movs	r1, #0
    11b2:	4798      	blx	r3
}
    11b4:	e7ea      	b.n	118c <_adc_interrupt_handler+0x16>

000011b6 <_adc_get_regs>:
}
    11b6:	2000      	movs	r0, #0
    11b8:	4770      	bx	lr

000011ba <_adc_init>:
{
    11ba:	b570      	push	{r4, r5, r6, lr}
    11bc:	0004      	movs	r4, r0
    11be:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    11c0:	f242 51dc 	movw	r1, #9692	; 0x25dc
    11c4:	f2c0 0100 	movt	r1, #0
    11c8:	f24e 4300 	movw	r3, #58368	; 0xe400
    11cc:	f6cb 53ff 	movt	r3, #48639	; 0xbdff
    11d0:	18c0      	adds	r0, r0, r3
    11d2:	4243      	negs	r3, r0
    11d4:	4158      	adcs	r0, r3
    11d6:	b2c0      	uxtb	r0, r0
    11d8:	22b1      	movs	r2, #177	; 0xb1
    11da:	f241 036b 	movw	r3, #4203	; 0x106b
    11de:	f2c0 0300 	movt	r3, #0
    11e2:	4798      	blx	r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    11e4:	8c23      	ldrh	r3, [r4, #32]
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    11e6:	07db      	lsls	r3, r3, #31
    11e8:	d418      	bmi.n	121c <_adc_init+0x62>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11ea:	2203      	movs	r2, #3
    11ec:	8c23      	ldrh	r3, [r4, #32]
    11ee:	4213      	tst	r3, r2
    11f0:	d1fc      	bne.n	11ec <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    11f2:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    11f4:	079b      	lsls	r3, r3, #30
    11f6:	d50b      	bpl.n	1210 <_adc_init+0x56>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE_Msk;
    11f8:	7823      	ldrb	r3, [r4, #0]
    11fa:	2202      	movs	r2, #2
    11fc:	4393      	bics	r3, r2
    11fe:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1200:	3201      	adds	r2, #1
    1202:	8c23      	ldrh	r3, [r4, #32]
    1204:	4213      	tst	r3, r2
    1206:	d1fc      	bne.n	1202 <_adc_init+0x48>
    1208:	2202      	movs	r2, #2
    120a:	8c23      	ldrh	r3, [r4, #32]
    120c:	4213      	tst	r3, r2
    120e:	d1fc      	bne.n	120a <_adc_init+0x50>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1210:	2301      	movs	r3, #1
    1212:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1214:	2203      	movs	r2, #3
    1216:	8c23      	ldrh	r3, [r4, #32]
    1218:	4213      	tst	r3, r2
    121a:	d1fc      	bne.n	1216 <_adc_init+0x5c>
    121c:	2201      	movs	r2, #1
    121e:	8c23      	ldrh	r3, [r4, #32]
    1220:	4213      	tst	r3, r2
    1222:	d1fc      	bne.n	121e <_adc_init+0x64>
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1224:	00eb      	lsls	r3, r5, #3
    1226:	1b5b      	subs	r3, r3, r5
    1228:	009b      	lsls	r3, r3, #2
    122a:	f242 52c0 	movw	r2, #9664	; 0x25c0
    122e:	f2c0 0200 	movt	r2, #0
    1232:	4694      	mov	ip, r2
    1234:	4463      	add	r3, ip
    1236:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1238:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    123a:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    123c:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    123e:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    1240:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1242:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1244:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1246:	f240 72ff 	movw	r2, #2047	; 0x7ff
    124a:	8c23      	ldrh	r3, [r4, #32]
    124c:	4213      	tst	r3, r2
    124e:	d1fc      	bne.n	124a <_adc_init+0x90>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    1250:	00eb      	lsls	r3, r5, #3
    1252:	1b5b      	subs	r3, r3, r5
    1254:	009b      	lsls	r3, r3, #2
    1256:	f242 52c0 	movw	r2, #9664	; 0x25c0
    125a:	f2c0 0200 	movt	r2, #0
    125e:	4694      	mov	ip, r2
    1260:	4463      	add	r3, ip
    1262:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
    1264:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1266:	f240 72ff 	movw	r2, #2047	; 0x7ff
    126a:	8c23      	ldrh	r3, [r4, #32]
    126c:	4213      	tst	r3, r2
    126e:	d1fc      	bne.n	126a <_adc_init+0xb0>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1270:	00eb      	lsls	r3, r5, #3
    1272:	1b5b      	subs	r3, r3, r5
    1274:	009b      	lsls	r3, r3, #2
    1276:	f242 52c0 	movw	r2, #9664	; 0x25c0
    127a:	f2c0 0200 	movt	r2, #0
    127e:	4694      	mov	ip, r2
    1280:	4463      	add	r3, ip
    1282:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1284:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1286:	f240 72ff 	movw	r2, #2047	; 0x7ff
    128a:	8c23      	ldrh	r3, [r4, #32]
    128c:	4213      	tst	r3, r2
    128e:	d1fc      	bne.n	128a <_adc_init+0xd0>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1290:	00eb      	lsls	r3, r5, #3
    1292:	1b5b      	subs	r3, r3, r5
    1294:	009b      	lsls	r3, r3, #2
    1296:	f242 52c0 	movw	r2, #9664	; 0x25c0
    129a:	f2c0 0200 	movt	r2, #0
    129e:	4694      	mov	ip, r2
    12a0:	4463      	add	r3, ip
    12a2:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    12a4:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    12aa:	8c23      	ldrh	r3, [r4, #32]
    12ac:	4213      	tst	r3, r2
    12ae:	d1fc      	bne.n	12aa <_adc_init+0xf0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    12b0:	00eb      	lsls	r3, r5, #3
    12b2:	1b5b      	subs	r3, r3, r5
    12b4:	009b      	lsls	r3, r3, #2
    12b6:	f242 52c0 	movw	r2, #9664	; 0x25c0
    12ba:	f2c0 0200 	movt	r2, #0
    12be:	4694      	mov	ip, r2
    12c0:	4463      	add	r3, ip
    12c2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    12c4:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12c6:	2240      	movs	r2, #64	; 0x40
    12c8:	8c23      	ldrh	r3, [r4, #32]
    12ca:	4213      	tst	r3, r2
    12cc:	d1fc      	bne.n	12c8 <_adc_init+0x10e>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    12ce:	00eb      	lsls	r3, r5, #3
    12d0:	1b5b      	subs	r3, r3, r5
    12d2:	009b      	lsls	r3, r3, #2
    12d4:	f242 52c0 	movw	r2, #9664	; 0x25c0
    12d8:	f2c0 0200 	movt	r2, #0
    12dc:	4694      	mov	ip, r2
    12de:	4463      	add	r3, ip
    12e0:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    12e2:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	8c23      	ldrh	r3, [r4, #32]
    12e8:	4213      	tst	r3, r2
    12ea:	d1fc      	bne.n	12e6 <_adc_init+0x12c>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    12ec:	00eb      	lsls	r3, r5, #3
    12ee:	1b5b      	subs	r3, r3, r5
    12f0:	009b      	lsls	r3, r3, #2
    12f2:	f242 52c0 	movw	r2, #9664	; 0x25c0
    12f6:	f2c0 0200 	movt	r2, #0
    12fa:	4694      	mov	ip, r2
    12fc:	4463      	add	r3, ip
    12fe:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1300:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1302:	f240 1200 	movw	r2, #256	; 0x100
    1306:	8c23      	ldrh	r3, [r4, #32]
    1308:	4213      	tst	r3, r2
    130a:	d1fc      	bne.n	1306 <_adc_init+0x14c>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    130c:	00eb      	lsls	r3, r5, #3
    130e:	1b5b      	subs	r3, r3, r5
    1310:	009b      	lsls	r3, r3, #2
    1312:	f242 52c0 	movw	r2, #9664	; 0x25c0
    1316:	f2c0 0200 	movt	r2, #0
    131a:	4694      	mov	ip, r2
    131c:	4463      	add	r3, ip
    131e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1320:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1322:	f240 2200 	movw	r2, #512	; 0x200
    1326:	8c23      	ldrh	r3, [r4, #32]
    1328:	4213      	tst	r3, r2
    132a:	d1fc      	bne.n	1326 <_adc_init+0x16c>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    132c:	00eb      	lsls	r3, r5, #3
    132e:	1b5a      	subs	r2, r3, r5
    1330:	0092      	lsls	r2, r2, #2
    1332:	f242 51c0 	movw	r1, #9664	; 0x25c0
    1336:	f2c0 0100 	movt	r1, #0
    133a:	468c      	mov	ip, r1
    133c:	4462      	add	r2, ip
    133e:	7d12      	ldrb	r2, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    1340:	7722      	strb	r2, [r4, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
    1342:	2200      	movs	r2, #0
    1344:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_CALIB_reg(hw, ADC_CALIB_BIASCOMP(BIASCOMP_VAL) | ADC_CALIB_BIASREFBUF(BIASREFBUF_VAL));
    1346:	f246 0220 	movw	r2, #24608	; 0x6020
    134a:	f2c0 0280 	movt	r2, #128	; 0x80
    134e:	6811      	ldr	r1, [r2, #0]
    1350:	068a      	lsls	r2, r1, #26
    1352:	0f52      	lsrs	r2, r2, #29
    1354:	0209      	lsls	r1, r1, #8
    1356:	f240 7000 	movw	r0, #1792	; 0x700
    135a:	4001      	ands	r1, r0
    135c:	430a      	orrs	r2, r1
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    135e:	85a2      	strh	r2, [r4, #44]	; 0x2c
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1360:	1b5d      	subs	r5, r3, r5
    1362:	00ad      	lsls	r5, r5, #2
    1364:	4465      	add	r5, ip
    1366:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1368:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    136a:	2203      	movs	r2, #3
    136c:	8c23      	ldrh	r3, [r4, #32]
    136e:	4213      	tst	r3, r2
    1370:	d1fc      	bne.n	136c <_adc_init+0x1b2>
}
    1372:	2000      	movs	r0, #0
    1374:	bd70      	pop	{r4, r5, r6, pc}

00001376 <_adc_async_init>:
{
    1376:	b570      	push	{r4, r5, r6, lr}
    1378:	0005      	movs	r5, r0
    137a:	000c      	movs	r4, r1
	ASSERT(device);
    137c:	f242 51dc 	movw	r1, #9692	; 0x25dc
    1380:	f2c0 0100 	movt	r1, #0
    1384:	1e43      	subs	r3, r0, #1
    1386:	4198      	sbcs	r0, r3
    1388:	b2c0      	uxtb	r0, r0
    138a:	22ed      	movs	r2, #237	; 0xed
    138c:	f241 036b 	movw	r3, #4203	; 0x106b
    1390:	f2c0 0300 	movt	r3, #0
    1394:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1396:	0020      	movs	r0, r4
    1398:	f241 13b7 	movw	r3, #4535	; 0x11b7
    139c:	f2c0 0300 	movt	r3, #0
    13a0:	4798      	blx	r3
    13a2:	0001      	movs	r1, r0
    13a4:	0020      	movs	r0, r4
    13a6:	f241 13bb 	movw	r3, #4539	; 0x11bb
    13aa:	f2c0 0300 	movt	r3, #0
    13ae:	4798      	blx	r3
	if (init_status) {
    13b0:	b100      	cbz	r0, 13b4 <_adc_async_init+0x3e>
}
    13b2:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    13b4:	616c      	str	r4, [r5, #20]
	if (hw == ADC) {
    13b6:	f641 4300 	movw	r3, #7168	; 0x1c00
    13ba:	f2c4 2300 	movt	r3, #16896	; 0x4200
    13be:	429c      	cmp	r4, r3
    13c0:	d017      	beq.n	13f2 <_adc_async_init+0x7c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13c2:	f24e 1300 	movw	r3, #57600	; 0xe100
    13c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    13ca:	2484      	movs	r4, #132	; 0x84
    13cc:	2220      	movs	r2, #32
    13ce:	511a      	str	r2, [r3, r4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    13d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13d4:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13d8:	f240 1184 	movw	r1, #388	; 0x184
    13dc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13de:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13e0:	3220      	adds	r2, #32
    13e2:	511a      	str	r2, [r3, r4]
  __ASM volatile ("dsb 0xF":::"memory");
    13e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ec:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ee:	605a      	str	r2, [r3, #4]
    13f0:	e7df      	b.n	13b2 <_adc_async_init+0x3c>
		_adc0_dev = dev;
    13f2:	f240 0358 	movw	r3, #88	; 0x58
    13f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13fa:	601d      	str	r5, [r3, #0]
    13fc:	e7e1      	b.n	13c2 <_adc_async_init+0x4c>

000013fe <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    13fe:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
    1400:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    1402:	0680      	lsls	r0, r0, #26
    1404:	0f80      	lsrs	r0, r0, #30
    1406:	3803      	subs	r0, #3
    1408:	1e43      	subs	r3, r0, #1
    140a:	4198      	sbcs	r0, r3
    140c:	3001      	adds	r0, #1
}
    140e:	4770      	bx	lr

00001410 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1410:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START_Msk;
    1412:	7e13      	ldrb	r3, [r2, #24]
    1414:	2102      	movs	r1, #2
    1416:	430b      	orrs	r3, r1
    1418:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    141a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    141e:	8c13      	ldrh	r3, [r2, #32]
    1420:	420b      	tst	r3, r1
    1422:	d1fc      	bne.n	141e <_adc_async_convert+0xe>
}
    1424:	4770      	bx	lr

00001426 <ADC_OTHER_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC_OTHER_Handler(void)
{
    1426:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    1428:	f240 0358 	movw	r3, #88	; 0x58
    142c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1430:	6818      	ldr	r0, [r3, #0]
    1432:	f241 1377 	movw	r3, #4471	; 0x1177
    1436:	f2c0 0300 	movt	r3, #0
    143a:	4798      	blx	r3
}
    143c:	bd10      	pop	{r4, pc}

0000143e <ADC_RESRDY_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC_RESRDY_Handler(void)
{
    143e:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    1440:	f240 0358 	movw	r3, #88	; 0x58
    1444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1448:	6818      	ldr	r0, [r3, #0]
    144a:	f241 1377 	movw	r3, #4471	; 0x1177
    144e:	f2c0 0300 	movt	r3, #0
    1452:	4798      	blx	r3
}
    1454:	bd10      	pop	{r4, pc}

00001456 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1456:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1458:	f245 0300 	movw	r3, #20480	; 0x5000
    145c:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1460:	685a      	ldr	r2, [r3, #4]
    1462:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
    1464:	2000      	movs	r0, #0
    1466:	f641 334b 	movw	r3, #6987	; 0x1b4b
    146a:	f2c0 0300 	movt	r3, #0
    146e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1470:	f641 3303 	movw	r3, #6915	; 0x1b03
    1474:	f2c0 0300 	movt	r3, #0
    1478:	4798      	blx	r3
	_oscctrl_init_sources();
    147a:	f641 331b 	movw	r3, #6939	; 0x1b1b
    147e:	f2c0 0300 	movt	r3, #0
    1482:	4798      	blx	r3
	_mclk_init();
    1484:	f641 23f5 	movw	r3, #6901	; 0x1af5
    1488:	f2c0 0300 	movt	r3, #0
    148c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    148e:	f641 3349 	movw	r3, #6985	; 0x1b49
    1492:	f2c0 0300 	movt	r3, #0
    1496:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1498:	201f      	movs	r0, #31
    149a:	f641 23a7 	movw	r3, #6823	; 0x1aa7
    149e:	f2c0 0300 	movt	r3, #0
    14a2:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    14a4:	f640 0300 	movw	r3, #2048	; 0x800
    14a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    14ac:	691a      	ldr	r2, [r3, #16]
    14ae:	2108      	movs	r1, #8
    14b0:	430a      	orrs	r2, r1
    14b2:	611a      	str	r2, [r3, #16]
	CRITICAL_SECTION_LEAVE();
#endif

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    14b4:	f241 43c1 	movw	r3, #5313	; 0x14c1
    14b8:	f2c0 0300 	movt	r3, #0
    14bc:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    14be:	bd10      	pop	{r4, pc}

000014c0 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c2:	46ce      	mov	lr, r9
    14c4:	4647      	mov	r7, r8
    14c6:	b580      	push	{r7, lr}
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE_Msk;
    14c8:	f246 0300 	movw	r3, #24576	; 0x6000
    14cc:	f2c4 1300 	movt	r3, #16640	; 0x4100
    14d0:	881a      	ldrh	r2, [r3, #0]
    14d2:	2102      	movs	r1, #2
    14d4:	438a      	bics	r2, r1
    14d6:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE_Msk;
    14d8:	881a      	ldrh	r2, [r3, #0]
    14da:	3102      	adds	r1, #2
    14dc:	438a      	bics	r2, r1
    14de:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST_Msk;
    14e0:	2240      	movs	r2, #64	; 0x40
    14e2:	5c99      	ldrb	r1, [r3, r2]
    14e4:	2001      	movs	r0, #1
    14e6:	4301      	orrs	r1, r0
    14e8:	b2c9      	uxtb	r1, r1
    14ea:	5499      	strb	r1, [r3, r2]
	((Dmac *)hw)->CTRL.reg = data;
    14ec:	f640 7200 	movw	r2, #3840	; 0xf00
    14f0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    14f2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN_Msk;
    14f4:	2101      	movs	r1, #1
    14f6:	438a      	bics	r2, r1
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    14f8:	4302      	orrs	r2, r0
    14fa:	b2d2      	uxtb	r2, r2
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    14fc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    14fe:	2200      	movs	r2, #0
    1500:	615a      	str	r2, [r3, #20]
	    DMAC,
	    DMAC_PRICTRL0_LVLPRI0(CONF_DMAC_LVLPRI0) | DMAC_PRICTRL0_LVLPRI1(CONF_DMAC_LVLPRI1)
	        | DMAC_PRICTRL0_LVLPRI2(CONF_DMAC_LVLPRI2) | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	        | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos) | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	        | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos) | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1502:	f240 1280 	movw	r2, #384	; 0x180
    1506:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->BASEADDR.reg = data;
    150a:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    150c:	f240 2200 	movw	r2, #512	; 0x200
    1510:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->WRBADDR.reg = data;
    1514:	639a      	str	r2, [r3, #56]	; 0x38
    1516:	f242 52f4 	movw	r2, #9716	; 0x25f4
    151a:	f2c0 0200 	movt	r2, #0
    151e:	2100      	movs	r1, #0
	((Dmac *)hw)->CHID.reg = data;
    1520:	f246 0000 	movw	r0, #24576	; 0x6000
    1524:	f2c4 1000 	movt	r0, #16640	; 0x4100
    1528:	f240 0c3f 	movw	ip, #63	; 0x3f

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    152c:	2440      	movs	r4, #64	; 0x40

	for (; i < DMAC_CH_NUM; i++) {
		hri_dmac_write_CHID_reg(DMAC, i);

		hri_dmac_write_CHCTRLA_RUNSTDBY_bit(DMAC, _cfgs[i].ctrla & DMAC_CHCTRLA_RUNSTDBY);
    152e:	2701      	movs	r7, #1
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1530:	f240 1580 	movw	r5, #384	; 0x180
    1534:	f2c2 0500 	movt	r5, #8192	; 0x2000
}

static inline void hri_dmacdescriptor_write_DESCADDR_reg(const void *const hw, hri_dmacdescriptor_descaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1538:	f240 0900 	movw	r9, #0
    153c:	b2cb      	uxtb	r3, r1
	((Dmac *)hw)->CHID.reg = data;
    153e:	4666      	mov	r6, ip
    1540:	5583      	strb	r3, [r0, r6]
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    1542:	5d03      	ldrb	r3, [r0, r4]
    1544:	4698      	mov	r8, r3
    1546:	7813      	ldrb	r3, [r2, #0]
    1548:	099b      	lsrs	r3, r3, #6
    154a:	403b      	ands	r3, r7
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    154c:	019b      	lsls	r3, r3, #6
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY_Msk;
    154e:	4646      	mov	r6, r8
    1550:	43a6      	bics	r6, r4
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    1552:	4333      	orrs	r3, r6
	((Dmac *)hw)->CHCTRLA.reg = tmp;
    1554:	5503      	strb	r3, [r0, r4]
	((Dmac *)hw)->CHCTRLB.reg = data;
    1556:	6853      	ldr	r3, [r2, #4]
    1558:	6443      	str	r3, [r0, #68]	; 0x44

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    155a:	8913      	ldrh	r3, [r2, #8]
    155c:	4698      	mov	r8, r3
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    155e:	010b      	lsls	r3, r1, #4
    1560:	4646      	mov	r6, r8
    1562:	535e      	strh	r6, [r3, r5]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1564:	f240 1680 	movw	r6, #384	; 0x180
    1568:	f2c2 0600 	movt	r6, #8192	; 0x2000
    156c:	46b0      	mov	r8, r6
    156e:	4443      	add	r3, r8
    1570:	464e      	mov	r6, r9
    1572:	60de      	str	r6, [r3, #12]
    1574:	3101      	adds	r1, #1
    1576:	320c      	adds	r2, #12
	for (; i < DMAC_CH_NUM; i++) {
    1578:	2908      	cmp	r1, #8
    157a:	d1df      	bne.n	153c <_dma_init+0x7c>
    157c:	230b      	movs	r3, #11
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    157e:	241f      	movs	r4, #31
    1580:	2001      	movs	r0, #1
    1582:	f24e 1100 	movw	r1, #57600	; 0xe100
    1586:	f2ce 0100 	movt	r1, #57344	; 0xe000
		hri_dmacdescriptor_write_DESCADDR_reg(&_descriptor_section[i], 0x0);
	}

	for (i = 0; i < 5; i++) {
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    158a:	b2da      	uxtb	r2, r3
  if ((int32_t)(IRQn) >= 0)
    158c:	061d      	lsls	r5, r3, #24
    158e:	d50f      	bpl.n	15b0 <_dma_init+0xf0>
    1590:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1592:	2b10      	cmp	r3, #16
    1594:	d1f9      	bne.n	158a <_dma_init+0xca>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE_Msk;
    1596:	f246 0300 	movw	r3, #24576	; 0x6000
    159a:	f2c4 1300 	movt	r3, #16640	; 0x4100
    159e:	881a      	ldrh	r2, [r3, #0]
    15a0:	2102      	movs	r1, #2
    15a2:	430a      	orrs	r2, r1
    15a4:	801a      	strh	r2, [r3, #0]
	}

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);

	return ERR_NONE;
}
    15a6:	2000      	movs	r0, #0
    15a8:	bc0c      	pop	{r2, r3}
    15aa:	4690      	mov	r8, r2
    15ac:	4699      	mov	r9, r3
    15ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15b0:	095d      	lsrs	r5, r3, #5
    15b2:	4022      	ands	r2, r4
    15b4:	0006      	movs	r6, r0
    15b6:	4096      	lsls	r6, r2
    15b8:	002a      	movs	r2, r5
    15ba:	3520      	adds	r5, #32
    15bc:	00ad      	lsls	r5, r5, #2
    15be:	506e      	str	r6, [r5, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    15c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15c4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15c8:	0015      	movs	r5, r2
    15ca:	3560      	adds	r5, #96	; 0x60
    15cc:	00ad      	lsls	r5, r5, #2
    15ce:	506e      	str	r6, [r5, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d0:	0092      	lsls	r2, r2, #2
    15d2:	5056      	str	r6, [r2, r1]
    15d4:	e7dc      	b.n	1590 <_dma_init+0xd0>

000015d6 <DMAC_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    15d6:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    15d8:	f246 0200 	movw	r2, #24576	; 0x6000
    15dc:	f2c4 1200 	movt	r2, #16640	; 0x4100
    15e0:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    15e2:	2307      	movs	r3, #7
    15e4:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    15e6:	243f      	movs	r4, #63	; 0x3f
    15e8:	5d15      	ldrb	r5, [r2, r4]
    15ea:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    15ec:	0058      	lsls	r0, r3, #1
    15ee:	18c0      	adds	r0, r0, r3
    15f0:	0080      	lsls	r0, r0, #2
    15f2:	f240 015c 	movw	r1, #92	; 0x5c
    15f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    15fa:	468c      	mov	ip, r1
    15fc:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    15fe:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1600:	214e      	movs	r1, #78	; 0x4e
    1602:	5c51      	ldrb	r1, [r2, r1]
    1604:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1606:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1608:	07ca      	lsls	r2, r1, #31
    160a:	d402      	bmi.n	1612 <DMAC_0_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    160c:	078a      	lsls	r2, r1, #30
    160e:	d40a      	bmi.n	1626 <DMAC_0_Handler+0x50>
	_dmac_handler();
}
    1610:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1612:	f246 0200 	movw	r2, #24576	; 0x6000
    1616:	f2c4 1200 	movt	r2, #16640	; 0x4100
    161a:	3c3e      	subs	r4, #62	; 0x3e
    161c:	214e      	movs	r1, #78	; 0x4e
    161e:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1620:	6843      	ldr	r3, [r0, #4]
    1622:	4798      	blx	r3
    1624:	e7f4      	b.n	1610 <DMAC_0_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1626:	f246 0200 	movw	r2, #24576	; 0x6000
    162a:	f2c4 1200 	movt	r2, #16640	; 0x4100
    162e:	2402      	movs	r4, #2
    1630:	214e      	movs	r1, #78	; 0x4e
    1632:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1634:	f240 015c 	movw	r1, #92	; 0x5c
    1638:	f2c2 0100 	movt	r1, #8192	; 0x2000
    163c:	005a      	lsls	r2, r3, #1
    163e:	18d3      	adds	r3, r2, r3
    1640:	009b      	lsls	r3, r3, #2
    1642:	585b      	ldr	r3, [r3, r1]
    1644:	4798      	blx	r3
}
    1646:	e7e3      	b.n	1610 <DMAC_0_Handler+0x3a>

00001648 <DMAC_1_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1648:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    164a:	f246 0200 	movw	r2, #24576	; 0x6000
    164e:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1652:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1654:	2307      	movs	r3, #7
    1656:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1658:	243f      	movs	r4, #63	; 0x3f
    165a:	5d15      	ldrb	r5, [r2, r4]
    165c:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    165e:	0058      	lsls	r0, r3, #1
    1660:	18c0      	adds	r0, r0, r3
    1662:	0080      	lsls	r0, r0, #2
    1664:	f240 015c 	movw	r1, #92	; 0x5c
    1668:	f2c2 0100 	movt	r1, #8192	; 0x2000
    166c:	468c      	mov	ip, r1
    166e:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1670:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1672:	214e      	movs	r1, #78	; 0x4e
    1674:	5c51      	ldrb	r1, [r2, r1]
    1676:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1678:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    167a:	07ca      	lsls	r2, r1, #31
    167c:	d402      	bmi.n	1684 <DMAC_1_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    167e:	078a      	lsls	r2, r1, #30
    1680:	d40a      	bmi.n	1698 <DMAC_1_Handler+0x50>
	_dmac_handler();
}
    1682:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1684:	f246 0200 	movw	r2, #24576	; 0x6000
    1688:	f2c4 1200 	movt	r2, #16640	; 0x4100
    168c:	3c3e      	subs	r4, #62	; 0x3e
    168e:	214e      	movs	r1, #78	; 0x4e
    1690:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1692:	6843      	ldr	r3, [r0, #4]
    1694:	4798      	blx	r3
    1696:	e7f4      	b.n	1682 <DMAC_1_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1698:	f246 0200 	movw	r2, #24576	; 0x6000
    169c:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16a0:	2402      	movs	r4, #2
    16a2:	214e      	movs	r1, #78	; 0x4e
    16a4:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    16a6:	f240 015c 	movw	r1, #92	; 0x5c
    16aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    16ae:	005a      	lsls	r2, r3, #1
    16b0:	18d3      	adds	r3, r2, r3
    16b2:	009b      	lsls	r3, r3, #2
    16b4:	585b      	ldr	r3, [r3, r1]
    16b6:	4798      	blx	r3
}
    16b8:	e7e3      	b.n	1682 <DMAC_1_Handler+0x3a>

000016ba <DMAC_2_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    16ba:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    16bc:	f246 0200 	movw	r2, #24576	; 0x6000
    16c0:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16c4:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    16c6:	2307      	movs	r3, #7
    16c8:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    16ca:	243f      	movs	r4, #63	; 0x3f
    16cc:	5d15      	ldrb	r5, [r2, r4]
    16ce:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    16d0:	0058      	lsls	r0, r3, #1
    16d2:	18c0      	adds	r0, r0, r3
    16d4:	0080      	lsls	r0, r0, #2
    16d6:	f240 015c 	movw	r1, #92	; 0x5c
    16da:	f2c2 0100 	movt	r1, #8192	; 0x2000
    16de:	468c      	mov	ip, r1
    16e0:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    16e2:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    16e4:	214e      	movs	r1, #78	; 0x4e
    16e6:	5c51      	ldrb	r1, [r2, r1]
    16e8:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    16ea:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    16ec:	07ca      	lsls	r2, r1, #31
    16ee:	d402      	bmi.n	16f6 <DMAC_2_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    16f0:	078a      	lsls	r2, r1, #30
    16f2:	d40a      	bmi.n	170a <DMAC_2_Handler+0x50>
	_dmac_handler();
}
    16f4:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    16f6:	f246 0200 	movw	r2, #24576	; 0x6000
    16fa:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16fe:	3c3e      	subs	r4, #62	; 0x3e
    1700:	214e      	movs	r1, #78	; 0x4e
    1702:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1704:	6843      	ldr	r3, [r0, #4]
    1706:	4798      	blx	r3
    1708:	e7f4      	b.n	16f4 <DMAC_2_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    170a:	f246 0200 	movw	r2, #24576	; 0x6000
    170e:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1712:	2402      	movs	r4, #2
    1714:	214e      	movs	r1, #78	; 0x4e
    1716:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1718:	f240 015c 	movw	r1, #92	; 0x5c
    171c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1720:	005a      	lsls	r2, r3, #1
    1722:	18d3      	adds	r3, r2, r3
    1724:	009b      	lsls	r3, r3, #2
    1726:	585b      	ldr	r3, [r3, r1]
    1728:	4798      	blx	r3
}
    172a:	e7e3      	b.n	16f4 <DMAC_2_Handler+0x3a>

0000172c <DMAC_3_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    172c:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    172e:	f246 0200 	movw	r2, #24576	; 0x6000
    1732:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1736:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1738:	2307      	movs	r3, #7
    173a:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    173c:	243f      	movs	r4, #63	; 0x3f
    173e:	5d15      	ldrb	r5, [r2, r4]
    1740:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    1742:	0058      	lsls	r0, r3, #1
    1744:	18c0      	adds	r0, r0, r3
    1746:	0080      	lsls	r0, r0, #2
    1748:	f240 015c 	movw	r1, #92	; 0x5c
    174c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1750:	468c      	mov	ip, r1
    1752:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1754:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1756:	214e      	movs	r1, #78	; 0x4e
    1758:	5c51      	ldrb	r1, [r2, r1]
    175a:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    175c:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    175e:	07ca      	lsls	r2, r1, #31
    1760:	d402      	bmi.n	1768 <DMAC_3_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    1762:	078a      	lsls	r2, r1, #30
    1764:	d40a      	bmi.n	177c <DMAC_3_Handler+0x50>
	_dmac_handler();
}
    1766:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1768:	f246 0200 	movw	r2, #24576	; 0x6000
    176c:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1770:	3c3e      	subs	r4, #62	; 0x3e
    1772:	214e      	movs	r1, #78	; 0x4e
    1774:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1776:	6843      	ldr	r3, [r0, #4]
    1778:	4798      	blx	r3
    177a:	e7f4      	b.n	1766 <DMAC_3_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    177c:	f246 0200 	movw	r2, #24576	; 0x6000
    1780:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1784:	2402      	movs	r4, #2
    1786:	214e      	movs	r1, #78	; 0x4e
    1788:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    178a:	f240 015c 	movw	r1, #92	; 0x5c
    178e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1792:	005a      	lsls	r2, r3, #1
    1794:	18d3      	adds	r3, r2, r3
    1796:	009b      	lsls	r3, r3, #2
    1798:	585b      	ldr	r3, [r3, r1]
    179a:	4798      	blx	r3
}
    179c:	e7e3      	b.n	1766 <DMAC_3_Handler+0x3a>

0000179e <DMAC_OTHER_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_OTHER_Handler(void)
{
    179e:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17a0:	f246 0200 	movw	r2, #24576	; 0x6000
    17a4:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17a8:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    17aa:	2307      	movs	r3, #7
    17ac:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    17ae:	243f      	movs	r4, #63	; 0x3f
    17b0:	5d15      	ldrb	r5, [r2, r4]
    17b2:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    17b4:	0058      	lsls	r0, r3, #1
    17b6:	18c0      	adds	r0, r0, r3
    17b8:	0080      	lsls	r0, r0, #2
    17ba:	f240 015c 	movw	r1, #92	; 0x5c
    17be:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17c2:	468c      	mov	ip, r1
    17c4:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    17c6:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    17c8:	214e      	movs	r1, #78	; 0x4e
    17ca:	5c51      	ldrb	r1, [r2, r1]
    17cc:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    17ce:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    17d0:	07ca      	lsls	r2, r1, #31
    17d2:	d402      	bmi.n	17da <DMAC_OTHER_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    17d4:	078a      	lsls	r2, r1, #30
    17d6:	d40a      	bmi.n	17ee <DMAC_OTHER_Handler+0x50>
	_dmac_handler();
}
    17d8:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    17da:	f246 0200 	movw	r2, #24576	; 0x6000
    17de:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17e2:	3c3e      	subs	r4, #62	; 0x3e
    17e4:	214e      	movs	r1, #78	; 0x4e
    17e6:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    17e8:	6843      	ldr	r3, [r0, #4]
    17ea:	4798      	blx	r3
    17ec:	e7f4      	b.n	17d8 <DMAC_OTHER_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    17ee:	f246 0200 	movw	r2, #24576	; 0x6000
    17f2:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17f6:	2402      	movs	r4, #2
    17f8:	214e      	movs	r1, #78	; 0x4e
    17fa:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    17fc:	f240 015c 	movw	r1, #92	; 0x5c
    1800:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1804:	005a      	lsls	r2, r3, #1
    1806:	18d3      	adds	r3, r2, r3
    1808:	009b      	lsls	r3, r3, #2
    180a:	585b      	ldr	r3, [r3, r1]
    180c:	4798      	blx	r3
}
    180e:	e7e3      	b.n	17d8 <DMAC_OTHER_Handler+0x3a>

00001810 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1810:	f642 2300 	movw	r3, #10752	; 0x2a00
    1814:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1818:	685b      	ldr	r3, [r3, #4]
	 | (CONF_EIC_FILTEN4 << EIC_CONFIG_FILTEN4_Pos) | EIC_CONFIG_SENSE4(CONF_EIC_SENSE4)                               \
	 | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)                               \
	 | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)                               \
	 | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7) | 0)

	if (!hri_eic_is_syncing(EIC_SEC, EIC_SYNCBUSY_SWRST)) {
    181a:	07db      	lsls	r3, r3, #31
    181c:	d434      	bmi.n	1888 <_ext_irq_init+0x78>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    181e:	f642 2200 	movw	r2, #10752	; 0x2a00
    1822:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1826:	2103      	movs	r1, #3
    1828:	6853      	ldr	r3, [r2, #4]
    182a:	4219      	tst	r1, r3
    182c:	d1fc      	bne.n	1828 <_ext_irq_init+0x18>
	tmp = ((Eic *)hw)->CTRLA.reg;
    182e:	f642 2300 	movw	r3, #10752	; 0x2a00
    1832:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1836:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC_SEC, EIC_CTRLA_ENABLE)) {
    1838:	079b      	lsls	r3, r3, #30
    183a:	d517      	bpl.n	186c <_ext_irq_init+0x5c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
    183c:	f642 2300 	movw	r3, #10752	; 0x2a00
    1840:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1844:	781a      	ldrb	r2, [r3, #0]
    1846:	2102      	movs	r1, #2
    1848:	438a      	bics	r2, r1
    184a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    184c:	f642 2200 	movw	r2, #10752	; 0x2a00
    1850:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1854:	3101      	adds	r1, #1
    1856:	6853      	ldr	r3, [r2, #4]
    1858:	4219      	tst	r1, r3
    185a:	d1fc      	bne.n	1856 <_ext_irq_init+0x46>
    185c:	f642 2200 	movw	r2, #10752	; 0x2a00
    1860:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1864:	2102      	movs	r1, #2
    1866:	6853      	ldr	r3, [r2, #4]
    1868:	4219      	tst	r1, r3
    186a:	d1fc      	bne.n	1866 <_ext_irq_init+0x56>
	((Eic *)hw)->CTRLA.reg = data;
    186c:	f642 2300 	movw	r3, #10752	; 0x2a00
    1870:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1874:	2201      	movs	r2, #1
    1876:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1878:	f642 2200 	movw	r2, #10752	; 0x2a00
    187c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1880:	2103      	movs	r1, #3
    1882:	6853      	ldr	r3, [r2, #4]
    1884:	4219      	tst	r1, r3
    1886:	d1fc      	bne.n	1882 <_ext_irq_init+0x72>
    1888:	f642 2200 	movw	r2, #10752	; 0x2a00
    188c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1890:	2101      	movs	r1, #1
    1892:	6853      	ldr	r3, [r2, #4]
    1894:	4219      	tst	r1, r3
    1896:	d1fc      	bne.n	1892 <_ext_irq_init+0x82>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1898:	f642 2200 	movw	r2, #10752	; 0x2a00
    189c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18a0:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL_Msk;
    18a2:	2110      	movs	r1, #16
    18a4:	438b      	bics	r3, r1
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    18a6:	430b      	orrs	r3, r1
	((Eic *)hw)->CTRLA.reg = tmp;
    18a8:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18aa:	f642 2200 	movw	r2, #10752	; 0x2a00
    18ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18b2:	390d      	subs	r1, #13
    18b4:	6853      	ldr	r3, [r2, #4]
    18b6:	4219      	tst	r1, r3
    18b8:	d1fc      	bne.n	18b4 <_ext_irq_init+0xa4>
	((Eic *)hw)->NONSEC.reg = data;
    18ba:	f642 2300 	movw	r3, #10752	; 0x2a00
    18be:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18c2:	2220      	movs	r2, #32
    18c4:	641a      	str	r2, [r3, #64]	; 0x40
	((Eic *)hw)->DPRESCALER.reg = data;
    18c6:	2200      	movs	r2, #0
    18c8:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->EVCTRL.reg = data;
    18ca:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
    18cc:	619a      	str	r2, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
    18ce:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
    18d0:	22a0      	movs	r2, #160	; 0xa0
    18d2:	03d2      	lsls	r2, r2, #15
    18d4:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
    18d6:	781a      	ldrb	r2, [r3, #0]
    18d8:	2102      	movs	r1, #2
    18da:	430a      	orrs	r2, r1
    18dc:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18de:	f642 2200 	movw	r2, #10752	; 0x2a00
    18e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18e6:	3101      	adds	r1, #1
    18e8:	6853      	ldr	r3, [r2, #4]
    18ea:	4219      	tst	r1, r3
    18ec:	d1fc      	bne.n	18e8 <_ext_irq_init+0xd8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ee:	f24e 1300 	movw	r3, #57600	; 0xe100
    18f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    18f6:	2280      	movs	r2, #128	; 0x80
    18f8:	509a      	str	r2, [r3, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    18fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18fe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1902:	f240 1180 	movw	r1, #384	; 0x180
    1906:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1908:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_OTHER_IRQn);
	NVIC_ClearPendingIRQ(EIC_OTHER_IRQn);
	NVIC_EnableIRQ(EIC_OTHER_IRQn);

	callback = cb;
    190a:	f240 03bc 	movw	r3, #188	; 0xbc
    190e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1912:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1914:	2000      	movs	r0, #0
    1916:	4770      	bx	lr

00001918 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1918:	281b      	cmp	r0, #27
    191a:	d002      	beq.n	1922 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    191c:	2001      	movs	r0, #1
    191e:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC_SEC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC_SEC, 1ul << extint);
	}

	return ERR_NONE;
}
    1920:	4770      	bx	lr
	if (enable) {
    1922:	b941      	cbnz	r1, 1936 <_ext_irq_enable+0x1e>
	((Eic *)hw)->INTENCLR.reg = mask;
    1924:	f642 2300 	movw	r3, #10752	; 0x2a00
    1928:	f2c4 0300 	movt	r3, #16384	; 0x4000
    192c:	2220      	movs	r2, #32
    192e:	60da      	str	r2, [r3, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1930:	615a      	str	r2, [r3, #20]
	return ERR_NONE;
    1932:	2000      	movs	r0, #0
    1934:	e7f4      	b.n	1920 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
    1936:	f642 2300 	movw	r3, #10752	; 0x2a00
    193a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    193e:	2220      	movs	r2, #32
    1940:	611a      	str	r2, [r3, #16]
    1942:	2000      	movs	r0, #0
    1944:	e7ec      	b.n	1920 <_ext_irq_enable+0x8>

00001946 <EIC_OTHER_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_OTHER_Handler(void)
{
    1946:	b5f0      	push	{r4, r5, r6, r7, lr}
    1948:	46c6      	mov	lr, r8
    194a:	b500      	push	{lr}
    194c:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    194e:	f642 2300 	movw	r3, #10752	; 0x2a00
    1952:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1956:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    1958:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    195a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    195c:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    195e:	f242 615c 	movw	r1, #9820	; 0x265c
    1962:	f2c0 0100 	movt	r1, #0
    1966:	f240 03bc 	movw	r3, #188	; 0xbc
    196a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    196e:	6818      	ldr	r0, [r3, #0]
    1970:	1e43      	subs	r3, r0, #1
    1972:	4198      	sbcs	r0, r3
    1974:	b2c0      	uxtb	r0, r0
    1976:	22f2      	movs	r2, #242	; 0xf2
    1978:	f241 036b 	movw	r3, #4203	; 0x106b
    197c:	f2c0 0300 	movt	r3, #0
    1980:	4798      	blx	r3
	while (flags) {
    1982:	9b01      	ldr	r3, [sp, #4]
    1984:	2b00      	cmp	r3, #0
    1986:	d055      	beq.n	1a34 <EIC_OTHER_Handler+0xee>
    1988:	2301      	movs	r3, #1
    198a:	425b      	negs	r3, r3
    198c:	4698      	mov	r8, r3
				if (_map[middle].extint == pos) {
    198e:	f242 6554 	movw	r5, #9812	; 0x2654
    1992:	f2c0 0500 	movt	r5, #0
    1996:	e041      	b.n	1a1c <EIC_OTHER_Handler+0xd6>
					upper = middle - 1;
    1998:	3a01      	subs	r2, #1
    199a:	b2d1      	uxtb	r1, r2
			while (upper >= lower) {
    199c:	428f      	cmp	r7, r1
    199e:	d80c      	bhi.n	19ba <EIC_OTHER_Handler+0x74>
				middle = (upper + lower) >> 1;
    19a0:	19cb      	adds	r3, r1, r7
    19a2:	105b      	asrs	r3, r3, #1
    19a4:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    19a6:	4003      	ands	r3, r0
    19a8:	00db      	lsls	r3, r3, #3
    19aa:	5d5b      	ldrb	r3, [r3, r5]
    19ac:	42a3      	cmp	r3, r4
    19ae:	d008      	beq.n	19c2 <EIC_OTHER_Handler+0x7c>
				if (_map[middle].extint < pos) {
    19b0:	429c      	cmp	r4, r3
    19b2:	ddf1      	ble.n	1998 <EIC_OTHER_Handler+0x52>
					lower = middle + 1;
    19b4:	3201      	adds	r2, #1
    19b6:	b2d7      	uxtb	r7, r2
    19b8:	e7f0      	b.n	199c <EIC_OTHER_Handler+0x56>
			if (INVALID_PIN_NUMBER != pin) {
    19ba:	4643      	mov	r3, r8
    19bc:	3301      	adds	r3, #1
    19be:	d009      	beq.n	19d4 <EIC_OTHER_Handler+0x8e>
    19c0:	e001      	b.n	19c6 <EIC_OTHER_Handler+0x80>
				if (_map[middle].extint == pos) {
    19c2:	f240 081b 	movw	r8, #27
				callback(pin);
    19c6:	f240 03bc 	movw	r3, #188	; 0xbc
    19ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	4640      	mov	r0, r8
    19d2:	4798      	blx	r3
			flags &= ~(1ul << pos);
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	0032      	movs	r2, r6
    19d8:	40a2      	lsls	r2, r4
    19da:	4393      	bics	r3, r2
    19dc:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    19de:	9801      	ldr	r0, [sp, #4]
    19e0:	f242 4325 	movw	r3, #9253	; 0x2425
    19e4:	f2c0 0300 	movt	r3, #0
    19e8:	4798      	blx	r3
    19ea:	3801      	subs	r0, #1
    19ec:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    19ee:	1c63      	adds	r3, r4, #1
    19f0:	d00a      	beq.n	1a08 <EIC_OTHER_Handler+0xc2>
				if (_map[middle].extint == pos) {
    19f2:	2c05      	cmp	r4, #5
    19f4:	d005      	beq.n	1a02 <EIC_OTHER_Handler+0xbc>
    19f6:	2305      	movs	r3, #5
    19f8:	2200      	movs	r2, #0
    19fa:	2700      	movs	r7, #0
    19fc:	0031      	movs	r1, r6
    19fe:	20ff      	movs	r0, #255	; 0xff
    1a00:	e7d6      	b.n	19b0 <EIC_OTHER_Handler+0x6a>
    1a02:	f240 081b 	movw	r8, #27
    1a06:	e7de      	b.n	19c6 <EIC_OTHER_Handler+0x80>
	return ((Eic *)hw)->INTFLAG.reg;
    1a08:	f642 2300 	movw	r3, #10752	; 0x2a00
    1a0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a10:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    1a12:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    1a14:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1a16:	615a      	str	r2, [r3, #20]
	while (flags) {
    1a18:	9b01      	ldr	r3, [sp, #4]
    1a1a:	b15b      	cbz	r3, 1a34 <EIC_OTHER_Handler+0xee>
		pos = ffs(flags) - 1;
    1a1c:	9801      	ldr	r0, [sp, #4]
    1a1e:	f242 4325 	movw	r3, #9253	; 0x2425
    1a22:	f2c0 0300 	movt	r3, #0
    1a26:	4798      	blx	r3
    1a28:	3801      	subs	r0, #1
    1a2a:	b244      	sxtb	r4, r0
				if (_map[middle].extint == pos) {
    1a2c:	2601      	movs	r6, #1
		while (-1 != pos) {
    1a2e:	1c63      	adds	r3, r4, #1
    1a30:	d1df      	bne.n	19f2 <EIC_OTHER_Handler+0xac>
    1a32:	e7e9      	b.n	1a08 <EIC_OTHER_Handler+0xc2>
	_ext_irq_handler();
}
    1a34:	b002      	add	sp, #8
    1a36:	bc04      	pop	{r2}
    1a38:	4690      	mov	r8, r2
    1a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a3c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_evsys_write_NONSECUSER_reg(const void *const hw, uint8_t index, hri_evsys_nonsecuser_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->NONSECUSER[index].reg = data;
    1a3e:	f240 2300 	movw	r3, #512	; 0x200
    1a42:	f2c4 2300 	movt	r3, #16896	; 0x4200
    1a46:	2200      	movs	r2, #0
    1a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    1a4c:	505a      	str	r2, [r3, r1]
	((Evsys *)hw)->NONSECCHAN.reg = data;
    1a4e:	3908      	subs	r1, #8
    1a50:	505a      	str	r2, [r3, r1]
    1a52:	2301      	movs	r3, #1
	hri_evsys_write_NONSECCHAN_reg(EVSYS_SEC, CHANNEL_NONSECCHAN_CONF_VALUE);
#endif

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1a54:	f242 6174 	movw	r1, #9844	; 0x2674
    1a58:	f2c0 0100 	movt	r1, #0
    1a5c:	e008      	b.n	1a70 <_event_system_init+0x34>
	((Evsys *)hw)->USER[index].reg = data;
    1a5e:	f240 3020 	movw	r0, #800	; 0x320
    1a62:	f2c4 2000 	movt	r0, #16896	; 0x4200
    1a66:	1818      	adds	r0, r3, r0
    1a68:	7002      	strb	r2, [r0, #0]
    1a6a:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_USERS; i++) {
    1a6c:	2b17      	cmp	r3, #23
    1a6e:	d003      	beq.n	1a78 <_event_system_init+0x3c>
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1a70:	5c5a      	ldrb	r2, [r3, r1]
    1a72:	2a00      	cmp	r2, #0
    1a74:	d1f3      	bne.n	1a5e <_event_system_init+0x22>
    1a76:	e7f8      	b.n	1a6a <_event_system_init+0x2e>
    1a78:	3b16      	subs	r3, #22

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1a7a:	f240 2200 	movw	r2, #512	; 0x200
    1a7e:	f2c4 2200 	movt	r2, #16896	; 0x4200
    1a82:	f24c 260c 	movw	r6, #49676	; 0xc20c
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1a86:	2525      	movs	r5, #37	; 0x25
    1a88:	2400      	movs	r4, #0
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1a8a:	2024      	movs	r0, #36	; 0x24
    1a8c:	21ff      	movs	r1, #255	; 0xff
    1a8e:	e004      	b.n	1a9a <_event_system_init+0x5e>
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1a90:	6216      	str	r6, [r2, #32]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1a92:	5554      	strb	r4, [r2, r5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1a94:	5411      	strb	r1, [r2, r0]
    1a96:	3301      	adds	r3, #1
    1a98:	b2db      	uxtb	r3, r3
		}
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		if (EVENT_CHANNEL_SETTING_ENABLED & (1u << i)) {
    1a9a:	2b01      	cmp	r3, #1
    1a9c:	d0f8      	beq.n	1a90 <_event_system_init+0x54>
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1a9e:	2b07      	cmp	r3, #7
    1aa0:	d9f9      	bls.n	1a96 <_event_system_init+0x5a>
			hri_evsys_write_CHINTEN_reg(EVSYS_SEC, i, interrupt_cfg[i]);
		}
	}

	return ERR_NONE;
}
    1aa2:	2000      	movs	r0, #0
    1aa4:	bd70      	pop	{r4, r5, r6, pc}

00001aa6 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1aa6:	07c3      	lsls	r3, r0, #31
    1aa8:	d510      	bpl.n	1acc <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1aaa:	f641 4300 	movw	r3, #7168	; 0x1c00
    1aae:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ab2:	f242 1205 	movw	r2, #8453	; 0x2105
    1ab6:	f2c0 0201 	movt	r2, #1
    1aba:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1abc:	f641 4200 	movw	r2, #7168	; 0x1c00
    1ac0:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1ac4:	217d      	movs	r1, #125	; 0x7d
    1ac6:	6853      	ldr	r3, [r2, #4]
    1ac8:	4219      	tst	r1, r3
    1aca:	d1fc      	bne.n	1ac6 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1acc:	0783      	lsls	r3, r0, #30
    1ace:	d510      	bpl.n	1af2 <_gclk_init_generators_by_fref+0x4c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ad0:	f641 4300 	movw	r3, #7168	; 0x1c00
    1ad4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ad8:	f242 1203 	movw	r2, #8451	; 0x2103
    1adc:	f2c0 0201 	movt	r2, #1
    1ae0:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ae2:	f641 4200 	movw	r2, #7168	; 0x1c00
    1ae6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1aea:	217d      	movs	r1, #125	; 0x7d
    1aec:	6853      	ldr	r3, [r2, #4]
    1aee:	4219      	tst	r1, r3
    1af0:	d1fc      	bne.n	1aec <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    1af2:	4770      	bx	lr

00001af4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1af4:	f640 0300 	movw	r3, #2048	; 0x800
    1af8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1afc:	2201      	movs	r2, #1
    1afe:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1b00:	4770      	bx	lr

00001b02 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1b02:	f241 4300 	movw	r3, #5120	; 0x1400
    1b06:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b0a:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1b0c:	f641 7100 	movw	r1, #7936	; 0x1f00
    1b10:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1b12:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1b14:	2201      	movs	r2, #1
    1b16:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1b18:	4770      	bx	lr

00001b1a <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1b1a:	f241 0300 	movw	r3, #4096	; 0x1000
    1b1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b22:	2242      	movs	r2, #66	; 0x42
    1b24:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    1b26:	f241 0200 	movw	r2, #4096	; 0x1000
    1b2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1b2e:	2110      	movs	r1, #16
    1b30:	6913      	ldr	r3, [r2, #16]
    1b32:	4219      	tst	r1, r3
    1b34:	d0fc      	beq.n	1b30 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
    1b36:	f241 0300 	movw	r3, #4096	; 0x1000
    1b3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b3e:	7e1a      	ldrb	r2, [r3, #24]
    1b40:	2180      	movs	r1, #128	; 0x80
    1b42:	430a      	orrs	r2, r1
    1b44:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1b46:	4770      	bx	lr

00001b48 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1b48:	4770      	bx	lr

00001b4a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1b4a:	f240 4300 	movw	r3, #1024	; 0x400
    1b4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b52:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1b54:	2203      	movs	r2, #3
    1b56:	4013      	ands	r3, r2
    1b58:	4298      	cmp	r0, r3
    1b5a:	d012      	beq.n	1b82 <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
    1b5c:	f240 4200 	movw	r2, #1024	; 0x400
    1b60:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b64:	23ff      	movs	r3, #255	; 0xff
    1b66:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1b68:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1b6a:	2103      	movs	r1, #3
    1b6c:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    1b6e:	4008      	ands	r0, r1
    1b70:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    1b72:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1b74:	f240 4200 	movw	r2, #1024	; 0x400
    1b78:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b7c:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d0fc      	beq.n	1b7c <_set_performance_level+0x32>
			;
	}
}
    1b82:	4770      	bx	lr

00001b84 <RTC_init>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1b84:	f242 4200 	movw	r2, #9216	; 0x2400
    1b88:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b8c:	2101      	movs	r1, #1
    1b8e:	6913      	ldr	r3, [r2, #16]
    1b90:	4219      	tst	r1, r3
    1b92:	d1fc      	bne.n	1b8e <RTC_init+0xa>
    1b94:	f242 4200 	movw	r2, #9216	; 0x2400
    1b98:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b9c:	f248 0103 	movw	r1, #32771	; 0x8003
    1ba0:	6913      	ldr	r3, [r2, #16]
    1ba2:	4219      	tst	r1, r3
    1ba4:	d1fc      	bne.n	1ba0 <RTC_init+0x1c>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1ba6:	f242 4300 	movw	r3, #9216	; 0x2400
    1baa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bae:	881b      	ldrh	r3, [r3, #0]
 */
int8_t RTC_init()
{

	hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_SWRST);
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(RTC)) {
    1bb0:	079b      	lsls	r3, r3, #30
    1bb2:	d518      	bpl.n	1be6 <RTC_init+0x62>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1bb4:	f242 4300 	movw	r3, #9216	; 0x2400
    1bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bbc:	881a      	ldrh	r2, [r3, #0]
    1bbe:	2102      	movs	r1, #2
    1bc0:	438a      	bics	r2, r1
    1bc2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1bc4:	f242 4200 	movw	r2, #9216	; 0x2400
    1bc8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1bcc:	f248 0103 	movw	r1, #32771	; 0x8003
    1bd0:	6913      	ldr	r3, [r2, #16]
    1bd2:	4219      	tst	r1, r3
    1bd4:	d1fc      	bne.n	1bd0 <RTC_init+0x4c>
    1bd6:	f242 4200 	movw	r2, #9216	; 0x2400
    1bda:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1bde:	2102      	movs	r1, #2
    1be0:	6913      	ldr	r3, [r2, #16]
    1be2:	4219      	tst	r1, r3
    1be4:	d1fc      	bne.n	1be0 <RTC_init+0x5c>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    1be6:	f242 4300 	movw	r3, #9216	; 0x2400
    1bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bee:	881a      	ldrh	r2, [r3, #0]
    1bf0:	2101      	movs	r1, #1
    1bf2:	430a      	orrs	r2, r1
    1bf4:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1bf6:	f242 4200 	movw	r2, #9216	; 0x2400
    1bfa:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1bfe:	6913      	ldr	r3, [r2, #16]
    1c00:	4219      	tst	r1, r3
    1c02:	d1fc      	bne.n	1bfe <RTC_init+0x7a>
    1c04:	f242 4200 	movw	r2, #9216	; 0x2400
    1c08:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c0c:	2101      	movs	r1, #1
    1c0e:	6913      	ldr	r3, [r2, #16]
    1c10:	4219      	tst	r1, r3
    1c12:	d1fc      	bne.n	1c0e <RTC_init+0x8a>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1c14:	f242 4300 	movw	r3, #9216	; 0x2400
    1c18:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c1c:	2280      	movs	r2, #128	; 0x80
    1c1e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c20:	f242 4200 	movw	r2, #9216	; 0x2400
    1c24:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c28:	f248 0103 	movw	r1, #32771	; 0x8003
    1c2c:	6913      	ldr	r3, [r2, #16]
    1c2e:	4219      	tst	r1, r3
    1c30:	d1fc      	bne.n	1c2c <RTC_init+0xa8>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1c32:	f242 4300 	movw	r3, #9216	; 0x2400
    1c36:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c3a:	f240 1200 	movw	r2, #256	; 0x100
    1c3e:	605a      	str	r2, [r3, #4]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1c40:	f640 42cc 	movw	r2, #3276	; 0xccc
    1c44:	621a      	str	r2, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c46:	f242 4200 	movw	r2, #9216	; 0x2400
    1c4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c4e:	2120      	movs	r1, #32
    1c50:	6913      	ldr	r3, [r2, #16]
    1c52:	4219      	tst	r1, r3
    1c54:	d1fc      	bne.n	1c50 <RTC_init+0xcc>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1c56:	f242 4200 	movw	r2, #9216	; 0x2400
    1c5a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c5e:	8813      	ldrh	r3, [r2, #0]
	tmp &= ~RTC_MODE0_CTRLA_ENABLE;
    1c60:	2102      	movs	r1, #2
    1c62:	438b      	bics	r3, r1
	tmp |= value << RTC_MODE0_CTRLA_ENABLE_Pos;
    1c64:	430b      	orrs	r3, r1
	((Rtc *)hw)->MODE0.CTRLA.reg = tmp;
    1c66:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c68:	f242 4200 	movw	r2, #9216	; 0x2400
    1c6c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c70:	f248 0103 	movw	r1, #32771	; 0x8003
    1c74:	6913      	ldr	r3, [r2, #16]
    1c76:	4219      	tst	r1, r3
    1c78:	d1fc      	bne.n	1c74 <RTC_init+0xf0>
	//		 | 0 << RTC_TAMPID_TAMPID3_Pos); /* Active Layer Internal Select n: disabled */

	hri_rtcmode0_write_CTRLA_ENABLE_bit(RTC, 1 << RTC_MODE0_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1c7a:	2000      	movs	r0, #0
    1c7c:	4770      	bx	lr

00001c7e <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c7e:	b530      	push	{r4, r5, lr}
    1c80:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c82:	aa01      	add	r2, sp, #4
    1c84:	f242 638c 	movw	r3, #9868	; 0x268c
    1c88:	f2c0 0300 	movt	r3, #0
    1c8c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c8e:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c90:	0003      	movs	r3, r0
    1c92:	9a01      	ldr	r2, [sp, #4]
    1c94:	4282      	cmp	r2, r0
    1c96:	d00c      	beq.n	1cb2 <_sercom_get_hardware_index+0x34>
    1c98:	9a02      	ldr	r2, [sp, #8]
    1c9a:	4282      	cmp	r2, r0
    1c9c:	d007      	beq.n	1cae <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
    1c9e:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1ca0:	9a03      	ldr	r2, [sp, #12]
    1ca2:	429a      	cmp	r2, r3
    1ca4:	d001      	beq.n	1caa <_sercom_get_hardware_index+0x2c>
}
    1ca6:	b005      	add	sp, #20
    1ca8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1caa:	3002      	adds	r0, #2
    1cac:	e002      	b.n	1cb4 <_sercom_get_hardware_index+0x36>
    1cae:	2001      	movs	r0, #1
    1cb0:	e000      	b.n	1cb4 <_sercom_get_hardware_index+0x36>
    1cb2:	2000      	movs	r0, #0
			return i;
    1cb4:	b2c0      	uxtb	r0, r0
    1cb6:	e7f6      	b.n	1ca6 <_sercom_get_hardware_index+0x28>

00001cb8 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1cb8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1cba:	07db      	lsls	r3, r3, #31
    1cbc:	d409      	bmi.n	1cd2 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1cbe:	6803      	ldr	r3, [r0, #0]
    1cc0:	2202      	movs	r2, #2
    1cc2:	4313      	orrs	r3, r2
    1cc4:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1cc6:	3201      	adds	r2, #1
    1cc8:	69c3      	ldr	r3, [r0, #28]
    1cca:	421a      	tst	r2, r3
    1ccc:	d1fc      	bne.n	1cc8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1cce:	2000      	movs	r0, #0
}
    1cd0:	4770      	bx	lr
		return ERR_BUSY;
    1cd2:	2004      	movs	r0, #4
    1cd4:	4240      	negs	r0, r0
    1cd6:	e7fb      	b.n	1cd0 <_spi_sync_enable+0x18>

00001cd8 <_usart_init>:
{
    1cd8:	b510      	push	{r4, lr}
    1cda:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1cdc:	f641 437f 	movw	r3, #7295	; 0x1c7f
    1ce0:	f2c0 0300 	movt	r3, #0
    1ce4:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1ce6:	2801      	cmp	r0, #1
    1ce8:	d00b      	beq.n	1d02 <_usart_init+0x2a>
	ASSERT(false);
    1cea:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1cee:	f2c0 0100 	movt	r1, #0
    1cf2:	f240 2247 	movw	r2, #583	; 0x247
    1cf6:	2000      	movs	r0, #0
    1cf8:	f241 036b 	movw	r3, #4203	; 0x106b
    1cfc:	f2c0 0300 	movt	r3, #0
    1d00:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1d02:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1d04:	07db      	lsls	r3, r3, #31
    1d06:	d418      	bmi.n	1d3a <_usart_init+0x62>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d08:	2203      	movs	r2, #3
    1d0a:	69e3      	ldr	r3, [r4, #28]
    1d0c:	421a      	tst	r2, r3
    1d0e:	d1fc      	bne.n	1d0a <_usart_init+0x32>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1d10:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1d12:	079b      	lsls	r3, r3, #30
    1d14:	d50b      	bpl.n	1d2e <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1d16:	6823      	ldr	r3, [r4, #0]
    1d18:	2202      	movs	r2, #2
    1d1a:	4393      	bics	r3, r2
    1d1c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d1e:	3201      	adds	r2, #1
    1d20:	69e3      	ldr	r3, [r4, #28]
    1d22:	421a      	tst	r2, r3
    1d24:	d1fc      	bne.n	1d20 <_usart_init+0x48>
    1d26:	2202      	movs	r2, #2
    1d28:	69e3      	ldr	r3, [r4, #28]
    1d2a:	421a      	tst	r2, r3
    1d2c:	d1fc      	bne.n	1d28 <_usart_init+0x50>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d2e:	2305      	movs	r3, #5
    1d30:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d32:	2203      	movs	r2, #3
    1d34:	69e3      	ldr	r3, [r4, #28]
    1d36:	421a      	tst	r2, r3
    1d38:	d1fc      	bne.n	1d34 <_usart_init+0x5c>
    1d3a:	2201      	movs	r2, #1
    1d3c:	69e3      	ldr	r3, [r4, #28]
    1d3e:	421a      	tst	r2, r3
    1d40:	d1fc      	bne.n	1d3c <_usart_init+0x64>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d42:	2304      	movs	r3, #4
    1d44:	f2c4 0310 	movt	r3, #16400	; 0x4010
    1d48:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d4a:	2203      	movs	r2, #3
    1d4c:	69e3      	ldr	r3, [r4, #28]
    1d4e:	421a      	tst	r2, r3
    1d50:	d1fc      	bne.n	1d4c <_usart_init+0x74>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d52:	23c0      	movs	r3, #192	; 0xc0
    1d54:	029b      	lsls	r3, r3, #10
    1d56:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d58:	220f      	movs	r2, #15
    1d5a:	69e3      	ldr	r3, [r4, #28]
    1d5c:	421a      	tst	r2, r3
    1d5e:	d1fc      	bne.n	1d5a <_usart_init+0x82>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1d60:	2302      	movs	r3, #2
    1d62:	f2c0 0370 	movt	r3, #112	; 0x70
    1d66:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1d68:	4b03      	ldr	r3, [pc, #12]	; (1d78 <_usart_init+0xa0>)
    1d6a:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1d6c:	2300      	movs	r3, #0
    1d6e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1d70:	2230      	movs	r2, #48	; 0x30
    1d72:	54a3      	strb	r3, [r4, r2]
}
    1d74:	2000      	movs	r0, #0
    1d76:	bd10      	pop	{r4, pc}
    1d78:	fffff62b 	.word	0xfffff62b

00001d7c <_usart_sync_init>:
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	0005      	movs	r5, r0
    1d80:	000c      	movs	r4, r1
	ASSERT(device);
    1d82:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1d86:	f2c0 0100 	movt	r1, #0
    1d8a:	1e43      	subs	r3, r0, #1
    1d8c:	4198      	sbcs	r0, r3
    1d8e:	b2c0      	uxtb	r0, r0
    1d90:	22bb      	movs	r2, #187	; 0xbb
    1d92:	f241 036b 	movw	r3, #4203	; 0x106b
    1d96:	f2c0 0300 	movt	r3, #0
    1d9a:	4798      	blx	r3
	device->hw = hw;
    1d9c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1d9e:	0020      	movs	r0, r4
    1da0:	f641 43d9 	movw	r3, #7385	; 0x1cd9
    1da4:	f2c0 0300 	movt	r3, #0
    1da8:	4798      	blx	r3
}
    1daa:	bd70      	pop	{r4, r5, r6, pc}

00001dac <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1dac:	6803      	ldr	r3, [r0, #0]
    1dae:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1db0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1db2:	4770      	bx	lr

00001db4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1db4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1db6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1db8:	b2c0      	uxtb	r0, r0
}
    1dba:	4770      	bx	lr

00001dbc <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1dbc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1dbe:	7e18      	ldrb	r0, [r3, #24]
    1dc0:	2301      	movs	r3, #1
    1dc2:	4018      	ands	r0, r3
}
    1dc4:	4770      	bx	lr

00001dc6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1dc6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1dc8:	7e18      	ldrb	r0, [r3, #24]
    1dca:	0780      	lsls	r0, r0, #30
    1dcc:	0fc0      	lsrs	r0, r0, #31
}
    1dce:	4770      	bx	lr

00001dd0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1dd0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1dd2:	7e18      	ldrb	r0, [r3, #24]
    1dd4:	0740      	lsls	r0, r0, #29
    1dd6:	0fc0      	lsrs	r0, r0, #31
}
    1dd8:	4770      	bx	lr

00001dda <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1dda:	b570      	push	{r4, r5, r6, lr}
    1ddc:	0005      	movs	r5, r0
    1dde:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1de0:	0008      	movs	r0, r1
    1de2:	f641 437f 	movw	r3, #7295	; 0x1c7f
    1de6:	f2c0 0300 	movt	r3, #0
    1dea:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1dec:	b190      	cbz	r0, 1e14 <_spi_m_sync_init+0x3a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1dee:	2d00      	cmp	r5, #0
    1df0:	d068      	beq.n	1ec4 <_spi_m_sync_init+0xea>
    1df2:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1df6:	f2c0 0100 	movt	r1, #0
    1dfa:	1e60      	subs	r0, r4, #1
    1dfc:	4184      	sbcs	r4, r0
    1dfe:	b2e0      	uxtb	r0, r4
    1e00:	f640 1236 	movw	r2, #2358	; 0x936
    1e04:	f241 036b 	movw	r3, #4203	; 0x106b
    1e08:	f2c0 0300 	movt	r3, #0
    1e0c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1e0e:	200d      	movs	r0, #13
    1e10:	4240      	negs	r0, r0
    1e12:	e056      	b.n	1ec2 <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    1e14:	2d00      	cmp	r5, #0
    1e16:	d164      	bne.n	1ee2 <_spi_m_sync_init+0x108>
    1e18:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1e1c:	f2c0 0100 	movt	r1, #0
    1e20:	f640 1236 	movw	r2, #2358	; 0x936
    1e24:	2000      	movs	r0, #0
    1e26:	f241 036b 	movw	r3, #4203	; 0x106b
    1e2a:	f2c0 0300 	movt	r3, #0
    1e2e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e30:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e32:	07db      	lsls	r3, r3, #31
    1e34:	d418      	bmi.n	1e68 <_spi_m_sync_init+0x8e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e36:	2203      	movs	r2, #3
    1e38:	69e3      	ldr	r3, [r4, #28]
    1e3a:	421a      	tst	r2, r3
    1e3c:	d1fc      	bne.n	1e38 <_spi_m_sync_init+0x5e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1e3e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1e40:	079b      	lsls	r3, r3, #30
    1e42:	d50b      	bpl.n	1e5c <_spi_m_sync_init+0x82>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1e44:	6823      	ldr	r3, [r4, #0]
    1e46:	2202      	movs	r2, #2
    1e48:	4393      	bics	r3, r2
    1e4a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e4c:	3201      	adds	r2, #1
    1e4e:	69e3      	ldr	r3, [r4, #28]
    1e50:	421a      	tst	r2, r3
    1e52:	d1fc      	bne.n	1e4e <_spi_m_sync_init+0x74>
    1e54:	2202      	movs	r2, #2
    1e56:	69e3      	ldr	r3, [r4, #28]
    1e58:	421a      	tst	r2, r3
    1e5a:	d1fc      	bne.n	1e56 <_spi_m_sync_init+0x7c>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e5c:	230d      	movs	r3, #13
    1e5e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e60:	2203      	movs	r2, #3
    1e62:	69e3      	ldr	r3, [r4, #28]
    1e64:	421a      	tst	r2, r3
    1e66:	d1fc      	bne.n	1e62 <_spi_m_sync_init+0x88>
    1e68:	2201      	movs	r2, #1
    1e6a:	69e3      	ldr	r3, [r4, #28]
    1e6c:	421a      	tst	r2, r3
    1e6e:	d1fc      	bne.n	1e6a <_spi_m_sync_init+0x90>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1e70:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1e72:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1e76:	f2c0 0100 	movt	r1, #0
    1e7a:	0020      	movs	r0, r4
    1e7c:	1e43      	subs	r3, r0, #1
    1e7e:	4198      	sbcs	r0, r3
    1e80:	b2c0      	uxtb	r0, r0
    1e82:	f640 1200 	movw	r2, #2304	; 0x900
    1e86:	f241 036b 	movw	r3, #4203	; 0x106b
    1e8a:	f2c0 0300 	movt	r3, #0
    1e8e:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e90:	230c      	movs	r3, #12
    1e92:	f2c0 0301 	movt	r3, #1
    1e96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e98:	2203      	movs	r2, #3
    1e9a:	69e3      	ldr	r3, [r4, #28]
    1e9c:	421a      	tst	r2, r3
    1e9e:	d1fc      	bne.n	1e9a <_spi_m_sync_init+0xc0>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1ea0:	2380      	movs	r3, #128	; 0x80
    1ea2:	029b      	lsls	r3, r3, #10
    1ea4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ea6:	2207      	movs	r2, #7
    1ea8:	69e3      	ldr	r3, [r4, #28]
    1eaa:	421a      	tst	r2, r3
    1eac:	d1fc      	bne.n	1ea8 <_spi_m_sync_init+0xce>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1eae:	2301      	movs	r3, #1
    1eb0:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1eb2:	2100      	movs	r1, #0
    1eb4:	2230      	movs	r2, #48	; 0x30
    1eb6:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1eb8:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1eba:	33ff      	adds	r3, #255	; 0xff
    1ebc:	33ff      	adds	r3, #255	; 0xff
    1ebe:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1ec0:	2000      	movs	r0, #0
}
    1ec2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1ec4:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1ec8:	f2c0 0100 	movt	r1, #0
    1ecc:	f640 1236 	movw	r2, #2358	; 0x936
    1ed0:	2000      	movs	r0, #0
    1ed2:	f241 036b 	movw	r3, #4203	; 0x106b
    1ed6:	f2c0 0300 	movt	r3, #0
    1eda:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1edc:	200d      	movs	r0, #13
    1ede:	4240      	negs	r0, r0
    1ee0:	e7ef      	b.n	1ec2 <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    1ee2:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1ee6:	f2c0 0100 	movt	r1, #0
    1eea:	0020      	movs	r0, r4
    1eec:	1e43      	subs	r3, r0, #1
    1eee:	4198      	sbcs	r0, r3
    1ef0:	b2c0      	uxtb	r0, r0
    1ef2:	f640 1236 	movw	r2, #2358	; 0x936
    1ef6:	f241 036b 	movw	r3, #4203	; 0x106b
    1efa:	f2c0 0300 	movt	r3, #0
    1efe:	4798      	blx	r3
    1f00:	e796      	b.n	1e30 <_spi_m_sync_init+0x56>

00001f02 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1f02:	b510      	push	{r4, lr}
    1f04:	0004      	movs	r4, r0
	ASSERT(dev && dev->prvt);
    1f06:	b1a8      	cbz	r0, 1f34 <_spi_m_sync_enable+0x32>
    1f08:	6800      	ldr	r0, [r0, #0]
    1f0a:	1e43      	subs	r3, r0, #1
    1f0c:	4198      	sbcs	r0, r3
    1f0e:	b2c0      	uxtb	r0, r0
    1f10:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1f14:	f2c0 0100 	movt	r1, #0
    1f18:	f640 1295 	movw	r2, #2453	; 0x995
    1f1c:	f241 036b 	movw	r3, #4203	; 0x106b
    1f20:	f2c0 0300 	movt	r3, #0
    1f24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1f26:	6820      	ldr	r0, [r4, #0]
    1f28:	f641 43b9 	movw	r3, #7353	; 0x1cb9
    1f2c:	f2c0 0300 	movt	r3, #0
    1f30:	4798      	blx	r3
}
    1f32:	bd10      	pop	{r4, pc}
    1f34:	2000      	movs	r0, #0
    1f36:	e7eb      	b.n	1f10 <_spi_m_sync_enable+0xe>

00001f38 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	46de      	mov	lr, fp
    1f3c:	4657      	mov	r7, sl
    1f3e:	464e      	mov	r6, r9
    1f40:	4645      	mov	r5, r8
    1f42:	b5e0      	push	{r5, r6, r7, lr}
    1f44:	b083      	sub	sp, #12
    1f46:	4681      	mov	r9, r0
    1f48:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1f4a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1f4c:	680b      	ldr	r3, [r1, #0]
    1f4e:	4698      	mov	r8, r3
    1f50:	684d      	ldr	r5, [r1, #4]
    1f52:	7903      	ldrb	r3, [r0, #4]
    1f54:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1f56:	b1e8      	cbz	r0, 1f94 <_spi_m_sync_trans+0x5c>
    1f58:	0020      	movs	r0, r4
    1f5a:	1e43      	subs	r3, r0, #1
    1f5c:	4198      	sbcs	r0, r3
    1f5e:	b2c0      	uxtb	r0, r0
    1f60:	f242 61b0 	movw	r1, #9904	; 0x26b0
    1f64:	f2c0 0100 	movt	r1, #0
    1f68:	f640 229a 	movw	r2, #2714	; 0xa9a
    1f6c:	f241 036b 	movw	r3, #4203	; 0x106b
    1f70:	f2c0 0300 	movt	r3, #0
    1f74:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1f76:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1f78:	075b      	lsls	r3, r3, #29
    1f7a:	d140      	bne.n	1ffe <_spi_m_sync_trans+0xc6>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f7c:	2303      	movs	r3, #3
    1f7e:	69e0      	ldr	r0, [r4, #28]
    1f80:	4018      	ands	r0, r3
    1f82:	2800      	cmp	r0, #0
    1f84:	d1fb      	bne.n	1f7e <_spi_m_sync_trans+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1f86:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1f88:	079b      	lsls	r3, r3, #30
    1f8a:	d53b      	bpl.n	2004 <_spi_m_sync_trans+0xcc>
    1f8c:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1f8e:	f240 0c01 	movw	ip, #1
    1f92:	e009      	b.n	1fa8 <_spi_m_sync_trans+0x70>
    1f94:	2000      	movs	r0, #0
    1f96:	e7e3      	b.n	1f60 <_spi_m_sync_trans+0x28>
		*ctrl->rxbuf++ = (uint8_t)data;
    1f98:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1f9a:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1f9c:	b25b      	sxtb	r3, r3
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	db16      	blt.n	1fd0 <_spi_m_sync_trans+0x98>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1fa2:	68b3      	ldr	r3, [r6, #8]
    1fa4:	4283      	cmp	r3, r0
    1fa6:	d927      	bls.n	1ff8 <_spi_m_sync_trans+0xc0>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1fa8:	7e23      	ldrb	r3, [r4, #24]
    1faa:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1fac:	2104      	movs	r1, #4
    1fae:	4219      	tst	r1, r3
    1fb0:	d02b      	beq.n	200a <_spi_m_sync_trans+0xd2>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1fb2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1fb4:	2d00      	cmp	r5, #0
    1fb6:	d0f0      	beq.n	1f9a <_spi_m_sync_trans+0x62>
		*ctrl->rxbuf++ = (uint8_t)data;
    1fb8:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1fba:	9901      	ldr	r1, [sp, #4]
    1fbc:	2901      	cmp	r1, #1
    1fbe:	d9eb      	bls.n	1f98 <_spi_m_sync_trans+0x60>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1fc0:	0a3f      	lsrs	r7, r7, #8
    1fc2:	706f      	strb	r7, [r5, #1]
    1fc4:	3502      	adds	r5, #2
    1fc6:	e7e8      	b.n	1f9a <_spi_m_sync_trans+0x62>
		data = *ctrl->txbuf++;
    1fc8:	f240 0b01 	movw	fp, #1
    1fcc:	44d8      	add	r8, fp
    1fce:	e036      	b.n	203e <_spi_m_sync_trans+0x106>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1fd0:	2301      	movs	r3, #1
    1fd2:	425b      	negs	r3, r3
    1fd4:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1fd6:	3381      	adds	r3, #129	; 0x81
    1fd8:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1fda:	2013      	movs	r0, #19
    1fdc:	4240      	negs	r0, r0
	tmp &= mask;
    1fde:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1fe0:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1fe2:	4213      	tst	r3, r2
    1fe4:	d0fc      	beq.n	1fe0 <_spi_m_sync_trans+0xa8>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1fe6:	2303      	movs	r3, #3
    1fe8:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1fea:	b003      	add	sp, #12
    1fec:	bc3c      	pop	{r2, r3, r4, r5}
    1fee:	4690      	mov	r8, r2
    1ff0:	4699      	mov	r9, r3
    1ff2:	46a2      	mov	sl, r4
    1ff4:	46ab      	mov	fp, r5
    1ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1ff8:	4293      	cmp	r3, r2
    1ffa:	d8d5      	bhi.n	1fa8 <_spi_m_sync_trans+0x70>
    1ffc:	e7ef      	b.n	1fde <_spi_m_sync_trans+0xa6>
		return ERR_BUSY;
    1ffe:	2004      	movs	r0, #4
    2000:	4240      	negs	r0, r0
    2002:	e7f2      	b.n	1fea <_spi_m_sync_trans+0xb2>
		return ERR_NOT_INITIALIZED;
    2004:	2014      	movs	r0, #20
    2006:	4240      	negs	r0, r0
    2008:	e7ef      	b.n	1fea <_spi_m_sync_trans+0xb2>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    200a:	4290      	cmp	r0, r2
    200c:	d8c6      	bhi.n	1f9c <_spi_m_sync_trans+0x64>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    200e:	4667      	mov	r7, ip
    2010:	421f      	tst	r7, r3
    2012:	d0c3      	beq.n	1f9c <_spi_m_sync_trans+0x64>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2014:	464f      	mov	r7, r9
    2016:	88ff      	ldrh	r7, [r7, #6]
    2018:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    201a:	4647      	mov	r7, r8
    201c:	b17f      	cbz	r7, 203e <_spi_m_sync_trans+0x106>
		data = *ctrl->txbuf++;
    201e:	783f      	ldrb	r7, [r7, #0]
    2020:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    2022:	9901      	ldr	r1, [sp, #4]
    2024:	2901      	cmp	r1, #1
    2026:	d9cf      	bls.n	1fc8 <_spi_m_sync_trans+0x90>
			data |= (*ctrl->txbuf) << 8;
    2028:	4647      	mov	r7, r8
    202a:	787f      	ldrb	r7, [r7, #1]
    202c:	023f      	lsls	r7, r7, #8
    202e:	46bb      	mov	fp, r7
    2030:	4657      	mov	r7, sl
    2032:	4659      	mov	r1, fp
    2034:	430f      	orrs	r7, r1
    2036:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    2038:	f240 0b02 	movw	fp, #2
    203c:	44d8      	add	r8, fp
	ctrl->txcnt++;
    203e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2040:	4657      	mov	r7, sl
    2042:	62a7      	str	r7, [r4, #40]	; 0x28
    2044:	e7aa      	b.n	1f9c <_spi_m_sync_trans+0x64>

00002046 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2046:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    2048:	f24f 0c00 	movw	ip, #61440	; 0xf000
    204c:	f6cb 5cff 	movt	ip, #48639	; 0xbdff
    2050:	4460      	add	r0, ip
    2052:	0a80      	lsrs	r0, r0, #10
		if (_tcs[i].number == index) {
    2054:	b2c0      	uxtb	r0, r0
    2056:	b168      	cbz	r0, 2074 <get_tc_index+0x2e>
	ASSERT(false);
    2058:	f242 61e4 	movw	r1, #9956	; 0x26e4
    205c:	f2c0 0100 	movt	r1, #0
    2060:	f240 123c 	movw	r2, #316	; 0x13c
    2064:	2000      	movs	r0, #0
    2066:	f241 036b 	movw	r3, #4203	; 0x106b
    206a:	f2c0 0300 	movt	r3, #0
    206e:	4798      	blx	r3
	return -1;
    2070:	2001      	movs	r0, #1
    2072:	4240      	negs	r0, r0
}
    2074:	bd10      	pop	{r4, pc}

00002076 <_timer_init>:
{
    2076:	b570      	push	{r4, r5, r6, lr}
    2078:	0006      	movs	r6, r0
    207a:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    207c:	0008      	movs	r0, r1
    207e:	f242 0347 	movw	r3, #8263	; 0x2047
    2082:	f2c0 0300 	movt	r3, #0
    2086:	4798      	blx	r3
    2088:	0005      	movs	r5, r0
	device->hw = hw;
    208a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    208c:	f242 61e4 	movw	r1, #9956	; 0x26e4
    2090:	f2c0 0100 	movt	r1, #0
    2094:	228d      	movs	r2, #141	; 0x8d
    2096:	2001      	movs	r0, #1
    2098:	f241 036b 	movw	r3, #4203	; 0x106b
    209c:	f2c0 0300 	movt	r3, #0
    20a0:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    20a2:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    20a4:	07db      	lsls	r3, r3, #31
    20a6:	d418      	bmi.n	20da <_timer_init+0x64>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20a8:	2203      	movs	r2, #3
    20aa:	6923      	ldr	r3, [r4, #16]
    20ac:	421a      	tst	r2, r3
    20ae:	d1fc      	bne.n	20aa <_timer_init+0x34>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20b0:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    20b2:	079b      	lsls	r3, r3, #30
    20b4:	d50b      	bpl.n	20ce <_timer_init+0x58>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE_Msk;
    20b6:	6823      	ldr	r3, [r4, #0]
    20b8:	2202      	movs	r2, #2
    20ba:	4393      	bics	r3, r2
    20bc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20be:	3201      	adds	r2, #1
    20c0:	6923      	ldr	r3, [r4, #16]
    20c2:	421a      	tst	r2, r3
    20c4:	d1fc      	bne.n	20c0 <_timer_init+0x4a>
    20c6:	2202      	movs	r2, #2
    20c8:	6923      	ldr	r3, [r4, #16]
    20ca:	421a      	tst	r2, r3
    20cc:	d1fc      	bne.n	20c8 <_timer_init+0x52>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20ce:	2301      	movs	r3, #1
    20d0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20d2:	2203      	movs	r2, #3
    20d4:	6923      	ldr	r3, [r4, #16]
    20d6:	421a      	tst	r2, r3
    20d8:	d1fc      	bne.n	20d4 <_timer_init+0x5e>
    20da:	2201      	movs	r2, #1
    20dc:	6923      	ldr	r3, [r4, #16]
    20de:	421a      	tst	r2, r3
    20e0:	d1fc      	bne.n	20dc <_timer_init+0x66>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    20e2:	006b      	lsls	r3, r5, #1
    20e4:	195b      	adds	r3, r3, r5
    20e6:	00db      	lsls	r3, r3, #3
    20e8:	f242 62cc 	movw	r2, #9932	; 0x26cc
    20ec:	f2c0 0200 	movt	r2, #0
    20f0:	4694      	mov	ip, r2
    20f2:	4463      	add	r3, ip
    20f4:	6859      	ldr	r1, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20f6:	6021      	str	r1, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20f8:	2203      	movs	r2, #3
    20fa:	6923      	ldr	r3, [r4, #16]
    20fc:	421a      	tst	r2, r3
    20fe:	d1fc      	bne.n	20fa <_timer_init+0x84>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2100:	006b      	lsls	r3, r5, #1
    2102:	195b      	adds	r3, r3, r5
    2104:	00db      	lsls	r3, r3, #3
    2106:	f242 62cc 	movw	r2, #9932	; 0x26cc
    210a:	f2c0 0200 	movt	r2, #0
    210e:	4694      	mov	ip, r2
    2110:	4463      	add	r3, ip
    2112:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2114:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2116:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2118:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    211a:	2301      	movs	r3, #1
    211c:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    211e:	330b      	adds	r3, #11
    2120:	400b      	ands	r3, r1
    2122:	2b08      	cmp	r3, #8
    2124:	d065      	beq.n	21f2 <_timer_init+0x17c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2126:	2b00      	cmp	r3, #0
    2128:	d000      	beq.n	212c <_timer_init+0xb6>
    212a:	e082      	b.n	2232 <_timer_init+0x1bc>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    212c:	006b      	lsls	r3, r5, #1
    212e:	195b      	adds	r3, r3, r5
    2130:	00db      	lsls	r3, r3, #3
    2132:	f242 62cc 	movw	r2, #9932	; 0x26cc
    2136:	f2c0 0200 	movt	r2, #0
    213a:	4694      	mov	ip, r2
    213c:	4463      	add	r3, ip
    213e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2140:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2142:	22c0      	movs	r2, #192	; 0xc0
    2144:	6923      	ldr	r3, [r4, #16]
    2146:	421a      	tst	r2, r3
    2148:	d1fc      	bne.n	2144 <_timer_init+0xce>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    214a:	2300      	movs	r3, #0
    214c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    214e:	22c0      	movs	r2, #192	; 0xc0
    2150:	6923      	ldr	r3, [r4, #16]
    2152:	421a      	tst	r2, r3
    2154:	d1fc      	bne.n	2150 <_timer_init+0xda>
		hri_tccount16_write_PER_reg(hw, _tcs[i].per);
    2156:	006b      	lsls	r3, r5, #1
    2158:	195b      	adds	r3, r3, r5
    215a:	00db      	lsls	r3, r3, #3
    215c:	f242 62cc 	movw	r2, #9932	; 0x26cc
    2160:	f2c0 0200 	movt	r2, #0
    2164:	4694      	mov	ip, r2
    2166:	4463      	add	r3, ip
    2168:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.PER.reg = data;
    216a:	8363      	strh	r3, [r4, #26]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    216c:	2220      	movs	r2, #32
    216e:	6923      	ldr	r3, [r4, #16]
    2170:	421a      	tst	r2, r3
    2172:	d1fc      	bne.n	216e <_timer_init+0xf8>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF_Msk;
    2174:	2301      	movs	r3, #1
    2176:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    2178:	f241 0300 	movw	r3, #4096	; 0x1000
    217c:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2180:	429c      	cmp	r4, r3
    2182:	d100      	bne.n	2186 <_timer_init+0x110>
    2184:	e07c      	b.n	2280 <_timer_init+0x20a>
	NVIC_DisableIRQ(_tcs[i].irq);
    2186:	006b      	lsls	r3, r5, #1
    2188:	195b      	adds	r3, r3, r5
    218a:	00db      	lsls	r3, r3, #3
    218c:	f242 62cc 	movw	r2, #9932	; 0x26cc
    2190:	f2c0 0200 	movt	r2, #0
    2194:	4694      	mov	ip, r2
    2196:	4463      	add	r3, ip
    2198:	2201      	movs	r2, #1
    219a:	569a      	ldrsb	r2, [r3, r2]
  if ((int32_t)(IRQn) >= 0)
    219c:	2a00      	cmp	r2, #0
    219e:	db26      	blt.n	21ee <_timer_init+0x178>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21a0:	0953      	lsrs	r3, r2, #5
    21a2:	211f      	movs	r1, #31
    21a4:	4011      	ands	r1, r2
    21a6:	2201      	movs	r2, #1
    21a8:	408a      	lsls	r2, r1
    21aa:	f24e 1100 	movw	r1, #57600	; 0xe100
    21ae:	f2ce 0100 	movt	r1, #57344	; 0xe000
    21b2:	3320      	adds	r3, #32
    21b4:	009b      	lsls	r3, r3, #2
    21b6:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    21b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21bc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    21c0:	006b      	lsls	r3, r5, #1
    21c2:	195d      	adds	r5, r3, r5
    21c4:	00ed      	lsls	r5, r5, #3
    21c6:	4465      	add	r5, ip
    21c8:	2201      	movs	r2, #1
    21ca:	56aa      	ldrsb	r2, [r5, r2]
  if ((int32_t)(IRQn) >= 0)
    21cc:	2a00      	cmp	r2, #0
    21ce:	db0e      	blt.n	21ee <_timer_init+0x178>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21d0:	0953      	lsrs	r3, r2, #5
    21d2:	211f      	movs	r1, #31
    21d4:	4011      	ands	r1, r2
    21d6:	2201      	movs	r2, #1
    21d8:	408a      	lsls	r2, r1
    21da:	f24e 1100 	movw	r1, #57600	; 0xe100
    21de:	f2ce 0100 	movt	r1, #57344	; 0xe000
    21e2:	0018      	movs	r0, r3
    21e4:	3060      	adds	r0, #96	; 0x60
    21e6:	0080      	lsls	r0, r0, #2
    21e8:	5042      	str	r2, [r0, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ea:	009b      	lsls	r3, r3, #2
    21ec:	505a      	str	r2, [r3, r1]
}
    21ee:	2000      	movs	r0, #0
    21f0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    21f2:	006b      	lsls	r3, r5, #1
    21f4:	195b      	adds	r3, r3, r5
    21f6:	00db      	lsls	r3, r3, #3
    21f8:	4463      	add	r3, ip
    21fa:	691b      	ldr	r3, [r3, #16]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21fc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21fe:	22c0      	movs	r2, #192	; 0xc0
    2200:	6923      	ldr	r3, [r4, #16]
    2202:	421a      	tst	r2, r3
    2204:	d1fc      	bne.n	2200 <_timer_init+0x18a>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2206:	2300      	movs	r3, #0
    2208:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    220a:	22c0      	movs	r2, #192	; 0xc0
    220c:	6923      	ldr	r3, [r4, #16]
    220e:	421a      	tst	r2, r3
    2210:	d1fc      	bne.n	220c <_timer_init+0x196>
		hri_tccount32_write_PER_reg(hw, _tcs[i].per);
    2212:	006b      	lsls	r3, r5, #1
    2214:	195b      	adds	r3, r3, r5
    2216:	00db      	lsls	r3, r3, #3
    2218:	f242 62cc 	movw	r2, #9932	; 0x26cc
    221c:	f2c0 0200 	movt	r2, #0
    2220:	4694      	mov	ip, r2
    2222:	4463      	add	r3, ip
    2224:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.PER.reg = data;
    2226:	61a3      	str	r3, [r4, #24]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2228:	2220      	movs	r2, #32
    222a:	6923      	ldr	r3, [r4, #16]
    222c:	421a      	tst	r2, r3
    222e:	d1fc      	bne.n	222a <_timer_init+0x1b4>
    2230:	e7a0      	b.n	2174 <_timer_init+0xfe>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2232:	2b04      	cmp	r3, #4
    2234:	d19e      	bne.n	2174 <_timer_init+0xfe>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2236:	006b      	lsls	r3, r5, #1
    2238:	195b      	adds	r3, r3, r5
    223a:	00db      	lsls	r3, r3, #3
    223c:	f242 62cc 	movw	r2, #9932	; 0x26cc
    2240:	f2c0 0200 	movt	r2, #0
    2244:	4694      	mov	ip, r2
    2246:	4463      	add	r3, ip
    2248:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    224a:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    224c:	22c0      	movs	r2, #192	; 0xc0
    224e:	6923      	ldr	r3, [r4, #16]
    2250:	421a      	tst	r2, r3
    2252:	d1fc      	bne.n	224e <_timer_init+0x1d8>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2254:	2300      	movs	r3, #0
    2256:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	6923      	ldr	r3, [r4, #16]
    225c:	421a      	tst	r2, r3
    225e:	d1fc      	bne.n	225a <_timer_init+0x1e4>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2260:	006b      	lsls	r3, r5, #1
    2262:	195b      	adds	r3, r3, r5
    2264:	00db      	lsls	r3, r3, #3
    2266:	f242 62cc 	movw	r2, #9932	; 0x26cc
    226a:	f2c0 0200 	movt	r2, #0
    226e:	4694      	mov	ip, r2
    2270:	4463      	add	r3, ip
    2272:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2274:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2276:	2220      	movs	r2, #32
    2278:	6923      	ldr	r3, [r4, #16]
    227a:	421a      	tst	r2, r3
    227c:	d1fc      	bne.n	2278 <_timer_init+0x202>
    227e:	e779      	b.n	2174 <_timer_init+0xfe>
		_tc0_dev = (struct _timer_device *)dev;
    2280:	f240 03c0 	movw	r3, #192	; 0xc0
    2284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2288:	601e      	str	r6, [r3, #0]
    228a:	e77c      	b.n	2186 <_timer_init+0x110>

0000228c <_tc_get_timer>:
}
    228c:	2000      	movs	r0, #0
    228e:	4770      	bx	lr

00002290 <TC0_Handler>:
{
    2290:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    2292:	f240 03c0 	movw	r3, #192	; 0xc0
    2296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    229a:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    229c:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF_Msk) >> TC_INTFLAG_OVF_Pos;
    229e:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    22a0:	07d2      	lsls	r2, r2, #31
    22a2:	d400      	bmi.n	22a6 <TC0_Handler+0x16>
}
    22a4:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF_Msk;
    22a6:	2201      	movs	r2, #1
    22a8:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    22aa:	6803      	ldr	r3, [r0, #0]
    22ac:	4798      	blx	r3
}
    22ae:	e7f9      	b.n	22a4 <TC0_Handler+0x14>

000022b0 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    22b0:	b570      	push	{r4, r5, r6, lr}
    22b2:	0005      	movs	r5, r0
    22b4:	000c      	movs	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    22b6:	b1e8      	cbz	r0, 22f4 <_rand_sync_init+0x44>
    22b8:	0008      	movs	r0, r1
    22ba:	1e43      	subs	r3, r0, #1
    22bc:	4198      	sbcs	r0, r3
    22be:	b2c0      	uxtb	r0, r0
    22c0:	f242 61f8 	movw	r1, #9976	; 0x26f8
    22c4:	f2c0 0100 	movt	r1, #0
    22c8:	223d      	movs	r2, #61	; 0x3d
    22ca:	f241 036b 	movw	r3, #4203	; 0x106b
    22ce:	f2c0 0300 	movt	r3, #0
    22d2:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    22d4:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    22d6:	079b      	lsls	r3, r3, #30
    22d8:	d40e      	bmi.n	22f8 <_rand_sync_init+0x48>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY_Msk;
    22da:	7823      	ldrb	r3, [r4, #0]
    22dc:	2240      	movs	r2, #64	; 0x40
    22de:	4393      	bics	r3, r2
    22e0:	7023      	strb	r3, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO_Msk;
    22e2:	7923      	ldrb	r3, [r4, #4]
    22e4:	3a3f      	subs	r2, #63	; 0x3f
    22e6:	4393      	bics	r3, r2
    22e8:	7123      	strb	r3, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
    22ea:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    22ec:	2320      	movs	r3, #32
    22ee:	712b      	strb	r3, [r5, #4]
	return ERR_NONE;
    22f0:	2000      	movs	r0, #0
	}
	return rc;
}
    22f2:	bd70      	pop	{r4, r5, r6, pc}
    22f4:	2000      	movs	r0, #0
    22f6:	e7e3      	b.n	22c0 <_rand_sync_init+0x10>
		return ERR_DENIED;
    22f8:	2011      	movs	r0, #17
    22fa:	4240      	negs	r0, r0
	return rc;
    22fc:	e7f9      	b.n	22f2 <_rand_sync_init+0x42>

000022fe <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    22fe:	b510      	push	{r4, lr}
    2300:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2302:	2800      	cmp	r0, #0
    2304:	d02b      	beq.n	235e <_wdt_init+0x60>
    2306:	6800      	ldr	r0, [r0, #0]
    2308:	1e43      	subs	r3, r0, #1
    230a:	4198      	sbcs	r0, r3
    230c:	b2c0      	uxtb	r0, r0
    230e:	f242 7110 	movw	r1, #10000	; 0x2710
    2312:	f2c0 0100 	movt	r1, #0
    2316:	2250      	movs	r2, #80	; 0x50
    2318:	f241 036b 	movw	r3, #4203	; 0x106b
    231c:	f2c0 0300 	movt	r3, #0
    2320:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    2322:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2324:	211e      	movs	r1, #30
    2326:	689a      	ldr	r2, [r3, #8]
    2328:	4211      	tst	r1, r2
    232a:	d1fc      	bne.n	2326 <_wdt_init+0x28>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_RUNSTDBY | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    232c:	781a      	ldrb	r2, [r3, #0]
    232e:	09d2      	lsrs	r2, r2, #7
    2330:	b9ba      	cbnz	r2, 2362 <_wdt_init+0x64>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2332:	211e      	movs	r1, #30
    2334:	689a      	ldr	r2, [r3, #8]
    2336:	4211      	tst	r1, r2
    2338:	d1fc      	bne.n	2334 <_wdt_init+0x36>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    233a:	781a      	ldrb	r2, [r3, #0]
    233c:	0792      	lsls	r2, r2, #30
    233e:	d413      	bmi.n	2368 <_wdt_init+0x6a>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN_Msk;
    2340:	781a      	ldrb	r2, [r3, #0]
    2342:	2104      	movs	r1, #4
    2344:	438a      	bics	r2, r1
    2346:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2348:	311a      	adds	r1, #26
    234a:	689a      	ldr	r2, [r3, #8]
    234c:	4211      	tst	r1, r2
    234e:	d1fc      	bne.n	234a <_wdt_init+0x4c>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    2350:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2352:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2354:	210f      	movs	r1, #15
    2356:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2358:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    235a:	2000      	movs	r0, #0
}
    235c:	bd10      	pop	{r4, pc}
    235e:	2000      	movs	r0, #0
    2360:	e7d5      	b.n	230e <_wdt_init+0x10>
		return ERR_DENIED;
    2362:	2011      	movs	r0, #17
    2364:	4240      	negs	r0, r0
    2366:	e7f9      	b.n	235c <_wdt_init+0x5e>
    2368:	2011      	movs	r0, #17
    236a:	4240      	negs	r0, r0
    236c:	e7f6      	b.n	235c <_wdt_init+0x5e>

0000236e <main>:
#include <atmel_start.h>
#include "driver_init.h"

/* Main Function: STATE MACHINE IMPLEMENTATION */
int main(void)
{
    236e:	b510      	push	{r4, lr}
	
	ATSAML11E16A_init();
    2370:	f242 33d3 	movw	r3, #9171	; 0x23d3
    2374:	f2c0 0300 	movt	r3, #0
    2378:	4798      	blx	r3
	ADF7024_Init();
    237a:	f240 3311 	movw	r3, #785	; 0x311
    237e:	f2c0 0300 	movt	r3, #0
    2382:	4798      	blx	r3
	
    2384:	2000      	movs	r0, #0
    2386:	bd10      	pop	{r4, pc}

00002388 <button_on_PA27_used>:
/* Global Variables */
volatile bool     SW0_flag          = false;

static void button_on_PA27_used(void)
{
	SW0_flag = true;
    2388:	f240 03c4 	movw	r3, #196	; 0xc4
    238c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2390:	2201      	movs	r2, #1
    2392:	701a      	strb	r2, [r3, #0]
}
    2394:	4770      	bx	lr

00002396 <RTC_Handler>:

/* RTC Interrupt Handler used in IDLE_MODE_IRQ & STANDBY_MODE_IRQ modes */
void RTC_Handler(void)
{
    2396:	b510      	push	{r4, lr}
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2398:	f242 4300 	movw	r3, #9216	; 0x2400
    239c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    23a0:	f240 1200 	movw	r2, #256	; 0x100
    23a4:	819a      	strh	r2, [r3, #12]
	hri_rtcmode0_clear_INTFLAG_CMP0_bit(RTC); /* clear the pending interrupts */
	adc_async_start_conversion(&ADC_0);
    23a6:	f240 00ec 	movw	r0, #236	; 0xec
    23aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    23ae:	f640 332b 	movw	r3, #2859	; 0xb2b
    23b2:	f2c0 0300 	movt	r3, #0
    23b6:	4798      	blx	r3
}
    23b8:	bd10      	pop	{r4, pc}

000023ba <EXTERNAL_IRQ_0_enable>:

/**
 * Example of using EXTERNAL_IRQ_0
 */
void EXTERNAL_IRQ_0_enable(void)
{
    23ba:	b510      	push	{r4, lr}
	ext_irq_register(PIN_PA27, button_on_PA27_used);
    23bc:	f242 3189 	movw	r1, #9097	; 0x2389
    23c0:	f2c0 0100 	movt	r1, #0
    23c4:	201b      	movs	r0, #27
    23c6:	f640 33cb 	movw	r3, #3019	; 0xbcb
    23ca:	f2c0 0300 	movt	r3, #0
    23ce:	4798      	blx	r3
}
    23d0:	bd10      	pop	{r4, pc}

000023d2 <ATSAML11E16A_init>:
	spi_m_sync_enable(&SPI_0);
}

/* saml11 init Function: STATE MACHINE IMPLEMENTATION */
int ATSAML11E16A_init()
{
    23d2:	b570      	push	{r4, r5, r6, lr}
	int status = 0;
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
    23d4:	f240 3399 	movw	r3, #921	; 0x399
    23d8:	f2c0 0300 	movt	r3, #0
    23dc:	4798      	blx	r3
	
	/* Initialize the SPI connection for saml11 */
	status = SPI_0_init();
    23de:	f240 63b5 	movw	r3, #1717	; 0x6b5
    23e2:	f2c0 0300 	movt	r3, #0
    23e6:	4798      	blx	r3
    23e8:	0005      	movs	r5, r0
	
	/* Enable IRQ on the PA27 */
	EXTERNAL_IRQ_0_enable();
    23ea:	f242 33bb 	movw	r3, #9147	; 0x23bb
    23ee:	f2c0 0300 	movt	r3, #0
    23f2:	4798      	blx	r3
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    23f4:	f240 01c4 	movw	r1, #196	; 0xc4
    23f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    23fc:	3104      	adds	r1, #4
    23fe:	f240 1434 	movw	r4, #308	; 0x134
    2402:	f2c2 0400 	movt	r4, #8192	; 0x2000
    2406:	0020      	movs	r0, r4
    2408:	f640 53ab 	movw	r3, #3499	; 0xdab
    240c:	f2c0 0300 	movt	r3, #0
    2410:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2412:	0020      	movs	r0, r4
    2414:	f640 43b5 	movw	r3, #3253	; 0xcb5
    2418:	f2c0 0300 	movt	r3, #0
    241c:	4798      	blx	r3
	/* Initialize the SPI connection for DGI usage */
	SPI_DGI_Init();
	
	 return status;

} // end of main
    241e:	0028      	movs	r0, r5
    2420:	bd70      	pop	{r4, r5, r6, pc}
	...

00002424 <__ffssi2>:
    2424:	b510      	push	{r4, lr}
    2426:	2300      	movs	r3, #0
    2428:	b110      	cbz	r0, 2430 <__ffssi2+0xc>
    242a:	f000 f803 	bl	2434 <__ctzsi2>
    242e:	1c43      	adds	r3, r0, #1
    2430:	0018      	movs	r0, r3
    2432:	bd10      	pop	{r4, pc}

00002434 <__ctzsi2>:
    2434:	4241      	negs	r1, r0
    2436:	4008      	ands	r0, r1
    2438:	211c      	movs	r1, #28
    243a:	2301      	movs	r3, #1
    243c:	041b      	lsls	r3, r3, #16
    243e:	4298      	cmp	r0, r3
    2440:	d301      	bcc.n	2446 <__ctzsi2+0x12>
    2442:	0c00      	lsrs	r0, r0, #16
    2444:	3910      	subs	r1, #16
    2446:	0a1b      	lsrs	r3, r3, #8
    2448:	4298      	cmp	r0, r3
    244a:	d301      	bcc.n	2450 <__ctzsi2+0x1c>
    244c:	0a00      	lsrs	r0, r0, #8
    244e:	3908      	subs	r1, #8
    2450:	091b      	lsrs	r3, r3, #4
    2452:	4298      	cmp	r0, r3
    2454:	d301      	bcc.n	245a <__ctzsi2+0x26>
    2456:	0900      	lsrs	r0, r0, #4
    2458:	3904      	subs	r1, #4
    245a:	a202      	add	r2, pc, #8	; (adr r2, 2464 <__ctzsi2+0x30>)
    245c:	5c10      	ldrb	r0, [r2, r0]
    245e:	1a40      	subs	r0, r0, r1
    2460:	4770      	bx	lr
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	1d1d1c1b 	.word	0x1d1d1c1b
    2468:	1e1e1e1e 	.word	0x1e1e1e1e
    246c:	1f1f1f1f 	.word	0x1f1f1f1f
    2470:	1f1f1f1f 	.word	0x1f1f1f1f

00002474 <__libc_init_array>:
    2474:	b570      	push	{r4, r5, r6, lr}
    2476:	2500      	movs	r5, #0
    2478:	4b0e      	ldr	r3, [pc, #56]	; (24b4 <__libc_init_array+0x40>)
    247a:	4c0f      	ldr	r4, [pc, #60]	; (24b8 <__libc_init_array+0x44>)
    247c:	1ae4      	subs	r4, r4, r3
    247e:	10a4      	asrs	r4, r4, #2
    2480:	42a5      	cmp	r5, r4
    2482:	d109      	bne.n	2498 <__libc_init_array+0x24>
    2484:	2500      	movs	r5, #0
    2486:	f000 f94f 	bl	2728 <_init>
    248a:	4c0c      	ldr	r4, [pc, #48]	; (24bc <__libc_init_array+0x48>)
    248c:	4b0c      	ldr	r3, [pc, #48]	; (24c0 <__libc_init_array+0x4c>)
    248e:	1ae4      	subs	r4, r4, r3
    2490:	10a4      	asrs	r4, r4, #2
    2492:	42a5      	cmp	r5, r4
    2494:	d107      	bne.n	24a6 <__libc_init_array+0x32>
    2496:	bd70      	pop	{r4, r5, r6, pc}
    2498:	4a06      	ldr	r2, [pc, #24]	; (24b4 <__libc_init_array+0x40>)
    249a:	00ab      	lsls	r3, r5, #2
    249c:	189b      	adds	r3, r3, r2
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	4798      	blx	r3
    24a2:	3501      	adds	r5, #1
    24a4:	e7ec      	b.n	2480 <__libc_init_array+0xc>
    24a6:	4a06      	ldr	r2, [pc, #24]	; (24c0 <__libc_init_array+0x4c>)
    24a8:	00ab      	lsls	r3, r5, #2
    24aa:	189b      	adds	r3, r3, r2
    24ac:	681b      	ldr	r3, [r3, #0]
    24ae:	4798      	blx	r3
    24b0:	3501      	adds	r5, #1
    24b2:	e7ee      	b.n	2492 <__libc_init_array+0x1e>
    24b4:	00002734 	.word	0x00002734
    24b8:	00002734 	.word	0x00002734
    24bc:	00002738 	.word	0x00002738
    24c0:	00002734 	.word	0x00002734

000024c4 <memcpy>:
    24c4:	2300      	movs	r3, #0
    24c6:	b510      	push	{r4, lr}
    24c8:	429a      	cmp	r2, r3
    24ca:	d100      	bne.n	24ce <memcpy+0xa>
    24cc:	bd10      	pop	{r4, pc}
    24ce:	5ccc      	ldrb	r4, [r1, r3]
    24d0:	54c4      	strb	r4, [r0, r3]
    24d2:	3301      	adds	r3, #1
    24d4:	e7f8      	b.n	24c8 <memcpy+0x4>
    24d6:	0000      	movs	r0, r0
    24d8:	682f2e2e 	.word	0x682f2e2e
    24dc:	692f6c61 	.word	0x692f6c61
    24e0:	756c636e 	.word	0x756c636e
    24e4:	682f6564 	.word	0x682f6564
    24e8:	775f6c61 	.word	0x775f6c61
    24ec:	682e7464 	.word	0x682e7464
    24f0:	00000000 	.word	0x00000000
    24f4:	682f2e2e 	.word	0x682f2e2e
    24f8:	732f6c61 	.word	0x732f6c61
    24fc:	682f6372 	.word	0x682f6372
    2500:	615f6c61 	.word	0x615f6c61
    2504:	615f6364 	.word	0x615f6364
    2508:	636e7973 	.word	0x636e7973
    250c:	0000632e 	.word	0x0000632e
    2510:	682f2e2e 	.word	0x682f2e2e
    2514:	732f6c61 	.word	0x732f6c61
    2518:	682f6372 	.word	0x682f6372
    251c:	725f6c61 	.word	0x725f6c61
    2520:	5f646e61 	.word	0x5f646e61
    2524:	636e7973 	.word	0x636e7973
    2528:	0000632e 	.word	0x0000632e
    252c:	682f2e2e 	.word	0x682f2e2e
    2530:	732f6c61 	.word	0x732f6c61
    2534:	682f6372 	.word	0x682f6372
    2538:	735f6c61 	.word	0x735f6c61
    253c:	6d5f6970 	.word	0x6d5f6970
    2540:	6e79735f 	.word	0x6e79735f
    2544:	00632e63 	.word	0x00632e63
    2548:	682f2e2e 	.word	0x682f2e2e
    254c:	732f6c61 	.word	0x732f6c61
    2550:	682f6372 	.word	0x682f6372
    2554:	745f6c61 	.word	0x745f6c61
    2558:	72656d69 	.word	0x72656d69
    255c:	0000632e 	.word	0x0000632e
    2560:	682f2e2e 	.word	0x682f2e2e
    2564:	732f6c61 	.word	0x732f6c61
    2568:	682f6372 	.word	0x682f6372
    256c:	755f6c61 	.word	0x755f6c61
    2570:	74726173 	.word	0x74726173
    2574:	6e79735f 	.word	0x6e79735f
    2578:	00632e63 	.word	0x00632e63
    257c:	682f2e2e 	.word	0x682f2e2e
    2580:	752f6c61 	.word	0x752f6c61
    2584:	736c6974 	.word	0x736c6974
    2588:	6372732f 	.word	0x6372732f
    258c:	6974752f 	.word	0x6974752f
    2590:	6c5f736c 	.word	0x6c5f736c
    2594:	2e747369 	.word	0x2e747369
    2598:	00000063 	.word	0x00000063
    259c:	682f2e2e 	.word	0x682f2e2e
    25a0:	752f6c61 	.word	0x752f6c61
    25a4:	736c6974 	.word	0x736c6974
    25a8:	6372732f 	.word	0x6372732f
    25ac:	6974752f 	.word	0x6974752f
    25b0:	725f736c 	.word	0x725f736c
    25b4:	62676e69 	.word	0x62676e69
    25b8:	65666675 	.word	0x65666675
    25bc:	00632e72 	.word	0x00632e72

000025c0 <_adcs>:
    25c0:	0000c000 18000002 06000000 00000000     ................
	...
    25dc:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    25ec:	632e6364 00000000                       dc.c....

000025f4 <_cfgs>:
    25f4:	00000042 00801300 00000908 00000000     B...............
	...

00002654 <_map>:
    2654:	00000005 0000001b 682f2e2e 652f6c70     ........../hpl/e
    2664:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00002674 <user_mux_confs>:
	...
    2680:	00010000 00000000 00000000 42000400     ...............B
    2690:	42000800 42000c00                       ...B...B

00002698 <_i2cms>:
	...
    26b0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    26c0:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000026cc <_tcs>:
    26cc:	00002200 00000308 00000000 00000000     ."..............
    26dc:	000001f4 00000000 682f2e2e 742f6c70     ........../hpl/t
    26ec:	70682f63 63745f6c 0000632e 682f2e2e     c/hpl_tc.c..../h
    26fc:	742f6c70 2f676e72 5f6c7068 676e7274     pl/trng/hpl_trng
    270c:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    271c:	775f6c70 632e7464 00000000              pl_wdt.c....

00002728 <_init>:
    2728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    272e:	bc08      	pop	{r3}
    2730:	469e      	mov	lr, r3
    2732:	4770      	bx	lr

00002734 <__init_array_start>:
    2734:	00000241 	.word	0x00000241

00002738 <_fini>:
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    273e:	bc08      	pop	{r3}
    2740:	469e      	mov	lr, r3
    2742:	4770      	bx	lr

00002744 <__fini_array_start>:
    2744:	00000215 	.word	0x00000215

Disassembly of section .gnu.sgstubs:

0000fb00 <nsc_ext_irq_init>:
    fb00:	e97f e97f 	sg
    fb04:	f7f0 bb0f 	b.w	126 <__acle_se_nsc_ext_irq_init>

0000fb08 <nsc_periph_clock_init>:
    fb08:	e97f e97f 	sg
    fb0c:	f7f0 baf2 	b.w	f4 <__acle_se_nsc_periph_clock_init>
	...
