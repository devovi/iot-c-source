
ATSAML11E16A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  0000fb00  0000fb00  0002fb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000008  20000000  000032d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000264  20000010  000032f0  00020010  2**4
                  ALLOC
  4 .heap         00000204  20000274  00003554  00020010  2**0
                  ALLOC
  5 .stack        00000400  20000478  00003758  00020010  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000348e6  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000049f7  00000000  00000000  0006898b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012cef  00000000  00000000  0006d382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ff8  00000000  00000000  00080071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001738  00000000  00000000  00081069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001fb3f  00000000  00000000  000827a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00017fd4  00000000  00000000  000a22e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009c99c  00000000  00000000  000ba2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002864  00000000  00000000  00156c50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 08 00 20 b1 02 00 00 ad 02 00 00 ad 02 00 00     x.. ............
	...
      2c:	ad 02 00 00 00 00 00 00 00 00 00 00 ad 02 00 00     ................
      3c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 0b 2c 00 00     .............,..
      4c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      5c:	d1 1a 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      6c:	61 17 00 00 d3 17 00 00 45 18 00 00 b7 18 00 00     a.......E.......
      7c:	29 19 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     )...............
      8c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      9c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      ac:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      bc:	ad 02 00 00 ad 02 00 00 ad 02 00 00 bb 2a 00 00     .............*..
      cc:	ad 02 00 00 ad 02 00 00 4b 14 00 00 63 14 00 00     ........K...c...
      dc:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      ec:	ad 02 00 00 ad 02 00 00                             ........

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	23ff      	movs	r3, #255	; 0xff
      f6:	4003      	ands	r3, r0
      f8:	009b      	lsls	r3, r3, #2
      fa:	f641 4c00 	movw	ip, #7168	; 0x1c00
      fe:	f2c4 0c00 	movt	ip, #16384	; 0x4000
     102:	4463      	add	r3, ip
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     104:	2280      	movs	r2, #128	; 0x80
     106:	589a      	ldr	r2, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     108:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10a:	0652      	lsls	r2, r2, #25
     10c:	d404      	bmi.n	118 <__acle_se_nsc_periph_clock_init+0x24>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     10e:	2240      	movs	r2, #64	; 0x40
     110:	4311      	orrs	r1, r2
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     112:	3240      	adds	r2, #64	; 0x40
     114:	5099      	str	r1, [r3, r2]
	}
	return 0;
     116:	2000      	movs	r0, #0
}
     118:	0001      	movs	r1, r0
     11a:	0002      	movs	r2, r0
     11c:	0003      	movs	r3, r0
     11e:	4684      	mov	ip, r0
     120:	f38e 8800 	msr	CPSR_f, lr
     124:	4774      	bxns	lr

00000126 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     126:	b5f0      	push	{r4, r5, r6, r7, lr}
     128:	46ce      	mov	lr, r9
     12a:	4647      	mov	r7, r8
     12c:	b580      	push	{r7, lr}
     12e:	b087      	sub	sp, #28
     130:	9002      	str	r0, [sp, #8]
     132:	9103      	str	r1, [sp, #12]
     134:	9204      	str	r2, [sp, #16]
     136:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     138:	f642 2300 	movw	r3, #10752	; 0x2a00
     13c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     140:	6898      	ldr	r0, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     142:	6999      	ldr	r1, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     146:	69dc      	ldr	r4, [r3, #28]
     148:	46a4      	mov	ip, r4
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     14c:	9e02      	ldr	r6, [sp, #8]
     14e:	4046      	eors	r6, r0
     150:	403e      	ands	r6, r7
     152:	4046      	eors	r6, r0
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     154:	9b04      	ldr	r3, [sp, #16]
     156:	9301      	str	r3, [sp, #4]
     158:	001d      	movs	r5, r3
     15a:	404d      	eors	r5, r1
     15c:	403d      	ands	r5, r7
     15e:	404d      	eors	r5, r1
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9c05      	ldr	r4, [sp, #20]
     162:	4054      	eors	r4, r2
     164:	403c      	ands	r4, r7
     166:	4054      	eors	r4, r2
     168:	46a1      	mov	r9, r4
	uint32_t config_nonsec_mask = 0;
     16a:	2100      	movs	r1, #0
	for (i = 0; i < 8; i++) {
     16c:	2300      	movs	r3, #0
		if (nonsec_mask & (1u << i)) {
     16e:	2001      	movs	r0, #1
			config_nonsec_mask |= (0xFu << (i * 4));
     170:	f240 080f 	movw	r8, #15
     174:	e002      	b.n	17c <__acle_se_nsc_ext_irq_init+0x56>
	for (i = 0; i < 8; i++) {
     176:	3301      	adds	r3, #1
     178:	2b08      	cmp	r3, #8
     17a:	d008      	beq.n	18e <__acle_se_nsc_ext_irq_init+0x68>
		if (nonsec_mask & (1u << i)) {
     17c:	0002      	movs	r2, r0
     17e:	409a      	lsls	r2, r3
     180:	4217      	tst	r7, r2
     182:	d0f8      	beq.n	176 <__acle_se_nsc_ext_irq_init+0x50>
			config_nonsec_mask |= (0xFu << (i * 4));
     184:	009a      	lsls	r2, r3, #2
     186:	4644      	mov	r4, r8
     188:	4094      	lsls	r4, r2
     18a:	4321      	orrs	r1, r4
     18c:	e7f3      	b.n	176 <__acle_se_nsc_ext_irq_init+0x50>
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     18e:	4660      	mov	r0, ip
     190:	9b03      	ldr	r3, [sp, #12]
     192:	4058      	eors	r0, r3
     194:	4008      	ands	r0, r1
     196:	4663      	mov	r3, ip
     198:	4058      	eors	r0, r3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     19a:	f642 2300 	movw	r3, #10752	; 0x2a00
     19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1a2:	781a      	ldrb	r2, [r3, #0]
     1a4:	2102      	movs	r1, #2
     1a6:	438a      	bics	r2, r1
     1a8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1aa:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1b2:	3101      	adds	r1, #1
     1b4:	6853      	ldr	r3, [r2, #4]
     1b6:	4219      	tst	r1, r3
     1b8:	d1fc      	bne.n	1b4 <__acle_se_nsc_ext_irq_init+0x8e>
     1ba:	f642 2200 	movw	r2, #10752	; 0x2a00
     1be:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1c2:	2102      	movs	r1, #2
     1c4:	6853      	ldr	r3, [r2, #4]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <__acle_se_nsc_ext_irq_init+0x9e>
	((Eic *)hw)->EVCTRL.reg = data;
     1ca:	f642 2300 	movw	r3, #10752	; 0x2a00
     1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1d2:	609e      	str	r6, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1d4:	619d      	str	r5, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1d6:	464a      	mov	r2, r9
     1d8:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1da:	61d8      	str	r0, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	2102      	movs	r1, #2
     1e0:	430a      	orrs	r2, r1
     1e2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1e4:	f642 2200 	movw	r2, #10752	; 0x2a00
     1e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1ec:	3101      	adds	r1, #1
     1ee:	6853      	ldr	r3, [r2, #4]
     1f0:	4219      	tst	r1, r3
     1f2:	d1fc      	bne.n	1ee <__acle_se_nsc_ext_irq_init+0xc8>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     1f4:	2000      	movs	r0, #0
     1f6:	b007      	add	sp, #28
     1f8:	0001      	movs	r1, r0
     1fa:	0002      	movs	r2, r0
     1fc:	0003      	movs	r3, r0
     1fe:	4684      	mov	ip, r0
     200:	bc0c      	pop	{r2, r3}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	bcf0      	pop	{r4, r5, r6, r7}
     208:	bc02      	pop	{r1}
     20a:	4686      	mov	lr, r0
     20c:	f381 8800 	msr	CPSR_f, r1
     210:	470c      	bxns	r1
	...

00000214 <__do_global_dtors_aux>:
     214:	b510      	push	{r4, lr}
     216:	f240 0410 	movw	r4, #16
     21a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     21e:	7823      	ldrb	r3, [r4, #0]
     220:	b963      	cbnz	r3, 23c <__do_global_dtors_aux+0x28>
     222:	f240 0300 	movw	r3, #0
     226:	f2c0 0300 	movt	r3, #0
     22a:	b12b      	cbz	r3, 238 <__do_global_dtors_aux+0x24>
     22c:	f244 0020 	movw	r0, #16416	; 0x4020
     230:	f2c0 0080 	movt	r0, #128	; 0x80
     234:	e000      	b.n	238 <__do_global_dtors_aux+0x24>
     236:	bf00      	nop
     238:	2301      	movs	r3, #1
     23a:	7023      	strb	r3, [r4, #0]
     23c:	bd10      	pop	{r4, pc}
     23e:	46c0      	nop			; (mov r8, r8)

00000240 <frame_dummy>:
     240:	f240 0300 	movw	r3, #0
     244:	f2c0 0300 	movt	r3, #0
     248:	b510      	push	{r4, lr}
     24a:	b14b      	cbz	r3, 260 <frame_dummy+0x20>
     24c:	f240 0114 	movw	r1, #20
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c2 0100 	movt	r1, #8192	; 0x2000
     258:	f2c0 0080 	movt	r0, #128	; 0x80
     25c:	e000      	b.n	260 <frame_dummy+0x20>
     25e:	bf00      	nop
     260:	f244 0020 	movw	r0, #16416	; 0x4020
     264:	f2c0 0080 	movt	r0, #128	; 0x80
     268:	6803      	ldr	r3, [r0, #0]
     26a:	b903      	cbnz	r3, 26e <frame_dummy+0x2e>
     26c:	bd10      	pop	{r4, pc}
     26e:	f240 0300 	movw	r3, #0
     272:	f2c0 0300 	movt	r3, #0
     276:	2b00      	cmp	r3, #0
     278:	d0f8      	beq.n	26c <frame_dummy+0x2c>
     27a:	4798      	blx	r3
     27c:	e7f6      	b.n	26c <frame_dummy+0x2c>
     27e:	46c0      	nop			; (mov r8, r8)

00000280 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     280:	b510      	push	{r4, lr}
	system_init();
     282:	f240 7361 	movw	r3, #1889	; 0x761
     286:	f2c0 0300 	movt	r3, #0
     28a:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     28c:	f243 2300 	movw	r3, #12800	; 0x3200
     290:	f2c4 0300 	movt	r3, #16384	; 0x4000
     294:	2200      	movs	r2, #0
     296:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     298:	f24e 1300 	movw	r3, #57600	; 0xe100
     29c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     2a0:	f240 2180 	movw	r1, #640	; 0x280
     2a4:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     2a6:	3104      	adds	r1, #4
     2a8:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
}
     2aa:	bd10      	pop	{r4, pc}

000002ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ac:	e7fe      	b.n	2ac <Dummy_Handler>
	...

000002b0 <Reset_Handler>:
{
     2b0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     2b2:	f243 22d4 	movw	r2, #13012	; 0x32d4
     2b6:	f2c0 0200 	movt	r2, #0
     2ba:	f240 0300 	movw	r3, #0
     2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2c2:	429a      	cmp	r2, r3
     2c4:	d020      	beq.n	308 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     2c6:	001a      	movs	r2, r3
     2c8:	f240 0308 	movw	r3, #8
     2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2d0:	429a      	cmp	r2, r3
     2d2:	d219      	bcs.n	308 <Reset_Handler+0x58>
     2d4:	f240 0308 	movw	r3, #8
     2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2dc:	3303      	adds	r3, #3
     2de:	4a24      	ldr	r2, [pc, #144]	; (370 <Reset_Handler+0xc0>)
     2e0:	1a9b      	subs	r3, r3, r2
     2e2:	089b      	lsrs	r3, r3, #2
     2e4:	3301      	adds	r3, #1
     2e6:	009b      	lsls	r3, r3, #2
     2e8:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     2ea:	f240 0100 	movw	r1, #0
     2ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
     2f2:	1851      	adds	r1, r2, r1
     2f4:	f243 20d4 	movw	r0, #13012	; 0x32d4
     2f8:	f2c0 0000 	movt	r0, #0
     2fc:	1810      	adds	r0, r2, r0
     2fe:	6800      	ldr	r0, [r0, #0]
     300:	6008      	str	r0, [r1, #0]
     302:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     304:	429a      	cmp	r2, r3
     306:	d1f0      	bne.n	2ea <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	f240 0210 	movw	r2, #16
     30c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     310:	f240 2374 	movw	r3, #628	; 0x274
     314:	f2c2 0300 	movt	r3, #8192	; 0x2000
     318:	429a      	cmp	r2, r3
     31a:	d213      	bcs.n	344 <Reset_Handler+0x94>
     31c:	f240 0210 	movw	r2, #16
     320:	f2c2 0200 	movt	r2, #8192	; 0x2000
     324:	43d3      	mvns	r3, r2
     326:	f240 2174 	movw	r1, #628	; 0x274
     32a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     32e:	468c      	mov	ip, r1
     330:	4463      	add	r3, ip
     332:	2103      	movs	r1, #3
     334:	438b      	bics	r3, r1
     336:	3304      	adds	r3, #4
     338:	4694      	mov	ip, r2
     33a:	4463      	add	r3, ip
                *pDest++ = 0;
     33c:	2100      	movs	r1, #0
     33e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     340:	4293      	cmp	r3, r2
     342:	d1fc      	bne.n	33e <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     344:	f240 0300 	movw	r3, #0
     348:	f2c0 0300 	movt	r3, #0
     34c:	227f      	movs	r2, #127	; 0x7f
     34e:	4393      	bics	r3, r2
     350:	f64e 5200 	movw	r2, #60672	; 0xed00
     354:	f2ce 0200 	movt	r2, #57344	; 0xe000
     358:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     35a:	f243 0319 	movw	r3, #12313	; 0x3019
     35e:	f2c0 0300 	movt	r3, #0
     362:	4798      	blx	r3
        main();
     364:	f642 536d 	movw	r3, #11629	; 0x2d6d
     368:	f2c0 0300 	movt	r3, #0
     36c:	4798      	blx	r3
     36e:	e7fe      	b.n	36e <Reset_Handler+0xbe>
     370:	20000004 	.word	0x20000004

00000374 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC;
     378:	f640 0300 	movw	r3, #2048	; 0x800
     37c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     380:	69da      	ldr	r2, [r3, #28]
     382:	2180      	movs	r1, #128	; 0x80
     384:	430a      	orrs	r2, r1
     386:	61da      	str	r2, [r3, #28]
     388:	f641 4300 	movw	r3, #7168	; 0x1c00
     38c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     390:	3940      	subs	r1, #64	; 0x40
     392:	22c0      	movs	r2, #192	; 0xc0
     394:	5099      	str	r1, [r3, r2]
	hri_mclk_set_APBCMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
#else
	nsc_periph_clock_init(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
#endif
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	f240 042c 	movw	r4, #44	; 0x2c
     39a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     39e:	f641 4100 	movw	r1, #7168	; 0x1c00
     3a2:	f2c4 2100 	movt	r1, #16896	; 0x4200
     3a6:	f240 05cc 	movw	r5, #204	; 0xcc
     3aa:	f2c2 0500 	movt	r5, #8192	; 0x2000
     3ae:	2300      	movs	r3, #0
     3b0:	9302      	str	r3, [sp, #8]
     3b2:	f240 03f8 	movw	r3, #248	; 0xf8
     3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3ba:	9301      	str	r3, [sp, #4]
     3bc:	2701      	movs	r7, #1
     3be:	9700      	str	r7, [sp, #0]
     3c0:	2300      	movs	r3, #0
     3c2:	0022      	movs	r2, r4
     3c4:	0028      	movs	r0, r5
     3c6:	f640 06b3 	movw	r6, #2227	; 0x8b3
     3ca:	f2c0 0600 	movt	r6, #0
     3ce:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3d0:	1d22      	adds	r2, r4, #4
     3d2:	2310      	movs	r3, #16
     3d4:	2100      	movs	r1, #0
     3d6:	0028      	movs	r0, r5
     3d8:	f640 1467 	movw	r4, #2407	; 0x967
     3dc:	f2c0 0400 	movt	r4, #0
     3e0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e2:	f240 2300 	movw	r3, #512	; 0x200
     3e6:	f2c6 0300 	movt	r3, #24576	; 0x6000
     3ea:	2204      	movs	r2, #4
     3ec:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ee:	f243 2300 	movw	r3, #12800	; 0x3200
     3f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
     3fa:	629a      	str	r2, [r3, #40]	; 0x28
     3fc:	22c0      	movs	r2, #192	; 0xc0
     3fe:	0612      	lsls	r2, r2, #24
     400:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     402:	2242      	movs	r2, #66	; 0x42
     404:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     406:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     408:	2001      	movs	r0, #1
     40a:	4301      	orrs	r1, r0
     40c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	2131      	movs	r1, #49	; 0x31
     412:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     414:	240f      	movs	r4, #15
     416:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     418:	4302      	orrs	r2, r0
     41a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     41c:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(LIGHT_SENSOR, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(LIGHT_SENSOR, PINMUX_PA02B_ADC_AIN0);
}
     41e:	b005      	add	sp, #20
     420:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000422 <RAND_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TRNG_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
     422:	f640 0300 	movw	r3, #2048	; 0x800
     426:	f2c4 0300 	movt	r3, #16384	; 0x4000
     42a:	69da      	ldr	r2, [r3, #28]
     42c:	f240 4100 	movw	r1, #1024	; 0x400
     430:	430a      	orrs	r2, r1
     432:	61da      	str	r2, [r3, #28]

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
     434:	4770      	bx	lr

00000436 <RAND_0_init>:

void RAND_0_init(void)
{
     436:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
     438:	f240 4323 	movw	r3, #1059	; 0x423
     43c:	f2c0 0300 	movt	r3, #0
     440:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
     442:	f642 0100 	movw	r1, #10240	; 0x2800
     446:	f2c4 2100 	movt	r1, #16896	; 0x4200
     44a:	f240 00c4 	movw	r0, #196	; 0xc4
     44e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     452:	f640 4339 	movw	r3, #3129	; 0xc39
     456:	f2c0 0300 	movt	r3, #0
     45a:	4798      	blx	r3
}
     45c:	bd10      	pop	{r4, pc}

0000045e <RTC_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     45e:	f640 0300 	movw	r3, #2048	; 0x800
     462:	f2c4 0300 	movt	r3, #16384	; 0x4000
     466:	695a      	ldr	r2, [r3, #20]
     468:	f240 2100 	movw	r1, #512	; 0x200
     46c:	430a      	orrs	r2, r1
     46e:	615a      	str	r2, [r3, #20]
void RTC_CLOCK_init(void)
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
#endif
}
     470:	4770      	bx	lr

00000472 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     472:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     474:	f240 2200 	movw	r2, #512	; 0x200
     478:	f2c6 0200 	movt	r2, #24576	; 0x6000
     47c:	2320      	movs	r3, #32
     47e:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	f243 2300 	movw	r3, #12800	; 0x3200
     484:	f2c4 0300 	movt	r3, #16384	; 0x4000
     488:	2120      	movs	r1, #32
     48a:	f2c4 0102 	movt	r1, #16386	; 0x4002
     48e:	6299      	str	r1, [r3, #40]	; 0x28
     490:	2100      	movs	r1, #0
     492:	f2cc 0102 	movt	r1, #49154	; 0xc002
     496:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     498:	2045      	movs	r0, #69	; 0x45
     49a:	5c19      	ldrb	r1, [r3, r0]
     49c:	2404      	movs	r4, #4
     49e:	43a1      	bics	r1, r4
     4a0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     4a4:	2501      	movs	r5, #1
     4a6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a8:	2401      	movs	r4, #1
     4aa:	4321      	orrs	r1, r4
     4ac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b0:	2132      	movs	r1, #50	; 0x32
     4b2:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b4:	270f      	movs	r7, #15
     4b6:	4038      	ands	r0, r7
	tmp |= PORT_PMUX_PMUXO(data);
     4b8:	2630      	movs	r6, #48	; 0x30
     4ba:	4330      	orrs	r0, r6
     4bc:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4be:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c0:	f248 0100 	movw	r1, #32768	; 0x8000
     4c4:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c6:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c8:	f2c4 0100 	movt	r1, #16384	; 0x4000
     4cc:	6299      	str	r1, [r3, #40]	; 0x28
     4ce:	21c0      	movs	r1, #192	; 0xc0
     4d0:	0609      	lsls	r1, r1, #24
     4d2:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d4:	214f      	movs	r1, #79	; 0x4f
     4d6:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     4d8:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4da:	4320      	orrs	r0, r4
     4dc:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4de:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e0:	2037      	movs	r0, #55	; 0x37
     4e2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4e4:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     4e6:	4331      	orrs	r1, r6
     4e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ec:	2180      	movs	r1, #128	; 0x80
     4ee:	0249      	lsls	r1, r1, #9
     4f0:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f2:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f4:	2280      	movs	r2, #128	; 0x80
     4f6:	05d2      	lsls	r2, r2, #23
     4f8:	629a      	str	r2, [r3, #40]	; 0x28
     4fa:	2201      	movs	r2, #1
     4fc:	f2cc 0200 	movt	r2, #49152	; 0xc000
     500:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     502:	2150      	movs	r1, #80	; 0x50
     504:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     506:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	4322      	orrs	r2, r4
     50a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50e:	3918      	subs	r1, #24
     510:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     512:	3828      	subs	r0, #40	; 0x28
     514:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     516:	380c      	subs	r0, #12
     518:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51a:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(SERCOM0_SPI_SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SERCOM0_SPI_SCK, PINMUX_PA15D_SERCOM0_PAD3);
}
     51c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000051e <SPI_0_CLOCK_init>:
     51e:	f641 4300 	movw	r3, #7168	; 0x1c00
     522:	f2c4 0300 	movt	r3, #16384	; 0x4000
     526:	2240      	movs	r2, #64	; 0x40
     528:	21ac      	movs	r1, #172	; 0xac
     52a:	505a      	str	r2, [r3, r1]
     52c:	3904      	subs	r1, #4
     52e:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     530:	f640 0300 	movw	r3, #2048	; 0x800
     534:	f2c4 0300 	movt	r3, #16384	; 0x4000
     538:	69da      	ldr	r2, [r3, #28]
     53a:	39a6      	subs	r1, #166	; 0xa6
     53c:	430a      	orrs	r2, r1
     53e:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     540:	4770      	bx	lr

00000542 <SPI_0_init>:

void SPI_0_init(void)
{
     542:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     544:	f240 531f 	movw	r3, #1311	; 0x51f
     548:	f2c0 0300 	movt	r3, #0
     54c:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     54e:	f240 4100 	movw	r1, #1024	; 0x400
     552:	f2c4 2100 	movt	r1, #16896	; 0x4200
     556:	f240 1010 	movw	r0, #272	; 0x110
     55a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     55e:	f640 4369 	movw	r3, #3177	; 0xc69
     562:	f2c0 0300 	movt	r3, #0
     566:	4798      	blx	r3
	SPI_0_PORT_init();
     568:	f240 4373 	movw	r3, #1139	; 0x473
     56c:	f2c0 0300 	movt	r3, #0
     570:	4798      	blx	r3
}
     572:	bd10      	pop	{r4, pc}

00000574 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     574:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     576:	f243 2300 	movw	r3, #12800	; 0x3200
     57a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     57e:	2051      	movs	r0, #81	; 0x51
     580:	5c1a      	ldrb	r2, [r3, r0]
     582:	2604      	movs	r6, #4
     584:	43b2      	bics	r2, r6
     586:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     588:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     58a:	2501      	movs	r5, #1
     58c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     58e:	2401      	movs	r4, #1
     590:	4321      	orrs	r1, r4
     592:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     594:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     596:	2238      	movs	r2, #56	; 0x38
     598:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     59a:	3842      	subs	r0, #66	; 0x42
     59c:	4001      	ands	r1, r0
	tmp |= PORT_PMUX_PMUXO(data);
     59e:	3011      	adds	r0, #17
     5a0:	4301      	orrs	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a2:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     5a4:	2152      	movs	r1, #82	; 0x52
     5a6:	5c5a      	ldrb	r2, [r3, r1]
     5a8:	43b2      	bics	r2, r6
     5aa:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ac:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     5ae:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b0:	4322      	orrs	r2, r4
     5b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b6:	3919      	subs	r1, #25
     5b8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ba:	3811      	subs	r0, #17
     5bc:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     5be:	380d      	subs	r0, #13
     5c0:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c2:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     5c4:	bd70      	pop	{r4, r5, r6, pc}

000005c6 <I2C_0_CLOCK_init>:
     5c6:	f641 4300 	movw	r3, #7168	; 0x1c00
     5ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5ce:	2140      	movs	r1, #64	; 0x40
     5d0:	22b0      	movs	r2, #176	; 0xb0
     5d2:	5099      	str	r1, [r3, r2]
     5d4:	3103      	adds	r1, #3
     5d6:	3a08      	subs	r2, #8
     5d8:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     5da:	f640 0300 	movw	r3, #2048	; 0x800
     5de:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5e2:	69da      	ldr	r2, [r3, #28]
     5e4:	393f      	subs	r1, #63	; 0x3f
     5e6:	430a      	orrs	r2, r1
     5e8:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	nsc_periph_clock_init(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
#endif
}
     5ea:	4770      	bx	lr

000005ec <I2C_0_init>:

void I2C_0_init(void)
{
     5ec:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     5ee:	f240 53c7 	movw	r3, #1479	; 0x5c7
     5f2:	f2c0 0300 	movt	r3, #0
     5f6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
     5f8:	f640 0100 	movw	r1, #2048	; 0x800
     5fc:	f2c4 2100 	movt	r1, #16896	; 0x4200
     600:	f240 1034 	movw	r0, #308	; 0x134
     604:	f2c2 0000 	movt	r0, #8192	; 0x2000
     608:	f640 33bd 	movw	r3, #3005	; 0xbbd
     60c:	f2c0 0300 	movt	r3, #0
     610:	4798      	blx	r3
	I2C_0_PORT_init();
     612:	f240 5375 	movw	r3, #1397	; 0x575
     616:	f2c0 0300 	movt	r3, #0
     61a:	4798      	blx	r3
}
     61c:	bd10      	pop	{r4, pc}

0000061e <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     61e:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     620:	f243 2300 	movw	r3, #12800	; 0x3200
     624:	f2c4 0300 	movt	r3, #16384	; 0x4000
     628:	224b      	movs	r2, #75	; 0x4b
     62a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     62c:	2401      	movs	r4, #1
     62e:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	2001      	movs	r0, #1
     632:	4301      	orrs	r1, r0
     634:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     636:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	3a16      	subs	r2, #22
     63a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     63c:	250f      	movs	r5, #15
     63e:	4029      	ands	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
     640:	3521      	adds	r5, #33	; 0x21
     642:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     646:	214c      	movs	r1, #76	; 0x4c
     648:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     64a:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64c:	4302      	orrs	r2, r0
     64e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     652:	3916      	subs	r1, #22
     654:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     656:	200f      	movs	r0, #15
     658:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     65a:	380c      	subs	r0, #12
     65c:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65e:	545a      	strb	r2, [r3, r1]

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
}
     660:	bd30      	pop	{r4, r5, pc}

00000662 <USART_0_CLOCK_init>:
     662:	f641 4300 	movw	r3, #7168	; 0x1c00
     666:	f2c4 0300 	movt	r3, #16384	; 0x4000
     66a:	2140      	movs	r1, #64	; 0x40
     66c:	22b4      	movs	r2, #180	; 0xb4
     66e:	5099      	str	r1, [r3, r2]
     670:	3103      	adds	r1, #3
     672:	3a0c      	subs	r2, #12
     674:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     676:	f640 0300 	movw	r3, #2048	; 0x800
     67a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     67e:	69da      	ldr	r2, [r3, #28]
     680:	393b      	subs	r1, #59	; 0x3b
     682:	430a      	orrs	r2, r1
     684:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
	nsc_periph_clock_init(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
#endif
}
     686:	4770      	bx	lr

00000688 <USART_0_init>:

void USART_0_init(void)
{
     688:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     68a:	f240 6363 	movw	r3, #1635	; 0x663
     68e:	f2c0 0300 	movt	r3, #0
     692:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     694:	f640 4100 	movw	r1, #3072	; 0xc00
     698:	f2c4 2100 	movt	r1, #16896	; 0x4200
     69c:	f240 1028 	movw	r0, #296	; 0x128
     6a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6a4:	2200      	movs	r2, #0
     6a6:	f241 032b 	movw	r3, #4139	; 0x102b
     6aa:	f2c0 0300 	movt	r3, #0
     6ae:	4798      	blx	r3
	USART_0_PORT_init();
     6b0:	f240 631f 	movw	r3, #1567	; 0x61f
     6b4:	f2c0 0300 	movt	r3, #0
     6b8:	4798      	blx	r3
}
     6ba:	bd10      	pop	{r4, pc}

000006bc <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     6bc:	b510      	push	{r4, lr}
     6be:	f641 4300 	movw	r3, #7168	; 0x1c00
     6c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6c6:	2140      	movs	r1, #64	; 0x40
     6c8:	2298      	movs	r2, #152	; 0x98
     6ca:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     6cc:	f640 0300 	movw	r3, #2048	; 0x800
     6d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6d4:	69da      	ldr	r2, [r3, #28]
     6d6:	393f      	subs	r1, #63	; 0x3f
     6d8:	430a      	orrs	r2, r1
     6da:	61da      	str	r2, [r3, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);

	event_system_init();
     6dc:	f640 238d 	movw	r3, #2701	; 0xa8d
     6e0:	f2c0 0300 	movt	r3, #0
     6e4:	4798      	blx	r3
}
     6e6:	bd10      	pop	{r4, pc}

000006e8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
     6ea:	f641 4300 	movw	r3, #7168	; 0x1c00
     6ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6f2:	2141      	movs	r1, #65	; 0x41
     6f4:	228c      	movs	r2, #140	; 0x8c
     6f6:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     6f8:	f640 0300 	movw	r3, #2048	; 0x800
     6fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     700:	695a      	ldr	r2, [r3, #20]
     702:	f240 4100 	movw	r1, #1024	; 0x400
     706:	430a      	orrs	r2, r1
     708:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     70a:	f240 2200 	movw	r2, #512	; 0x200
     70e:	f2c6 0200 	movt	r2, #24576	; 0x6000
     712:	2080      	movs	r0, #128	; 0x80
     714:	0500      	lsls	r0, r0, #20
     716:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     718:	f243 2300 	movw	r3, #12800	; 0x3200
     71c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     720:	2100      	movs	r1, #0
     722:	f2c4 0102 	movt	r1, #16386	; 0x4002
     726:	6299      	str	r1, [r3, #40]	; 0x28
     728:	f640 0100 	movw	r1, #2048	; 0x800
     72c:	f2cc 0102 	movt	r1, #49154	; 0xc002
     730:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     732:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN_Msk;
     734:	215b      	movs	r1, #91	; 0x5b
     736:	5c5c      	ldrb	r4, [r3, r1]
     738:	2504      	movs	r5, #4
     73a:	432c      	orrs	r4, r5
     73c:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     73e:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     742:	2001      	movs	r0, #1
     744:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     746:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     748:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     74a:	391e      	subs	r1, #30
     74c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     74e:	300e      	adds	r0, #14
     750:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     752:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON, PINMUX_PA27A_EIC_EXTINT5);

	ext_irq_init();
     754:	f640 23d7 	movw	r3, #2775	; 0xad7
     758:	f2c0 0300 	movt	r3, #0
     75c:	4798      	blx	r3
}
     75e:	bd70      	pop	{r4, r5, r6, pc}

00000760 <system_init>:

void system_init(void)
{
     760:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     762:	f241 437b 	movw	r3, #5243	; 0x147b
     766:	f2c0 0300 	movt	r3, #0
     76a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     76c:	f240 2300 	movw	r3, #512	; 0x200
     770:	f2c6 0300 	movt	r3, #24576	; 0x6000
     774:	2280      	movs	r2, #128	; 0x80
     776:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77a:	f243 2300 	movw	r3, #12800	; 0x3200
     77e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     782:	f2c4 0200 	movt	r2, #16384	; 0x4000
     786:	629a      	str	r2, [r3, #40]	; 0x28
     788:	22c0      	movs	r2, #192	; 0xc0
     78a:	0612      	lsls	r2, r2, #24
     78c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78e:	2147      	movs	r1, #71	; 0x47
     790:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     792:	2001      	movs	r0, #1
     794:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     796:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     798:	f240 3375 	movw	r3, #885	; 0x375
     79c:	f2c0 0300 	movt	r3, #0
     7a0:	4798      	blx	r3

	RAND_0_init();
     7a2:	f240 4337 	movw	r3, #1079	; 0x437
     7a6:	f2c0 0300 	movt	r3, #0
     7aa:	4798      	blx	r3
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     7ac:	f640 0300 	movw	r3, #2048	; 0x800
     7b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7b4:	69da      	ldr	r2, [r3, #28]
     7b6:	2110      	movs	r1, #16
     7b8:	430a      	orrs	r2, r1
     7ba:	61da      	str	r2, [r3, #28]
     7bc:	f641 4300 	movw	r3, #7168	; 0x1c00
     7c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7c4:	3130      	adds	r1, #48	; 0x30
     7c6:	22b8      	movs	r2, #184	; 0xb8
     7c8:	5099      	str	r1, [r3, r2]
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     7ca:	f642 23b7 	movw	r3, #10935	; 0x2ab7
     7ce:	f2c0 0300 	movt	r3, #0
     7d2:	4798      	blx	r3
     7d4:	0002      	movs	r2, r0
     7d6:	f241 0100 	movw	r1, #4096	; 0x1000
     7da:	f2c4 2100 	movt	r1, #16896	; 0x4200
     7de:	f240 1054 	movw	r0, #340	; 0x154
     7e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7e6:	f640 63ef 	movw	r3, #3823	; 0xeef
     7ea:	f2c0 0300 	movt	r3, #0
     7ee:	4798      	blx	r3

	TIMER_0_init();

	RTC_CLOCK_init();
     7f0:	f240 435f 	movw	r3, #1119	; 0x45f
     7f4:	f2c0 0300 	movt	r3, #0
     7f8:	4798      	blx	r3
	RTC_init();
     7fa:	f641 530f 	movw	r3, #7439	; 0x1d0f
     7fe:	f2c0 0300 	movt	r3, #0
     802:	4798      	blx	r3

	SPI_0_init();
     804:	f240 5343 	movw	r3, #1347	; 0x543
     808:	f2c0 0300 	movt	r3, #0
     80c:	4798      	blx	r3

	I2C_0_init();
     80e:	f240 53ed 	movw	r3, #1517	; 0x5ed
     812:	f2c0 0300 	movt	r3, #0
     816:	4798      	blx	r3

	USART_0_init();
     818:	f240 6389 	movw	r3, #1673	; 0x689
     81c:	f2c0 0300 	movt	r3, #0
     820:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     822:	f240 63bd 	movw	r3, #1725	; 0x6bd
     826:	f2c0 0300 	movt	r3, #0
     82a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     82c:	f240 63e9 	movw	r3, #1769	; 0x6e9
     830:	f2c0 0300 	movt	r3, #0
     834:	4798      	blx	r3
}
     836:	bd10      	pop	{r4, pc}

00000838 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     838:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     83a:	6983      	ldr	r3, [r0, #24]
     83c:	b103      	cbz	r3, 840 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     83e:	4798      	blx	r3
	}
}
     840:	bd10      	pop	{r4, pc}

00000842 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     842:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     844:	69c3      	ldr	r3, [r0, #28]
     846:	b103      	cbz	r3, 84a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     848:	4798      	blx	r3
	}
}
     84a:	bd10      	pop	{r4, pc}

0000084c <adc_async_channel_conversion_done>:
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	b083      	sub	sp, #12
     850:	0005      	movs	r5, r0
     852:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     854:	6a03      	ldr	r3, [r0, #32]
     856:	5c5b      	ldrb	r3, [r3, r1]
     858:	005c      	lsls	r4, r3, #1
     85a:	18e4      	adds	r4, r4, r3
     85c:	00e4      	lsls	r4, r4, #3
     85e:	6a83      	ldr	r3, [r0, #40]	; 0x28
     860:	469c      	mov	ip, r3
     862:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     864:	1d27      	adds	r7, r4, #4
     866:	9201      	str	r2, [sp, #4]
     868:	466b      	mov	r3, sp
     86a:	7919      	ldrb	r1, [r3, #4]
     86c:	0038      	movs	r0, r7
     86e:	f241 1345 	movw	r3, #4421	; 0x1145
     872:	f2c0 0300 	movt	r3, #0
     876:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     878:	0028      	movs	r0, r5
     87a:	f241 4323 	movw	r3, #5155	; 0x1423
     87e:	f2c0 0300 	movt	r3, #0
     882:	4798      	blx	r3
     884:	2801      	cmp	r0, #1
     886:	d90a      	bls.n	89e <adc_async_channel_conversion_done+0x52>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     888:	9b01      	ldr	r3, [sp, #4]
     88a:	0a19      	lsrs	r1, r3, #8
     88c:	0038      	movs	r0, r7
     88e:	f241 1345 	movw	r3, #4421	; 0x1145
     892:	f2c0 0300 	movt	r3, #0
     896:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     898:	8aa3      	ldrh	r3, [r4, #20]
     89a:	3301      	adds	r3, #1
     89c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     89e:	8aa3      	ldrh	r3, [r4, #20]
     8a0:	3301      	adds	r3, #1
     8a2:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     8a4:	6823      	ldr	r3, [r4, #0]
     8a6:	b113      	cbz	r3, 8ae <adc_async_channel_conversion_done+0x62>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     8a8:	0031      	movs	r1, r6
     8aa:	0028      	movs	r0, r5
     8ac:	4798      	blx	r3
}
     8ae:	b003      	add	sp, #12
     8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008b2 <adc_async_init>:
{
     8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b4:	46d6      	mov	lr, sl
     8b6:	464f      	mov	r7, r9
     8b8:	b580      	push	{r7, lr}
     8ba:	b083      	sub	sp, #12
     8bc:	0007      	movs	r7, r0
     8be:	9101      	str	r1, [sp, #4]
     8c0:	0016      	movs	r6, r2
     8c2:	001c      	movs	r4, r3
     8c4:	ab0a      	add	r3, sp, #40	; 0x28
     8c6:	781d      	ldrb	r5, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     8c8:	2800      	cmp	r0, #0
     8ca:	d046      	beq.n	95a <adc_async_init+0xa8>
     8cc:	2900      	cmp	r1, #0
     8ce:	d046      	beq.n	95e <adc_async_init+0xac>
     8d0:	2a00      	cmp	r2, #0
     8d2:	d046      	beq.n	962 <adc_async_init+0xb0>
     8d4:	2000      	movs	r0, #0
     8d6:	b115      	cbz	r5, 8de <adc_async_init+0x2c>
     8d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
     8da:	1e43      	subs	r3, r0, #1
     8dc:	4198      	sbcs	r0, r3
     8de:	f243 0a68 	movw	sl, #12392	; 0x3068
     8e2:	f2c0 0a00 	movt	sl, #0
     8e6:	223f      	movs	r2, #63	; 0x3f
     8e8:	4651      	mov	r1, sl
     8ea:	f241 097b 	movw	r9, #4219	; 0x107b
     8ee:	f2c0 0900 	movt	r9, #0
     8f2:	47c8      	blx	r9
	ASSERT(channel_amount <= (channel_max + 1));
     8f4:	1c62      	adds	r2, r4, #1
     8f6:	0feb      	lsrs	r3, r5, #31
     8f8:	17d0      	asrs	r0, r2, #31
     8fa:	42aa      	cmp	r2, r5
     8fc:	4158      	adcs	r0, r3
     8fe:	b2c0      	uxtb	r0, r0
     900:	2240      	movs	r2, #64	; 0x40
     902:	4651      	mov	r1, sl
     904:	47c8      	blx	r9
	for (uint8_t i = 0; i <= channel_max; i++) {
     906:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     908:	22ff      	movs	r2, #255	; 0xff
     90a:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     90c:	3301      	adds	r3, #1
     90e:	b2db      	uxtb	r3, r3
     910:	429c      	cmp	r4, r3
     912:	d2fa      	bcs.n	90a <adc_async_init+0x58>
	descr->channel_map    = channel_map;
     914:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     916:	2324      	movs	r3, #36	; 0x24
     918:	54fc      	strb	r4, [r7, r3]
	descr->channel_amount = channel_amount;
     91a:	3301      	adds	r3, #1
     91c:	54fd      	strb	r5, [r7, r3]
	descr->descr_ch       = descr_ch;
     91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     920:	62bb      	str	r3, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     922:	9901      	ldr	r1, [sp, #4]
     924:	0038      	movs	r0, r7
     926:	f241 3387 	movw	r3, #4999	; 0x1387
     92a:	f2c0 0300 	movt	r3, #0
     92e:	4798      	blx	r3
	if (init_status) {
     930:	b970      	cbnz	r0, 950 <adc_async_init+0x9e>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     932:	f640 034d 	movw	r3, #2125	; 0x84d
     936:	f2c0 0300 	movt	r3, #0
     93a:	60bb      	str	r3, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     93c:	f640 0339 	movw	r3, #2105	; 0x839
     940:	f2c0 0300 	movt	r3, #0
     944:	603b      	str	r3, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     946:	f640 0343 	movw	r3, #2115	; 0x843
     94a:	f2c0 0300 	movt	r3, #0
     94e:	607b      	str	r3, [r7, #4]
}
     950:	b003      	add	sp, #12
     952:	bc0c      	pop	{r2, r3}
     954:	4691      	mov	r9, r2
     956:	469a      	mov	sl, r3
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     95a:	2000      	movs	r0, #0
     95c:	e7bf      	b.n	8de <adc_async_init+0x2c>
     95e:	2000      	movs	r0, #0
     960:	e7bd      	b.n	8de <adc_async_init+0x2c>
     962:	2000      	movs	r0, #0
     964:	e7bb      	b.n	8de <adc_async_init+0x2c>

00000966 <adc_async_register_channel_buffer>:
{
     966:	b5f0      	push	{r4, r5, r6, r7, lr}
     968:	b083      	sub	sp, #12
     96a:	0007      	movs	r7, r0
     96c:	000c      	movs	r4, r1
     96e:	9200      	str	r2, [sp, #0]
     970:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     972:	b300      	cbz	r0, 9b6 <adc_async_register_channel_buffer+0x50>
     974:	b30a      	cbz	r2, 9ba <adc_async_register_channel_buffer+0x54>
     976:	0018      	movs	r0, r3
     978:	1e43      	subs	r3, r0, #1
     97a:	4198      	sbcs	r0, r3
     97c:	f243 0568 	movw	r5, #12392	; 0x3068
     980:	f2c0 0500 	movt	r5, #0
     984:	2266      	movs	r2, #102	; 0x66
     986:	0029      	movs	r1, r5
     988:	f241 067b 	movw	r6, #4219	; 0x107b
     98c:	f2c0 0600 	movt	r6, #0
     990:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     992:	2324      	movs	r3, #36	; 0x24
     994:	5cfb      	ldrb	r3, [r7, r3]
     996:	2000      	movs	r0, #0
     998:	42a3      	cmp	r3, r4
     99a:	4140      	adcs	r0, r0
     99c:	b2c0      	uxtb	r0, r0
     99e:	2267      	movs	r2, #103	; 0x67
     9a0:	0029      	movs	r1, r5
     9a2:	47b0      	blx	r6
	if (descr->channel_map[channel] != 0xFF) {
     9a4:	6a39      	ldr	r1, [r7, #32]
     9a6:	5d0b      	ldrb	r3, [r1, r4]
     9a8:	2bff      	cmp	r3, #255	; 0xff
     9aa:	d12c      	bne.n	a06 <adc_async_register_channel_buffer+0xa0>
	for (i = 0; i <= descr->channel_max; i++) {
     9ac:	3bdb      	subs	r3, #219	; 0xdb
     9ae:	5cf8      	ldrb	r0, [r7, r3]
     9b0:	2600      	movs	r6, #0
     9b2:	2300      	movs	r3, #0
     9b4:	e007      	b.n	9c6 <adc_async_register_channel_buffer+0x60>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     9b6:	2000      	movs	r0, #0
     9b8:	e7e0      	b.n	97c <adc_async_register_channel_buffer+0x16>
     9ba:	2000      	movs	r0, #0
     9bc:	e7de      	b.n	97c <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
     9be:	3301      	adds	r3, #1
     9c0:	b2db      	uxtb	r3, r3
     9c2:	4283      	cmp	r3, r0
     9c4:	d805      	bhi.n	9d2 <adc_async_register_channel_buffer+0x6c>
		if (descr->channel_map[i] != 0xFF) {
     9c6:	5cca      	ldrb	r2, [r1, r3]
     9c8:	2aff      	cmp	r2, #255	; 0xff
     9ca:	d0f8      	beq.n	9be <adc_async_register_channel_buffer+0x58>
			index++;
     9cc:	3601      	adds	r6, #1
     9ce:	b2f6      	uxtb	r6, r6
     9d0:	e7f5      	b.n	9be <adc_async_register_channel_buffer+0x58>
	if (index > descr->channel_amount) {
     9d2:	2325      	movs	r3, #37	; 0x25
     9d4:	5cfb      	ldrb	r3, [r7, r3]
     9d6:	42b3      	cmp	r3, r6
     9d8:	d318      	bcc.n	a0c <adc_async_register_channel_buffer+0xa6>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     9da:	0073      	lsls	r3, r6, #1
     9dc:	199b      	adds	r3, r3, r6
     9de:	00dd      	lsls	r5, r3, #3
     9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9e2:	1958      	adds	r0, r3, r5
     9e4:	3004      	adds	r0, #4
     9e6:	9a01      	ldr	r2, [sp, #4]
     9e8:	9900      	ldr	r1, [sp, #0]
     9ea:	f241 03e7 	movw	r3, #4327	; 0x10e7
     9ee:	f2c0 0300 	movt	r3, #0
     9f2:	4798      	blx	r3
     9f4:	b968      	cbnz	r0, a12 <adc_async_register_channel_buffer+0xac>
	descr->channel_map[channel]            = index;
     9f6:	6a3b      	ldr	r3, [r7, #32]
     9f8:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9fc:	195b      	adds	r3, r3, r5
     9fe:	2200      	movs	r2, #0
     a00:	829a      	strh	r2, [r3, #20]
}
     a02:	b003      	add	sp, #12
     a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     a06:	200d      	movs	r0, #13
     a08:	4240      	negs	r0, r0
     a0a:	e7fa      	b.n	a02 <adc_async_register_channel_buffer+0x9c>
		return ERR_NO_RESOURCE;
     a0c:	201c      	movs	r0, #28
     a0e:	4240      	negs	r0, r0
     a10:	e7f7      	b.n	a02 <adc_async_register_channel_buffer+0x9c>
		return ERR_INVALID_ARG;
     a12:	200d      	movs	r0, #13
     a14:	4240      	negs	r0, r0
     a16:	e7f4      	b.n	a02 <adc_async_register_channel_buffer+0x9c>

00000a18 <adc_async_enable_channel>:
{
     a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a1a:	0007      	movs	r7, r0
     a1c:	000c      	movs	r4, r1
	ASSERT(descr);
     a1e:	f243 0668 	movw	r6, #12392	; 0x3068
     a22:	f2c0 0600 	movt	r6, #0
     a26:	1e43      	subs	r3, r0, #1
     a28:	4198      	sbcs	r0, r3
     a2a:	b2c0      	uxtb	r0, r0
     a2c:	2283      	movs	r2, #131	; 0x83
     a2e:	0031      	movs	r1, r6
     a30:	f241 057b 	movw	r5, #4219	; 0x107b
     a34:	f2c0 0500 	movt	r5, #0
     a38:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     a3a:	2324      	movs	r3, #36	; 0x24
     a3c:	5cfb      	ldrb	r3, [r7, r3]
     a3e:	2000      	movs	r0, #0
     a40:	42a3      	cmp	r3, r4
     a42:	4140      	adcs	r0, r0
     a44:	b2c0      	uxtb	r0, r0
     a46:	2284      	movs	r2, #132	; 0x84
     a48:	0031      	movs	r1, r6
     a4a:	47a8      	blx	r5
	_adc_async_enable_channel(&descr->device, channel);
     a4c:	0021      	movs	r1, r4
     a4e:	0038      	movs	r0, r7
     a50:	f241 430f 	movw	r3, #5135	; 0x140f
     a54:	f2c0 0300 	movt	r3, #0
     a58:	4798      	blx	r3
}
     a5a:	2000      	movs	r0, #0
     a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a5e <adc_async_start_conversion>:
{
     a5e:	b510      	push	{r4, lr}
     a60:	0004      	movs	r4, r0
	ASSERT(descr);
     a62:	f243 0168 	movw	r1, #12392	; 0x3068
     a66:	f2c0 0100 	movt	r1, #0
     a6a:	1e43      	subs	r3, r0, #1
     a6c:	4198      	sbcs	r0, r3
     a6e:	b2c0      	uxtb	r0, r0
     a70:	22d6      	movs	r2, #214	; 0xd6
     a72:	f241 037b 	movw	r3, #4219	; 0x107b
     a76:	f2c0 0300 	movt	r3, #0
     a7a:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     a7c:	0020      	movs	r0, r4
     a7e:	f241 4335 	movw	r3, #5173	; 0x1435
     a82:	f2c0 0300 	movt	r3, #0
     a86:	4798      	blx	r3
}
     a88:	2000      	movs	r0, #0
     a8a:	bd10      	pop	{r4, pc}

00000a8c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     a8c:	b510      	push	{r4, lr}
	return _event_system_init();
     a8e:	f641 33c7 	movw	r3, #7111	; 0x1bc7
     a92:	f2c0 0300 	movt	r3, #0
     a96:	4798      	blx	r3
}
     a98:	bd10      	pop	{r4, pc}

00000a9a <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     a9a:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     a9c:	f240 0340 	movw	r3, #64	; 0x40
     aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     aa4:	685c      	ldr	r4, [r3, #4]
     aa6:	42a0      	cmp	r0, r4
     aa8:	d00d      	beq.n	ac6 <process_ext_irq+0x2c>
     aaa:	2201      	movs	r2, #1
     aac:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     aae:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     ab0:	25ff      	movs	r5, #255	; 0xff
     ab2:	e003      	b.n	abc <process_ext_irq+0x22>
     ab4:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     ab6:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     ab8:	085b      	lsrs	r3, r3, #1
     aba:	b95b      	cbnz	r3, ad4 <process_ext_irq+0x3a>
		if (ext_irqs[middle].pin < pin) {
     abc:	42a0      	cmp	r0, r4
     abe:	d9f9      	bls.n	ab4 <process_ext_irq+0x1a>
	while (upper >= lower) {
     ac0:	b142      	cbz	r2, ad4 <process_ext_irq+0x3a>
			lower = middle + 1;
     ac2:	0031      	movs	r1, r6
     ac4:	e7f7      	b.n	ab6 <process_ext_irq+0x1c>
			if (ext_irqs[middle].cb) {
     ac6:	f240 0340 	movw	r3, #64	; 0x40
     aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	b103      	cbz	r3, ad4 <process_ext_irq+0x3a>
				ext_irqs[middle].cb();
     ad2:	4798      	blx	r3
		}
	}
}
     ad4:	bd70      	pop	{r4, r5, r6, pc}

00000ad6 <ext_irq_init>:
{
     ad6:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     ad8:	f240 0340 	movw	r3, #64	; 0x40
     adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ae0:	2201      	movs	r2, #1
     ae2:	4252      	negs	r2, r2
     ae4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     ae6:	2200      	movs	r2, #0
     ae8:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     aea:	f640 209b 	movw	r0, #2715	; 0xa9b
     aee:	f2c0 0000 	movt	r0, #0
     af2:	f641 139b 	movw	r3, #6555	; 0x199b
     af6:	f2c0 0300 	movt	r3, #0
     afa:	4798      	blx	r3
}
     afc:	bd10      	pop	{r4, pc}

00000afe <ext_irq_register>:
{
     afe:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     b00:	f240 0340 	movw	r3, #64	; 0x40
     b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b08:	685b      	ldr	r3, [r3, #4]
     b0a:	4298      	cmp	r0, r3
     b0c:	d009      	beq.n	b22 <ext_irq_register+0x24>
	if (NULL == cb) {
     b0e:	b309      	cbz	r1, b54 <ext_irq_register+0x56>
			if (NULL == ext_irqs[i].cb) {
     b10:	f240 0340 	movw	r3, #64	; 0x40
     b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	b173      	cbz	r3, b3a <ext_irq_register+0x3c>
		return ERR_INVALID_ARG;
     b1c:	200d      	movs	r0, #13
     b1e:	4240      	negs	r0, r0
     b20:	e017      	b.n	b52 <ext_irq_register+0x54>
			ext_irqs[i].cb = cb;
     b22:	f240 0340 	movw	r3, #64	; 0x40
     b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b2a:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     b2c:	b959      	cbnz	r1, b46 <ext_irq_register+0x48>
		return _ext_irq_enable(pin, false);
     b2e:	f641 23a3 	movw	r3, #6819	; 0x1aa3
     b32:	f2c0 0300 	movt	r3, #0
     b36:	4798      	blx	r3
     b38:	e00b      	b.n	b52 <ext_irq_register+0x54>
				ext_irqs[i].cb  = cb;
     b3a:	f240 0340 	movw	r3, #64	; 0x40
     b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b42:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     b44:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     b46:	2101      	movs	r1, #1
     b48:	f641 23a3 	movw	r3, #6819	; 0x1aa3
     b4c:	f2c0 0300 	movt	r3, #0
     b50:	4798      	blx	r3
}
     b52:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     b54:	200d      	movs	r0, #13
     b56:	4240      	negs	r0, r0
     b58:	e7fb      	b.n	b52 <ext_irq_register+0x54>
	...

00000b5c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     b5c:	b510      	push	{r4, lr}
     b5e:	b084      	sub	sp, #16
     b60:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     b62:	ab01      	add	r3, sp, #4
     b64:	3814      	subs	r0, #20
     b66:	8b82      	ldrh	r2, [r0, #28]
     b68:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     b6a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     b6c:	4a06      	ldr	r2, [pc, #24]	; (b88 <i2c_m_sync_write+0x2c>)
     b6e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     b70:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b72:	0019      	movs	r1, r3
     b74:	f242 03d1 	movw	r3, #8401	; 0x20d1
     b78:	f2c0 0300 	movt	r3, #0
     b7c:	4798      	blx	r3

	if (ret) {
     b7e:	b900      	cbnz	r0, b82 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
     b80:	0020      	movs	r0, r4
}
     b82:	b004      	add	sp, #16
     b84:	bd10      	pop	{r4, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	ffff8000 	.word	0xffff8000

00000b8c <i2c_m_sync_read>:
{
     b8c:	b510      	push	{r4, lr}
     b8e:	b084      	sub	sp, #16
     b90:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     b92:	ab01      	add	r3, sp, #4
     b94:	3814      	subs	r0, #20
     b96:	8b82      	ldrh	r2, [r0, #28]
     b98:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     b9a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     b9c:	4a06      	ldr	r2, [pc, #24]	; (bb8 <i2c_m_sync_read+0x2c>)
     b9e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     ba0:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ba2:	0019      	movs	r1, r3
     ba4:	f242 03d1 	movw	r3, #8401	; 0x20d1
     ba8:	f2c0 0300 	movt	r3, #0
     bac:	4798      	blx	r3
	if (ret) {
     bae:	b900      	cbnz	r0, bb2 <i2c_m_sync_read+0x26>
	return n;
     bb0:	0020      	movs	r0, r4
}
     bb2:	b004      	add	sp, #16
     bb4:	bd10      	pop	{r4, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	ffff8001 	.word	0xffff8001

00000bbc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	0004      	movs	r4, r0
     bc0:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     bc2:	f243 0184 	movw	r1, #12420	; 0x3084
     bc6:	f2c0 0100 	movt	r1, #0
     bca:	1e43      	subs	r3, r0, #1
     bcc:	4198      	sbcs	r0, r3
     bce:	b2c0      	uxtb	r0, r0
     bd0:	225e      	movs	r2, #94	; 0x5e
     bd2:	f241 037b 	movw	r3, #4219	; 0x107b
     bd6:	f2c0 0300 	movt	r3, #0
     bda:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     bdc:	0029      	movs	r1, r5
     bde:	0020      	movs	r0, r4
     be0:	f242 039b 	movw	r3, #8347	; 0x209b
     be4:	f2c0 0300 	movt	r3, #0
     be8:	4798      	blx	r3
	if (init_status) {
     bea:	b948      	cbnz	r0, c00 <i2c_m_sync_init+0x44>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     bec:	f640 338d 	movw	r3, #2957	; 0xb8d
     bf0:	f2c0 0300 	movt	r3, #0
     bf4:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     bf6:	f640 335d 	movw	r3, #2909	; 0xb5d
     bfa:	f2c0 0300 	movt	r3, #0
     bfe:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     c00:	bd70      	pop	{r4, r5, r6, pc}

00000c02 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     c02:	b570      	push	{r4, r5, r6, lr}
     c04:	0006      	movs	r6, r0
     c06:	000c      	movs	r4, r1
     c08:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     c0a:	b198      	cbz	r0, c34 <io_write+0x32>
     c0c:	0008      	movs	r0, r1
     c0e:	1e43      	subs	r3, r0, #1
     c10:	4198      	sbcs	r0, r3
     c12:	b2c0      	uxtb	r0, r0
     c14:	f243 01a0 	movw	r1, #12448	; 0x30a0
     c18:	f2c0 0100 	movt	r1, #0
     c1c:	2234      	movs	r2, #52	; 0x34
     c1e:	f241 037b 	movw	r3, #4219	; 0x107b
     c22:	f2c0 0300 	movt	r3, #0
     c26:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     c28:	6833      	ldr	r3, [r6, #0]
     c2a:	002a      	movs	r2, r5
     c2c:	0021      	movs	r1, r4
     c2e:	0030      	movs	r0, r6
     c30:	4798      	blx	r3
}
     c32:	bd70      	pop	{r4, r5, r6, pc}
     c34:	2000      	movs	r0, #0
     c36:	e7ed      	b.n	c14 <io_write+0x12>

00000c38 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	0004      	movs	r4, r0
     c3c:	000d      	movs	r5, r1
	ASSERT(desc);
     c3e:	f243 01b4 	movw	r1, #12468	; 0x30b4
     c42:	f2c0 0100 	movt	r1, #0
     c46:	1e43      	subs	r3, r0, #1
     c48:	4198      	sbcs	r0, r3
     c4a:	b2c0      	uxtb	r0, r0
     c4c:	2229      	movs	r2, #41	; 0x29
     c4e:	f241 037b 	movw	r3, #4219	; 0x107b
     c52:	f2c0 0300 	movt	r3, #0
     c56:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
     c58:	0029      	movs	r1, r5
     c5a:	0020      	movs	r0, r4
     c5c:	f642 23db 	movw	r3, #10971	; 0x2adb
     c60:	f2c0 0300 	movt	r3, #0
     c64:	4798      	blx	r3
}
     c66:	bd70      	pop	{r4, r5, r6, pc}

00000c68 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     c68:	b570      	push	{r4, r5, r6, lr}
     c6a:	0004      	movs	r4, r0
     c6c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     c6e:	b328      	cbz	r0, cbc <spi_m_sync_init+0x54>
     c70:	0008      	movs	r0, r1
     c72:	1e43      	subs	r3, r0, #1
     c74:	4198      	sbcs	r0, r3
     c76:	b2c0      	uxtb	r0, r0
     c78:	f243 01d0 	movw	r1, #12496	; 0x30d0
     c7c:	f2c0 0100 	movt	r1, #0
     c80:	2240      	movs	r2, #64	; 0x40
     c82:	f241 037b 	movw	r3, #4219	; 0x107b
     c86:	f2c0 0300 	movt	r3, #0
     c8a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c8c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     c8e:	1d20      	adds	r0, r4, #4
     c90:	0029      	movs	r1, r5
     c92:	f242 6305 	movw	r3, #9733	; 0x2605
     c96:	f2c0 0300 	movt	r3, #0
     c9a:	4798      	blx	r3

	if (rc < 0) {
     c9c:	2800      	cmp	r0, #0
     c9e:	db0c      	blt.n	cba <spi_m_sync_init+0x52>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     ca0:	4b07      	ldr	r3, [pc, #28]	; (cc0 <spi_m_sync_init+0x58>)
     ca2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     ca4:	f640 537b 	movw	r3, #3451	; 0xd7b
     ca8:	f2c0 0300 	movt	r3, #0
     cac:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     cae:	f640 533b 	movw	r3, #3387	; 0xd3b
     cb2:	f2c0 0300 	movt	r3, #0
     cb6:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     cb8:	2000      	movs	r0, #0
}
     cba:	bd70      	pop	{r4, r5, r6, pc}
     cbc:	2000      	movs	r0, #0
     cbe:	e7db      	b.n	c78 <spi_m_sync_init+0x10>
     cc0:	ffff8000 	.word	0xffff8000

00000cc4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     cc4:	b510      	push	{r4, lr}
     cc6:	0004      	movs	r4, r0
	ASSERT(spi);
     cc8:	f243 01d0 	movw	r1, #12496	; 0x30d0
     ccc:	f2c0 0100 	movt	r1, #0
     cd0:	1e43      	subs	r3, r0, #1
     cd2:	4198      	sbcs	r0, r3
     cd4:	b2c0      	uxtb	r0, r0
     cd6:	2257      	movs	r2, #87	; 0x57
     cd8:	f241 037b 	movw	r3, #4219	; 0x107b
     cdc:	f2c0 0300 	movt	r3, #0
     ce0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     ce2:	1d20      	adds	r0, r4, #4
     ce4:	f242 732d 	movw	r3, #10029	; 0x272d
     ce8:	f2c0 0300 	movt	r3, #0
     cec:	4798      	blx	r3
}
     cee:	bd10      	pop	{r4, pc}

00000cf0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     cf0:	b530      	push	{r4, r5, lr}
     cf2:	b087      	sub	sp, #28
     cf4:	0004      	movs	r4, r0
     cf6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     cf8:	b1e8      	cbz	r0, d36 <spi_m_sync_transfer+0x46>
     cfa:	0008      	movs	r0, r1
     cfc:	1e43      	subs	r3, r0, #1
     cfe:	4198      	sbcs	r0, r3
     d00:	b2c0      	uxtb	r0, r0
     d02:	f243 01d0 	movw	r1, #12496	; 0x30d0
     d06:	f2c0 0100 	movt	r1, #0
     d0a:	22b3      	movs	r2, #179	; 0xb3
     d0c:	f241 037b 	movw	r3, #4219	; 0x107b
     d10:	f2c0 0300 	movt	r3, #0
     d14:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     d16:	682b      	ldr	r3, [r5, #0]
     d18:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     d1a:	686b      	ldr	r3, [r5, #4]
     d1c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     d1e:	68ab      	ldr	r3, [r5, #8]
     d20:	9301      	str	r3, [sp, #4]
     d22:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     d24:	1d20      	adds	r0, r4, #4
     d26:	a903      	add	r1, sp, #12
     d28:	f242 7363 	movw	r3, #10083	; 0x2763
     d2c:	f2c0 0300 	movt	r3, #0
     d30:	4798      	blx	r3
}
     d32:	b007      	add	sp, #28
     d34:	bd30      	pop	{r4, r5, pc}
     d36:	2000      	movs	r0, #0
     d38:	e7e3      	b.n	d02 <spi_m_sync_transfer+0x12>

00000d3a <_spi_m_sync_io_write>:
{
     d3a:	b570      	push	{r4, r5, r6, lr}
     d3c:	b084      	sub	sp, #16
     d3e:	0004      	movs	r4, r0
     d40:	000e      	movs	r6, r1
     d42:	0015      	movs	r5, r2
	ASSERT(io);
     d44:	f243 01d0 	movw	r1, #12496	; 0x30d0
     d48:	f2c0 0100 	movt	r1, #0
     d4c:	1e43      	subs	r3, r0, #1
     d4e:	4198      	sbcs	r0, r3
     d50:	b2c0      	uxtb	r0, r0
     d52:	22a3      	movs	r2, #163	; 0xa3
     d54:	f241 037b 	movw	r3, #4219	; 0x107b
     d58:	f2c0 0300 	movt	r3, #0
     d5c:	4798      	blx	r3
	xfer.rxbuf = 0;
     d5e:	2300      	movs	r3, #0
     d60:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     d62:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     d64:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     d66:	0020      	movs	r0, r4
     d68:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     d6a:	a901      	add	r1, sp, #4
     d6c:	f640 43f1 	movw	r3, #3313	; 0xcf1
     d70:	f2c0 0300 	movt	r3, #0
     d74:	4798      	blx	r3
}
     d76:	b004      	add	sp, #16
     d78:	bd70      	pop	{r4, r5, r6, pc}

00000d7a <_spi_m_sync_io_read>:
{
     d7a:	b570      	push	{r4, r5, r6, lr}
     d7c:	b084      	sub	sp, #16
     d7e:	0004      	movs	r4, r0
     d80:	000e      	movs	r6, r1
     d82:	0015      	movs	r5, r2
	ASSERT(io);
     d84:	f243 01d0 	movw	r1, #12496	; 0x30d0
     d88:	f2c0 0100 	movt	r1, #0
     d8c:	1e43      	subs	r3, r0, #1
     d8e:	4198      	sbcs	r0, r3
     d90:	b2c0      	uxtb	r0, r0
     d92:	2287      	movs	r2, #135	; 0x87
     d94:	f241 037b 	movw	r3, #4219	; 0x107b
     d98:	f2c0 0300 	movt	r3, #0
     d9c:	4798      	blx	r3
	xfer.rxbuf = buf;
     d9e:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     da0:	2300      	movs	r3, #0
     da2:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     da4:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     da6:	0020      	movs	r0, r4
     da8:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     daa:	a901      	add	r1, sp, #4
     dac:	f640 43f1 	movw	r3, #3313	; 0xcf1
     db0:	f2c0 0300 	movt	r3, #0
     db4:	4798      	blx	r3
}
     db6:	b004      	add	sp, #16
     db8:	bd70      	pop	{r4, r5, r6, pc}

00000dba <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     dba:	b570      	push	{r4, r5, r6, lr}
     dbc:	0004      	movs	r4, r0
     dbe:	000d      	movs	r5, r1
	ASSERT(spi && io);
     dc0:	b188      	cbz	r0, de6 <spi_m_sync_get_io_descriptor+0x2c>
     dc2:	0008      	movs	r0, r1
     dc4:	1e43      	subs	r3, r0, #1
     dc6:	4198      	sbcs	r0, r3
     dc8:	b2c0      	uxtb	r0, r0
     dca:	f243 01d0 	movw	r1, #12496	; 0x30d0
     dce:	f2c0 0100 	movt	r1, #0
     dd2:	22bd      	movs	r2, #189	; 0xbd
     dd4:	f241 037b 	movw	r3, #4219	; 0x107b
     dd8:	f2c0 0300 	movt	r3, #0
     ddc:	4798      	blx	r3
	*io = &spi->io;
     dde:	340c      	adds	r4, #12
     de0:	602c      	str	r4, [r5, #0]
	return 0;
}
     de2:	2000      	movs	r0, #0
     de4:	bd70      	pop	{r4, r5, r6, pc}
     de6:	2000      	movs	r0, #0
     de8:	e7ef      	b.n	dca <spi_m_sync_get_io_descriptor+0x10>

00000dea <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dec:	46ce      	mov	lr, r9
     dee:	4647      	mov	r7, r8
     df0:	b580      	push	{r7, lr}
     df2:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     df4:	6803      	ldr	r3, [r0, #0]
     df6:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     df8:	b12b      	cbz	r3, e06 <timer_add_timer_task+0x1c>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     dfa:	688e      	ldr	r6, [r1, #8]
     dfc:	001c      	movs	r4, r3
     dfe:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e00:	2701      	movs	r7, #1
     e02:	1abf      	subs	r7, r7, r2
     e04:	e00f      	b.n	e26 <timer_add_timer_task+0x3c>
		list_insert_as_head(list, new_task);
     e06:	f241 03a1 	movw	r3, #4257	; 0x10a1
     e0a:	f2c0 0300 	movt	r3, #0
     e0e:	4798      	blx	r3
		return;
     e10:	e01a      	b.n	e48 <timer_add_timer_task+0x5e>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e12:	18fb      	adds	r3, r7, r3
     e14:	68a0      	ldr	r0, [r4, #8]
     e16:	4680      	mov	r8, r0
     e18:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     e1a:	42b3      	cmp	r3, r6
     e1c:	d20b      	bcs.n	e36 <timer_add_timer_task+0x4c>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     e1e:	6823      	ldr	r3, [r4, #0]
     e20:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e22:	b15b      	cbz	r3, e3c <timer_add_timer_task+0x52>
     e24:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     e26:	6863      	ldr	r3, [r4, #4]
     e28:	4293      	cmp	r3, r2
     e2a:	d8f2      	bhi.n	e12 <timer_add_timer_task+0x28>
			time_left = it->interval - (time - it->time_label);
     e2c:	68a0      	ldr	r0, [r4, #8]
     e2e:	4680      	mov	r8, r0
     e30:	4443      	add	r3, r8
     e32:	1a9b      	subs	r3, r3, r2
     e34:	e7f1      	b.n	e1a <timer_add_timer_task+0x30>
			break;
		prev = it;
	}

	if (it == head) {
     e36:	45a4      	cmp	ip, r4
     e38:	d00a      	beq.n	e50 <timer_add_timer_task+0x66>
     e3a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     e3c:	0020      	movs	r0, r4
     e3e:	f241 03d3 	movw	r3, #4307	; 0x10d3
     e42:	f2c0 0300 	movt	r3, #0
     e46:	4798      	blx	r3
	}
}
     e48:	bc0c      	pop	{r2, r3}
     e4a:	4690      	mov	r8, r2
     e4c:	4699      	mov	r9, r3
     e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     e50:	4648      	mov	r0, r9
     e52:	f241 03a1 	movw	r3, #4257	; 0x10a1
     e56:	f2c0 0300 	movt	r3, #0
     e5a:	4798      	blx	r3
     e5c:	e7f4      	b.n	e48 <timer_add_timer_task+0x5e>

00000e5e <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
     e60:	46d6      	mov	lr, sl
     e62:	4647      	mov	r7, r8
     e64:	b580      	push	{r7, lr}
     e66:	b083      	sub	sp, #12
     e68:	0007      	movs	r7, r0
	return (void *)list->head;
     e6a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     e6c:	6903      	ldr	r3, [r0, #16]
     e6e:	3301      	adds	r3, #1
     e70:	4698      	mov	r8, r3
     e72:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e74:	7e03      	ldrb	r3, [r0, #24]
     e76:	07db      	lsls	r3, r3, #31
     e78:	d417      	bmi.n	eaa <timer_process_counted+0x4c>
     e7a:	7e03      	ldrb	r3, [r0, #24]
     e7c:	079b      	lsls	r3, r3, #30
     e7e:	d414      	bmi.n	eaa <timer_process_counted+0x4c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     e80:	b1bc      	cbz	r4, eb2 <timer_process_counted+0x54>
     e82:	4643      	mov	r3, r8
     e84:	6862      	ldr	r2, [r4, #4]
     e86:	1a9b      	subs	r3, r3, r2
     e88:	68a2      	ldr	r2, [r4, #8]
     e8a:	4293      	cmp	r3, r2
     e8c:	d311      	bcc.n	eb2 <timer_process_counted+0x54>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     e8e:	f240 0c14 	movw	ip, #20
     e92:	4484      	add	ip, r0
     e94:	4663      	mov	r3, ip
     e96:	9301      	str	r3, [sp, #4]
     e98:	f241 06db 	movw	r6, #4315	; 0x10db
     e9c:	f2c0 0600 	movt	r6, #0
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     ea0:	f640 5aeb 	movw	sl, #3563	; 0xdeb
     ea4:	f2c0 0a00 	movt	sl, #0
     ea8:	e015      	b.n	ed6 <timer_process_counted+0x78>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     eaa:	7e3b      	ldrb	r3, [r7, #24]
     eac:	2202      	movs	r2, #2
     eae:	4313      	orrs	r3, r2
     eb0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     eb2:	b003      	add	sp, #12
     eb4:	bc0c      	pop	{r2, r3}
     eb6:	4690      	mov	r8, r2
     eb8:	469a      	mov	sl, r3
     eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ebc:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     ebe:	68e3      	ldr	r3, [r4, #12]
     ec0:	0020      	movs	r0, r4
     ec2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ec4:	2d00      	cmp	r5, #0
     ec6:	d0f4      	beq.n	eb2 <timer_process_counted+0x54>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ec8:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     eca:	4643      	mov	r3, r8
     ecc:	686a      	ldr	r2, [r5, #4]
     ece:	1a9b      	subs	r3, r3, r2
     ed0:	68aa      	ldr	r2, [r5, #8]
     ed2:	4293      	cmp	r3, r2
     ed4:	d3ed      	bcc.n	eb2 <timer_process_counted+0x54>
		list_remove_head(&timer->tasks);
     ed6:	9801      	ldr	r0, [sp, #4]
     ed8:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     eda:	7c23      	ldrb	r3, [r4, #16]
     edc:	2b01      	cmp	r3, #1
     ede:	d1ed      	bne.n	ebc <timer_process_counted+0x5e>
			tmp->time_label = time;
     ee0:	4643      	mov	r3, r8
     ee2:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     ee4:	4642      	mov	r2, r8
     ee6:	0021      	movs	r1, r4
     ee8:	9801      	ldr	r0, [sp, #4]
     eea:	47d0      	blx	sl
     eec:	e7e6      	b.n	ebc <timer_process_counted+0x5e>

00000eee <timer_init>:
{
     eee:	b570      	push	{r4, r5, r6, lr}
     ef0:	0005      	movs	r5, r0
     ef2:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     ef4:	b1e8      	cbz	r0, f32 <timer_init+0x44>
     ef6:	0008      	movs	r0, r1
     ef8:	1e43      	subs	r3, r0, #1
     efa:	4198      	sbcs	r0, r3
     efc:	b2c0      	uxtb	r0, r0
     efe:	f243 01ec 	movw	r1, #12524	; 0x30ec
     f02:	f2c0 0100 	movt	r1, #0
     f06:	223b      	movs	r2, #59	; 0x3b
     f08:	f241 037b 	movw	r3, #4219	; 0x107b
     f0c:	f2c0 0300 	movt	r3, #0
     f10:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     f12:	0021      	movs	r1, r4
     f14:	0028      	movs	r0, r5
     f16:	f642 03a1 	movw	r3, #10401	; 0x28a1
     f1a:	f2c0 0300 	movt	r3, #0
     f1e:	4798      	blx	r3
	descr->time                           = 0;
     f20:	2300      	movs	r3, #0
     f22:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     f24:	f640 635f 	movw	r3, #3679	; 0xe5f
     f28:	f2c0 0300 	movt	r3, #0
     f2c:	602b      	str	r3, [r5, #0]
}
     f2e:	2000      	movs	r0, #0
     f30:	bd70      	pop	{r4, r5, r6, pc}
     f32:	2000      	movs	r0, #0
     f34:	e7e3      	b.n	efe <timer_init+0x10>

00000f36 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f38:	46ce      	mov	lr, r9
     f3a:	4647      	mov	r7, r8
     f3c:	b580      	push	{r7, lr}
     f3e:	0004      	movs	r4, r0
     f40:	000f      	movs	r7, r1
     f42:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     f44:	2800      	cmp	r0, #0
     f46:	d037      	beq.n	fb8 <usart_sync_write+0x82>
     f48:	2900      	cmp	r1, #0
     f4a:	d037      	beq.n	fbc <usart_sync_write+0x86>
     f4c:	0010      	movs	r0, r2
     f4e:	1e43      	subs	r3, r0, #1
     f50:	4198      	sbcs	r0, r3
     f52:	f243 1104 	movw	r1, #12548	; 0x3104
     f56:	f2c0 0100 	movt	r1, #0
     f5a:	22f1      	movs	r2, #241	; 0xf1
     f5c:	f241 037b 	movw	r3, #4219	; 0x107b
     f60:	f2c0 0300 	movt	r3, #0
     f64:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     f66:	3408      	adds	r4, #8
     f68:	f242 057d 	movw	r5, #8317	; 0x207d
     f6c:	f2c0 0500 	movt	r5, #0
     f70:	0020      	movs	r0, r4
     f72:	47a8      	blx	r5
     f74:	2800      	cmp	r0, #0
     f76:	d0fb      	beq.n	f70 <usart_sync_write+0x3a>
     f78:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f7a:	f242 096d 	movw	r9, #8301	; 0x206d
     f7e:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f82:	f242 057d 	movw	r5, #8317	; 0x207d
     f86:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f8a:	5db9      	ldrb	r1, [r7, r6]
     f8c:	0020      	movs	r0, r4
     f8e:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f90:	0020      	movs	r0, r4
     f92:	47a8      	blx	r5
     f94:	2800      	cmp	r0, #0
     f96:	d0fb      	beq.n	f90 <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     f98:	3601      	adds	r6, #1
     f9a:	4546      	cmp	r6, r8
     f9c:	d3f5      	bcc.n	f8a <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     f9e:	f242 0587 	movw	r5, #8327	; 0x2087
     fa2:	f2c0 0500 	movt	r5, #0
     fa6:	0020      	movs	r0, r4
     fa8:	47a8      	blx	r5
     faa:	2800      	cmp	r0, #0
     fac:	d0fb      	beq.n	fa6 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     fae:	0030      	movs	r0, r6
     fb0:	bc0c      	pop	{r2, r3}
     fb2:	4690      	mov	r8, r2
     fb4:	4699      	mov	r9, r3
     fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     fb8:	2000      	movs	r0, #0
     fba:	e7ca      	b.n	f52 <usart_sync_write+0x1c>
     fbc:	2000      	movs	r0, #0
     fbe:	e7c8      	b.n	f52 <usart_sync_write+0x1c>

00000fc0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fc2:	46ce      	mov	lr, r9
     fc4:	4647      	mov	r7, r8
     fc6:	b580      	push	{r7, lr}
     fc8:	0004      	movs	r4, r0
     fca:	4688      	mov	r8, r1
     fcc:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     fce:	b340      	cbz	r0, 1022 <usart_sync_read+0x62>
     fd0:	b349      	cbz	r1, 1026 <usart_sync_read+0x66>
     fd2:	0010      	movs	r0, r2
     fd4:	1e43      	subs	r3, r0, #1
     fd6:	4198      	sbcs	r0, r3
     fd8:	f243 1104 	movw	r1, #12548	; 0x3104
     fdc:	f2c0 0100 	movt	r1, #0
     fe0:	f240 120c 	movw	r2, #268	; 0x10c
     fe4:	f241 037b 	movw	r3, #4219	; 0x107b
     fe8:	f2c0 0300 	movt	r3, #0
     fec:	4798      	blx	r3
	uint32_t                      offset = 0;
     fee:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     ff0:	3408      	adds	r4, #8
     ff2:	f242 0591 	movw	r5, #8337	; 0x2091
     ff6:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ffa:	f242 0775 	movw	r7, #8309	; 0x2075
     ffe:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
    1002:	0020      	movs	r0, r4
    1004:	47a8      	blx	r5
    1006:	2800      	cmp	r0, #0
    1008:	d0fb      	beq.n	1002 <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    100a:	0020      	movs	r0, r4
    100c:	47b8      	blx	r7
    100e:	4643      	mov	r3, r8
    1010:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
    1012:	3601      	adds	r6, #1
    1014:	454e      	cmp	r6, r9
    1016:	d3f4      	bcc.n	1002 <usart_sync_read+0x42>

	return (int32_t)offset;
}
    1018:	0030      	movs	r0, r6
    101a:	bc0c      	pop	{r2, r3}
    101c:	4690      	mov	r8, r2
    101e:	4699      	mov	r9, r3
    1020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1022:	2000      	movs	r0, #0
    1024:	e7d8      	b.n	fd8 <usart_sync_read+0x18>
    1026:	2000      	movs	r0, #0
    1028:	e7d6      	b.n	fd8 <usart_sync_read+0x18>

0000102a <usart_sync_init>:
{
    102a:	b570      	push	{r4, r5, r6, lr}
    102c:	0005      	movs	r5, r0
    102e:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1030:	b308      	cbz	r0, 1076 <usart_sync_init+0x4c>
    1032:	0008      	movs	r0, r1
    1034:	1e43      	subs	r3, r0, #1
    1036:	4198      	sbcs	r0, r3
    1038:	b2c0      	uxtb	r0, r0
    103a:	f243 1104 	movw	r1, #12548	; 0x3104
    103e:	f2c0 0100 	movt	r1, #0
    1042:	2234      	movs	r2, #52	; 0x34
    1044:	f241 037b 	movw	r3, #4219	; 0x107b
    1048:	f2c0 0300 	movt	r3, #0
    104c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    104e:	0028      	movs	r0, r5
    1050:	3008      	adds	r0, #8
    1052:	0021      	movs	r1, r4
    1054:	f242 033d 	movw	r3, #8253	; 0x203d
    1058:	f2c0 0300 	movt	r3, #0
    105c:	4798      	blx	r3
	if (init_status) {
    105e:	b948      	cbnz	r0, 1074 <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
    1060:	f640 73c1 	movw	r3, #4033	; 0xfc1
    1064:	f2c0 0300 	movt	r3, #0
    1068:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    106a:	f640 7337 	movw	r3, #3895	; 0xf37
    106e:	f2c0 0300 	movt	r3, #0
    1072:	602b      	str	r3, [r5, #0]
}
    1074:	bd70      	pop	{r4, r5, r6, pc}
    1076:	2000      	movs	r0, #0
    1078:	e7df      	b.n	103a <usart_sync_init+0x10>

0000107a <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    107a:	b900      	cbnz	r0, 107e <assert+0x4>
		__asm("BKPT #0");
    107c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    107e:	4770      	bx	lr

00001080 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1080:	6803      	ldr	r3, [r0, #0]
    1082:	b14b      	cbz	r3, 1098 <is_list_element+0x18>
		if (it == element) {
    1084:	428b      	cmp	r3, r1
    1086:	d009      	beq.n	109c <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	b11b      	cbz	r3, 1094 <is_list_element+0x14>
		if (it == element) {
    108c:	4299      	cmp	r1, r3
    108e:	d1fb      	bne.n	1088 <is_list_element+0x8>
			return true;
    1090:	2001      	movs	r0, #1
    1092:	e000      	b.n	1096 <is_list_element+0x16>
		}
	}

	return false;
    1094:	2000      	movs	r0, #0
}
    1096:	4770      	bx	lr
	return false;
    1098:	2000      	movs	r0, #0
    109a:	e7fc      	b.n	1096 <is_list_element+0x16>
			return true;
    109c:	2001      	movs	r0, #1
    109e:	e7fa      	b.n	1096 <is_list_element+0x16>

000010a0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    10a0:	b570      	push	{r4, r5, r6, lr}
    10a2:	0004      	movs	r4, r0
    10a4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    10a6:	f241 0381 	movw	r3, #4225	; 0x1081
    10aa:	f2c0 0300 	movt	r3, #0
    10ae:	4798      	blx	r3
    10b0:	f243 1120 	movw	r1, #12576	; 0x3120
    10b4:	f2c0 0100 	movt	r1, #0
    10b8:	2301      	movs	r3, #1
    10ba:	4058      	eors	r0, r3
    10bc:	b2c0      	uxtb	r0, r0
    10be:	2239      	movs	r2, #57	; 0x39
    10c0:	f241 037b 	movw	r3, #4219	; 0x107b
    10c4:	f2c0 0300 	movt	r3, #0
    10c8:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    10ca:	6823      	ldr	r3, [r4, #0]
    10cc:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    10ce:	6025      	str	r5, [r4, #0]
}
    10d0:	bd70      	pop	{r4, r5, r6, pc}

000010d2 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    10d2:	6803      	ldr	r3, [r0, #0]
    10d4:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    10d6:	6001      	str	r1, [r0, #0]
}
    10d8:	4770      	bx	lr

000010da <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    10da:	6803      	ldr	r3, [r0, #0]
    10dc:	b10b      	cbz	r3, 10e2 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    10de:	681a      	ldr	r2, [r3, #0]
    10e0:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    10e2:	0018      	movs	r0, r3
    10e4:	4770      	bx	lr

000010e6 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    10e6:	b570      	push	{r4, r5, r6, lr}
    10e8:	0004      	movs	r4, r0
    10ea:	000e      	movs	r6, r1
    10ec:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    10ee:	b178      	cbz	r0, 1110 <ringbuffer_init+0x2a>
    10f0:	b319      	cbz	r1, 113a <ringbuffer_init+0x54>
    10f2:	2001      	movs	r0, #1
    10f4:	b96a      	cbnz	r2, 1112 <ringbuffer_init+0x2c>
    10f6:	f243 1140 	movw	r1, #12608	; 0x3140
    10fa:	f2c0 0100 	movt	r1, #0
    10fe:	2228      	movs	r2, #40	; 0x28
    1100:	2000      	movs	r0, #0
    1102:	f241 037b 	movw	r3, #4219	; 0x107b
    1106:	f2c0 0300 	movt	r3, #0
    110a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    110c:	1e6b      	subs	r3, r5, #1
    110e:	e00d      	b.n	112c <ringbuffer_init+0x46>
	ASSERT(rb && buf && size);
    1110:	2000      	movs	r0, #0
    1112:	f243 1140 	movw	r1, #12608	; 0x3140
    1116:	f2c0 0100 	movt	r1, #0
    111a:	2228      	movs	r2, #40	; 0x28
    111c:	f241 037b 	movw	r3, #4219	; 0x107b
    1120:	f2c0 0300 	movt	r3, #0
    1124:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1126:	1e6b      	subs	r3, r5, #1
    1128:	422b      	tst	r3, r5
    112a:	d108      	bne.n	113e <ringbuffer_init+0x58>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    112c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    112e:	2300      	movs	r3, #0
    1130:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1132:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1134:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1136:	2000      	movs	r0, #0
}
    1138:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    113a:	2000      	movs	r0, #0
    113c:	e7e9      	b.n	1112 <ringbuffer_init+0x2c>
		return ERR_INVALID_ARG;
    113e:	200d      	movs	r0, #13
    1140:	4240      	negs	r0, r0
    1142:	e7f9      	b.n	1138 <ringbuffer_init+0x52>

00001144 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	0004      	movs	r4, r0
    1148:	000d      	movs	r5, r1
	ASSERT(rb);
    114a:	f243 1140 	movw	r1, #12608	; 0x3140
    114e:	f2c0 0100 	movt	r1, #0
    1152:	1e43      	subs	r3, r0, #1
    1154:	4198      	sbcs	r0, r3
    1156:	b2c0      	uxtb	r0, r0
    1158:	2251      	movs	r2, #81	; 0x51
    115a:	f241 037b 	movw	r3, #4219	; 0x107b
    115e:	f2c0 0300 	movt	r3, #0
    1162:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1164:	6863      	ldr	r3, [r4, #4]
    1166:	68e2      	ldr	r2, [r4, #12]
    1168:	4013      	ands	r3, r2
    116a:	6822      	ldr	r2, [r4, #0]
    116c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    116e:	68e3      	ldr	r3, [r4, #12]
    1170:	6861      	ldr	r1, [r4, #4]
    1172:	68a2      	ldr	r2, [r4, #8]
    1174:	1a9a      	subs	r2, r3, r2
    1176:	428a      	cmp	r2, r1
    1178:	d901      	bls.n	117e <ringbuffer_put+0x3a>
		rb->read_index = rb->write_index - rb->size;
    117a:	1a59      	subs	r1, r3, r1
    117c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    117e:	3301      	adds	r3, #1
    1180:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1182:	2000      	movs	r0, #0
    1184:	bd70      	pop	{r4, r5, r6, pc}

00001186 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1186:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
    1188:	6942      	ldr	r2, [r0, #20]
	return tmp;
}

static inline hri_adc_intflag_reg_t hri_adc_read_INTFLAG_reg(const void *const hw)
{
	return ((Adc *)hw)->INTFLAG.reg;
    118a:	7991      	ldrb	r1, [r2, #6]
	return tmp;
}

static inline hri_adc_intenset_reg_t hri_adc_read_INTEN_reg(const void *const hw)
{
	return ((Adc *)hw)->INTENSET.reg;
    118c:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    118e:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1190:	07d9      	lsls	r1, r3, #31
    1192:	d404      	bmi.n	119e <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1194:	0799      	lsls	r1, r3, #30
    1196:	d40a      	bmi.n	11ae <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    1198:	075b      	lsls	r3, r3, #29
    119a:	d40e      	bmi.n	11ba <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
    119c:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY_Msk;
    119e:	2301      	movs	r3, #1
    11a0:	7193      	strb	r3, [r2, #6]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    11a2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    11a4:	b292      	uxth	r2, r2
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    11a6:	6883      	ldr	r3, [r0, #8]
    11a8:	2100      	movs	r1, #0
    11aa:	4798      	blx	r3
    11ac:	e7f6      	b.n	119c <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN_Msk;
    11ae:	2302      	movs	r3, #2
    11b0:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
    11b2:	6843      	ldr	r3, [r0, #4]
    11b4:	2100      	movs	r1, #0
    11b6:	4798      	blx	r3
    11b8:	e7f0      	b.n	119c <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON_Msk;
    11ba:	2304      	movs	r3, #4
    11bc:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
    11be:	6803      	ldr	r3, [r0, #0]
    11c0:	2100      	movs	r1, #0
    11c2:	4798      	blx	r3
}
    11c4:	e7ea      	b.n	119c <_adc_interrupt_handler+0x16>

000011c6 <_adc_get_regs>:
}
    11c6:	2000      	movs	r0, #0
    11c8:	4770      	bx	lr

000011ca <_adc_init>:
{
    11ca:	b570      	push	{r4, r5, r6, lr}
    11cc:	0004      	movs	r4, r0
    11ce:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    11d0:	f243 1180 	movw	r1, #12672	; 0x3180
    11d4:	f2c0 0100 	movt	r1, #0
    11d8:	f24e 4300 	movw	r3, #58368	; 0xe400
    11dc:	f6cb 53ff 	movt	r3, #48639	; 0xbdff
    11e0:	18c0      	adds	r0, r0, r3
    11e2:	4243      	negs	r3, r0
    11e4:	4158      	adcs	r0, r3
    11e6:	b2c0      	uxtb	r0, r0
    11e8:	22b1      	movs	r2, #177	; 0xb1
    11ea:	f241 037b 	movw	r3, #4219	; 0x107b
    11ee:	f2c0 0300 	movt	r3, #0
    11f2:	4798      	blx	r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    11f4:	8c23      	ldrh	r3, [r4, #32]
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    11f6:	07db      	lsls	r3, r3, #31
    11f8:	d418      	bmi.n	122c <_adc_init+0x62>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11fa:	2203      	movs	r2, #3
    11fc:	8c23      	ldrh	r3, [r4, #32]
    11fe:	4213      	tst	r3, r2
    1200:	d1fc      	bne.n	11fc <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1202:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1204:	079b      	lsls	r3, r3, #30
    1206:	d50b      	bpl.n	1220 <_adc_init+0x56>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE_Msk;
    1208:	7823      	ldrb	r3, [r4, #0]
    120a:	2202      	movs	r2, #2
    120c:	4393      	bics	r3, r2
    120e:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1210:	3201      	adds	r2, #1
    1212:	8c23      	ldrh	r3, [r4, #32]
    1214:	4213      	tst	r3, r2
    1216:	d1fc      	bne.n	1212 <_adc_init+0x48>
    1218:	2202      	movs	r2, #2
    121a:	8c23      	ldrh	r3, [r4, #32]
    121c:	4213      	tst	r3, r2
    121e:	d1fc      	bne.n	121a <_adc_init+0x50>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1220:	2301      	movs	r3, #1
    1222:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1224:	2203      	movs	r2, #3
    1226:	8c23      	ldrh	r3, [r4, #32]
    1228:	4213      	tst	r3, r2
    122a:	d1fc      	bne.n	1226 <_adc_init+0x5c>
    122c:	2201      	movs	r2, #1
    122e:	8c23      	ldrh	r3, [r4, #32]
    1230:	4213      	tst	r3, r2
    1232:	d1fc      	bne.n	122e <_adc_init+0x64>
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1234:	00eb      	lsls	r3, r5, #3
    1236:	1b5b      	subs	r3, r3, r5
    1238:	009b      	lsls	r3, r3, #2
    123a:	f243 1264 	movw	r2, #12644	; 0x3164
    123e:	f2c0 0200 	movt	r2, #0
    1242:	4694      	mov	ip, r2
    1244:	4463      	add	r3, ip
    1246:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1248:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    124a:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    124c:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    124e:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    1250:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1252:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1254:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1256:	f240 72ff 	movw	r2, #2047	; 0x7ff
    125a:	8c23      	ldrh	r3, [r4, #32]
    125c:	4213      	tst	r3, r2
    125e:	d1fc      	bne.n	125a <_adc_init+0x90>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    1260:	00eb      	lsls	r3, r5, #3
    1262:	1b5b      	subs	r3, r3, r5
    1264:	009b      	lsls	r3, r3, #2
    1266:	f243 1264 	movw	r2, #12644	; 0x3164
    126a:	f2c0 0200 	movt	r2, #0
    126e:	4694      	mov	ip, r2
    1270:	4463      	add	r3, ip
    1272:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
    1274:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1276:	f240 72ff 	movw	r2, #2047	; 0x7ff
    127a:	8c23      	ldrh	r3, [r4, #32]
    127c:	4213      	tst	r3, r2
    127e:	d1fc      	bne.n	127a <_adc_init+0xb0>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1280:	00eb      	lsls	r3, r5, #3
    1282:	1b5b      	subs	r3, r3, r5
    1284:	009b      	lsls	r3, r3, #2
    1286:	f243 1264 	movw	r2, #12644	; 0x3164
    128a:	f2c0 0200 	movt	r2, #0
    128e:	4694      	mov	ip, r2
    1290:	4463      	add	r3, ip
    1292:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1294:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1296:	f240 72ff 	movw	r2, #2047	; 0x7ff
    129a:	8c23      	ldrh	r3, [r4, #32]
    129c:	4213      	tst	r3, r2
    129e:	d1fc      	bne.n	129a <_adc_init+0xd0>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    12a0:	00eb      	lsls	r3, r5, #3
    12a2:	1b5b      	subs	r3, r3, r5
    12a4:	009b      	lsls	r3, r3, #2
    12a6:	f243 1264 	movw	r2, #12644	; 0x3164
    12aa:	f2c0 0200 	movt	r2, #0
    12ae:	4694      	mov	ip, r2
    12b0:	4463      	add	r3, ip
    12b2:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    12b4:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    12ba:	8c23      	ldrh	r3, [r4, #32]
    12bc:	4213      	tst	r3, r2
    12be:	d1fc      	bne.n	12ba <_adc_init+0xf0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    12c0:	00eb      	lsls	r3, r5, #3
    12c2:	1b5b      	subs	r3, r3, r5
    12c4:	009b      	lsls	r3, r3, #2
    12c6:	f243 1264 	movw	r2, #12644	; 0x3164
    12ca:	f2c0 0200 	movt	r2, #0
    12ce:	4694      	mov	ip, r2
    12d0:	4463      	add	r3, ip
    12d2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    12d4:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12d6:	2240      	movs	r2, #64	; 0x40
    12d8:	8c23      	ldrh	r3, [r4, #32]
    12da:	4213      	tst	r3, r2
    12dc:	d1fc      	bne.n	12d8 <_adc_init+0x10e>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    12de:	00eb      	lsls	r3, r5, #3
    12e0:	1b5b      	subs	r3, r3, r5
    12e2:	009b      	lsls	r3, r3, #2
    12e4:	f243 1264 	movw	r2, #12644	; 0x3164
    12e8:	f2c0 0200 	movt	r2, #0
    12ec:	4694      	mov	ip, r2
    12ee:	4463      	add	r3, ip
    12f0:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    12f2:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	8c23      	ldrh	r3, [r4, #32]
    12f8:	4213      	tst	r3, r2
    12fa:	d1fc      	bne.n	12f6 <_adc_init+0x12c>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    12fc:	00eb      	lsls	r3, r5, #3
    12fe:	1b5b      	subs	r3, r3, r5
    1300:	009b      	lsls	r3, r3, #2
    1302:	f243 1264 	movw	r2, #12644	; 0x3164
    1306:	f2c0 0200 	movt	r2, #0
    130a:	4694      	mov	ip, r2
    130c:	4463      	add	r3, ip
    130e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1310:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1312:	f240 1200 	movw	r2, #256	; 0x100
    1316:	8c23      	ldrh	r3, [r4, #32]
    1318:	4213      	tst	r3, r2
    131a:	d1fc      	bne.n	1316 <_adc_init+0x14c>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    131c:	00eb      	lsls	r3, r5, #3
    131e:	1b5b      	subs	r3, r3, r5
    1320:	009b      	lsls	r3, r3, #2
    1322:	f243 1264 	movw	r2, #12644	; 0x3164
    1326:	f2c0 0200 	movt	r2, #0
    132a:	4694      	mov	ip, r2
    132c:	4463      	add	r3, ip
    132e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1330:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1332:	f240 2200 	movw	r2, #512	; 0x200
    1336:	8c23      	ldrh	r3, [r4, #32]
    1338:	4213      	tst	r3, r2
    133a:	d1fc      	bne.n	1336 <_adc_init+0x16c>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    133c:	00eb      	lsls	r3, r5, #3
    133e:	1b5a      	subs	r2, r3, r5
    1340:	0092      	lsls	r2, r2, #2
    1342:	f243 1164 	movw	r1, #12644	; 0x3164
    1346:	f2c0 0100 	movt	r1, #0
    134a:	468c      	mov	ip, r1
    134c:	4462      	add	r2, ip
    134e:	7d12      	ldrb	r2, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    1350:	7722      	strb	r2, [r4, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
    1352:	2200      	movs	r2, #0
    1354:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_CALIB_reg(hw, ADC_CALIB_BIASCOMP(BIASCOMP_VAL) | ADC_CALIB_BIASREFBUF(BIASREFBUF_VAL));
    1356:	f246 0220 	movw	r2, #24608	; 0x6020
    135a:	f2c0 0280 	movt	r2, #128	; 0x80
    135e:	6811      	ldr	r1, [r2, #0]
    1360:	068a      	lsls	r2, r1, #26
    1362:	0f52      	lsrs	r2, r2, #29
    1364:	0209      	lsls	r1, r1, #8
    1366:	f240 7000 	movw	r0, #1792	; 0x700
    136a:	4001      	ands	r1, r0
    136c:	430a      	orrs	r2, r1
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    136e:	85a2      	strh	r2, [r4, #44]	; 0x2c
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1370:	1b5d      	subs	r5, r3, r5
    1372:	00ad      	lsls	r5, r5, #2
    1374:	4465      	add	r5, ip
    1376:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1378:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    137a:	2203      	movs	r2, #3
    137c:	8c23      	ldrh	r3, [r4, #32]
    137e:	4213      	tst	r3, r2
    1380:	d1fc      	bne.n	137c <_adc_init+0x1b2>
}
    1382:	2000      	movs	r0, #0
    1384:	bd70      	pop	{r4, r5, r6, pc}

00001386 <_adc_async_init>:
{
    1386:	b570      	push	{r4, r5, r6, lr}
    1388:	0005      	movs	r5, r0
    138a:	000c      	movs	r4, r1
	ASSERT(device);
    138c:	f243 1180 	movw	r1, #12672	; 0x3180
    1390:	f2c0 0100 	movt	r1, #0
    1394:	1e43      	subs	r3, r0, #1
    1396:	4198      	sbcs	r0, r3
    1398:	b2c0      	uxtb	r0, r0
    139a:	22ed      	movs	r2, #237	; 0xed
    139c:	f241 037b 	movw	r3, #4219	; 0x107b
    13a0:	f2c0 0300 	movt	r3, #0
    13a4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    13a6:	0020      	movs	r0, r4
    13a8:	f241 13c7 	movw	r3, #4551	; 0x11c7
    13ac:	f2c0 0300 	movt	r3, #0
    13b0:	4798      	blx	r3
    13b2:	0001      	movs	r1, r0
    13b4:	0020      	movs	r0, r4
    13b6:	f241 13cb 	movw	r3, #4555	; 0x11cb
    13ba:	f2c0 0300 	movt	r3, #0
    13be:	4798      	blx	r3
	if (init_status) {
    13c0:	b100      	cbz	r0, 13c4 <_adc_async_init+0x3e>
}
    13c2:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    13c4:	616c      	str	r4, [r5, #20]
	if (hw == ADC) {
    13c6:	f641 4300 	movw	r3, #7168	; 0x1c00
    13ca:	f2c4 2300 	movt	r3, #16896	; 0x4200
    13ce:	429c      	cmp	r4, r3
    13d0:	d017      	beq.n	1402 <_adc_async_init+0x7c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13d2:	f24e 1300 	movw	r3, #57600	; 0xe100
    13d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    13da:	2484      	movs	r4, #132	; 0x84
    13dc:	2220      	movs	r2, #32
    13de:	511a      	str	r2, [r3, r4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    13e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13e4:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13e8:	f240 1184 	movw	r1, #388	; 0x184
    13ec:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ee:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f0:	3220      	adds	r2, #32
    13f2:	511a      	str	r2, [r3, r4]
  __ASM volatile ("dsb 0xF":::"memory");
    13f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13f8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13fc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13fe:	605a      	str	r2, [r3, #4]
    1400:	e7df      	b.n	13c2 <_adc_async_init+0x3c>
		_adc0_dev = dev;
    1402:	f240 0348 	movw	r3, #72	; 0x48
    1406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    140a:	601d      	str	r5, [r3, #0]
    140c:	e7e1      	b.n	13d2 <_adc_async_init+0x4c>

0000140e <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    140e:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE_Msk;
    1410:	7813      	ldrb	r3, [r2, #0]
    1412:	2102      	movs	r1, #2
    1414:	430b      	orrs	r3, r1
    1416:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1418:	3101      	adds	r1, #1
    141a:	8c13      	ldrh	r3, [r2, #32]
    141c:	420b      	tst	r3, r1
    141e:	d1fc      	bne.n	141a <_adc_async_enable_channel+0xc>
}
    1420:	4770      	bx	lr

00001422 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    1422:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
    1424:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    1426:	0680      	lsls	r0, r0, #26
    1428:	0f80      	lsrs	r0, r0, #30
    142a:	3803      	subs	r0, #3
    142c:	1e43      	subs	r3, r0, #1
    142e:	4198      	sbcs	r0, r3
    1430:	3001      	adds	r0, #1
}
    1432:	4770      	bx	lr

00001434 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1434:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START_Msk;
    1436:	7e13      	ldrb	r3, [r2, #24]
    1438:	2102      	movs	r1, #2
    143a:	430b      	orrs	r3, r1
    143c:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    143e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1442:	8c13      	ldrh	r3, [r2, #32]
    1444:	420b      	tst	r3, r1
    1446:	d1fc      	bne.n	1442 <_adc_async_convert+0xe>
}
    1448:	4770      	bx	lr

0000144a <ADC_OTHER_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC_OTHER_Handler(void)
{
    144a:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    144c:	f240 0348 	movw	r3, #72	; 0x48
    1450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1454:	6818      	ldr	r0, [r3, #0]
    1456:	f241 1387 	movw	r3, #4487	; 0x1187
    145a:	f2c0 0300 	movt	r3, #0
    145e:	4798      	blx	r3
}
    1460:	bd10      	pop	{r4, pc}

00001462 <ADC_RESRDY_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC_RESRDY_Handler(void)
{
    1462:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    1464:	f240 0348 	movw	r3, #72	; 0x48
    1468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    146c:	6818      	ldr	r0, [r3, #0]
    146e:	f241 1387 	movw	r3, #4487	; 0x1187
    1472:	f2c0 0300 	movt	r3, #0
    1476:	4798      	blx	r3
}
    1478:	bd10      	pop	{r4, pc}

0000147a <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    147a:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    147c:	f245 0300 	movw	r3, #20480	; 0x5000
    1480:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1484:	685a      	ldr	r2, [r3, #4]
    1486:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
    1488:	2000      	movs	r0, #0
    148a:	f641 43d5 	movw	r3, #7381	; 0x1cd5
    148e:	f2c0 0300 	movt	r3, #0
    1492:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1494:	f641 438d 	movw	r3, #7309	; 0x1c8d
    1498:	f2c0 0300 	movt	r3, #0
    149c:	4798      	blx	r3
	_oscctrl_init_sources();
    149e:	f641 43a5 	movw	r3, #7333	; 0x1ca5
    14a2:	f2c0 0300 	movt	r3, #0
    14a6:	4798      	blx	r3
	_mclk_init();
    14a8:	f641 437f 	movw	r3, #7295	; 0x1c7f
    14ac:	f2c0 0300 	movt	r3, #0
    14b0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    14b2:	f641 43d3 	movw	r3, #7379	; 0x1cd3
    14b6:	f2c0 0300 	movt	r3, #0
    14ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14bc:	201f      	movs	r0, #31
    14be:	f641 4331 	movw	r3, #7217	; 0x1c31
    14c2:	f2c0 0300 	movt	r3, #0
    14c6:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    14c8:	f640 0300 	movw	r3, #2048	; 0x800
    14cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    14d0:	691a      	ldr	r2, [r3, #16]
    14d2:	2108      	movs	r1, #8
    14d4:	430a      	orrs	r2, r1
    14d6:	611a      	str	r2, [r3, #16]
	CRITICAL_SECTION_LEAVE();
#endif

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    14d8:	f241 43e5 	movw	r3, #5349	; 0x14e5
    14dc:	f2c0 0300 	movt	r3, #0
    14e0:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    14e2:	bd10      	pop	{r4, pc}

000014e4 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	46ce      	mov	lr, r9
    14e8:	4647      	mov	r7, r8
    14ea:	b580      	push	{r7, lr}
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE_Msk;
    14ec:	f246 0300 	movw	r3, #24576	; 0x6000
    14f0:	f2c4 1300 	movt	r3, #16640	; 0x4100
    14f4:	881a      	ldrh	r2, [r3, #0]
    14f6:	2102      	movs	r1, #2
    14f8:	438a      	bics	r2, r1
    14fa:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE_Msk;
    14fc:	881a      	ldrh	r2, [r3, #0]
    14fe:	3102      	adds	r1, #2
    1500:	438a      	bics	r2, r1
    1502:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST_Msk;
    1504:	2240      	movs	r2, #64	; 0x40
    1506:	5c99      	ldrb	r1, [r3, r2]
    1508:	2001      	movs	r0, #1
    150a:	4301      	orrs	r1, r0
    150c:	b2c9      	uxtb	r1, r1
    150e:	5499      	strb	r1, [r3, r2]
	((Dmac *)hw)->CTRL.reg = data;
    1510:	f640 7200 	movw	r2, #3840	; 0xf00
    1514:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1516:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN_Msk;
    1518:	2101      	movs	r1, #1
    151a:	438a      	bics	r2, r1
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    151c:	4302      	orrs	r2, r0
    151e:	b2d2      	uxtb	r2, r2
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1520:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1522:	2200      	movs	r2, #0
    1524:	615a      	str	r2, [r3, #20]
	    DMAC,
	    DMAC_PRICTRL0_LVLPRI0(CONF_DMAC_LVLPRI0) | DMAC_PRICTRL0_LVLPRI1(CONF_DMAC_LVLPRI1)
	        | DMAC_PRICTRL0_LVLPRI2(CONF_DMAC_LVLPRI2) | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	        | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos) | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	        | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos) | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1526:	f240 1270 	movw	r2, #368	; 0x170
    152a:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->BASEADDR.reg = data;
    152e:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1530:	f240 12f0 	movw	r2, #496	; 0x1f0
    1534:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->WRBADDR.reg = data;
    1538:	639a      	str	r2, [r3, #56]	; 0x38
    153a:	f243 1298 	movw	r2, #12696	; 0x3198
    153e:	f2c0 0200 	movt	r2, #0
    1542:	2100      	movs	r1, #0
	((Dmac *)hw)->CHID.reg = data;
    1544:	f246 0000 	movw	r0, #24576	; 0x6000
    1548:	f2c4 1000 	movt	r0, #16640	; 0x4100
    154c:	f240 0c3f 	movw	ip, #63	; 0x3f

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    1550:	2440      	movs	r4, #64	; 0x40

	for (; i < DMAC_CH_NUM; i++) {
		hri_dmac_write_CHID_reg(DMAC, i);

		hri_dmac_write_CHCTRLA_RUNSTDBY_bit(DMAC, _cfgs[i].ctrla & DMAC_CHCTRLA_RUNSTDBY);
    1552:	2701      	movs	r7, #1
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1554:	f240 1570 	movw	r5, #368	; 0x170
    1558:	f2c2 0500 	movt	r5, #8192	; 0x2000
}

static inline void hri_dmacdescriptor_write_DESCADDR_reg(const void *const hw, hri_dmacdescriptor_descaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    155c:	f240 0900 	movw	r9, #0
    1560:	b2cb      	uxtb	r3, r1
	((Dmac *)hw)->CHID.reg = data;
    1562:	4666      	mov	r6, ip
    1564:	5583      	strb	r3, [r0, r6]
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    1566:	5d03      	ldrb	r3, [r0, r4]
    1568:	4698      	mov	r8, r3
    156a:	7813      	ldrb	r3, [r2, #0]
    156c:	099b      	lsrs	r3, r3, #6
    156e:	403b      	ands	r3, r7
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    1570:	019b      	lsls	r3, r3, #6
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY_Msk;
    1572:	4646      	mov	r6, r8
    1574:	43a6      	bics	r6, r4
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    1576:	4333      	orrs	r3, r6
	((Dmac *)hw)->CHCTRLA.reg = tmp;
    1578:	5503      	strb	r3, [r0, r4]
	((Dmac *)hw)->CHCTRLB.reg = data;
    157a:	6853      	ldr	r3, [r2, #4]
    157c:	6443      	str	r3, [r0, #68]	; 0x44

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    157e:	8913      	ldrh	r3, [r2, #8]
    1580:	4698      	mov	r8, r3
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1582:	010b      	lsls	r3, r1, #4
    1584:	4646      	mov	r6, r8
    1586:	535e      	strh	r6, [r3, r5]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1588:	f240 1670 	movw	r6, #368	; 0x170
    158c:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1590:	46b0      	mov	r8, r6
    1592:	4443      	add	r3, r8
    1594:	464e      	mov	r6, r9
    1596:	60de      	str	r6, [r3, #12]
    1598:	3101      	adds	r1, #1
    159a:	320c      	adds	r2, #12
	for (; i < DMAC_CH_NUM; i++) {
    159c:	2908      	cmp	r1, #8
    159e:	d1df      	bne.n	1560 <_dma_init+0x7c>
    15a0:	230b      	movs	r3, #11
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15a2:	241f      	movs	r4, #31
    15a4:	2001      	movs	r0, #1
    15a6:	f24e 1100 	movw	r1, #57600	; 0xe100
    15aa:	f2ce 0100 	movt	r1, #57344	; 0xe000
		hri_dmacdescriptor_write_DESCADDR_reg(&_descriptor_section[i], 0x0);
	}

	for (i = 0; i < 5; i++) {
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    15ae:	b2da      	uxtb	r2, r3
  if ((int32_t)(IRQn) >= 0)
    15b0:	061d      	lsls	r5, r3, #24
    15b2:	d50f      	bpl.n	15d4 <_dma_init+0xf0>
    15b4:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    15b6:	2b10      	cmp	r3, #16
    15b8:	d1f9      	bne.n	15ae <_dma_init+0xca>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE_Msk;
    15ba:	f246 0300 	movw	r3, #24576	; 0x6000
    15be:	f2c4 1300 	movt	r3, #16640	; 0x4100
    15c2:	881a      	ldrh	r2, [r3, #0]
    15c4:	2102      	movs	r1, #2
    15c6:	430a      	orrs	r2, r1
    15c8:	801a      	strh	r2, [r3, #0]
	}

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);

	return ERR_NONE;
}
    15ca:	2000      	movs	r0, #0
    15cc:	bc0c      	pop	{r2, r3}
    15ce:	4690      	mov	r8, r2
    15d0:	4699      	mov	r9, r3
    15d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d4:	095d      	lsrs	r5, r3, #5
    15d6:	4022      	ands	r2, r4
    15d8:	0006      	movs	r6, r0
    15da:	4096      	lsls	r6, r2
    15dc:	002a      	movs	r2, r5
    15de:	3520      	adds	r5, #32
    15e0:	00ad      	lsls	r5, r5, #2
    15e2:	506e      	str	r6, [r5, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    15e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15ec:	0015      	movs	r5, r2
    15ee:	3560      	adds	r5, #96	; 0x60
    15f0:	00ad      	lsls	r5, r5, #2
    15f2:	506e      	str	r6, [r5, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15f4:	0092      	lsls	r2, r2, #2
    15f6:	5056      	str	r6, [r2, r1]
    15f8:	e7dc      	b.n	15b4 <_dma_init+0xd0>

000015fa <_dma_set_irq_state>:

/**
 * \brief Enable/disable DMA interrupt
 */
void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
    15fa:	b510      	push	{r4, lr}
	((Dmac *)hw)->CHID.reg = data;
    15fc:	f246 0300 	movw	r3, #24576	; 0x6000
    1600:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1604:	243f      	movs	r4, #63	; 0x3f
    1606:	5518      	strb	r0, [r3, r4]
	hri_dmac_write_CHID_reg(DMAC, channel);

	if (DMA_TRANSFER_COMPLETE_CB == type) {
    1608:	b981      	cbnz	r1, 162c <_dma_set_irq_state+0x32>
	if (value == 0x0) {
    160a:	b93a      	cbnz	r2, 161c <_dma_set_irq_state+0x22>
		((Dmac *)hw)->CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL_Msk;
    160c:	f246 0300 	movw	r3, #24576	; 0x6000
    1610:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1614:	3102      	adds	r1, #2
    1616:	324c      	adds	r2, #76	; 0x4c
    1618:	5499      	strb	r1, [r3, r2]
    161a:	e009      	b.n	1630 <_dma_set_irq_state+0x36>
		((Dmac *)hw)->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL_Msk;
    161c:	f246 0300 	movw	r3, #24576	; 0x6000
    1620:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1624:	2102      	movs	r1, #2
    1626:	224d      	movs	r2, #77	; 0x4d
    1628:	5499      	strb	r1, [r3, r2]
    162a:	e001      	b.n	1630 <_dma_set_irq_state+0x36>
		hri_dmac_write_CHINTEN_TCMPL_bit(DMAC, state);
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    162c:	2901      	cmp	r1, #1
    162e:	d000      	beq.n	1632 <_dma_set_irq_state+0x38>
		hri_dmac_write_CHINTEN_TERR_bit(DMAC, state);
	}
}
    1630:	bd10      	pop	{r4, pc}
	if (value == 0x0) {
    1632:	b13a      	cbz	r2, 1644 <_dma_set_irq_state+0x4a>
		((Dmac *)hw)->CHINTENSET.reg = DMAC_CHINTENSET_TERR_Msk;
    1634:	f246 0300 	movw	r3, #24576	; 0x6000
    1638:	f2c4 1300 	movt	r3, #16640	; 0x4100
    163c:	2101      	movs	r1, #1
    163e:	224d      	movs	r2, #77	; 0x4d
    1640:	5499      	strb	r1, [r3, r2]
    1642:	e7f5      	b.n	1630 <_dma_set_irq_state+0x36>
		((Dmac *)hw)->CHINTENCLR.reg = DMAC_CHINTENSET_TERR_Msk;
    1644:	f246 0300 	movw	r3, #24576	; 0x6000
    1648:	f2c4 1300 	movt	r3, #16640	; 0x4100
    164c:	324c      	adds	r2, #76	; 0x4c
    164e:	5499      	strb	r1, [r3, r2]
    1650:	e7ee      	b.n	1630 <_dma_set_irq_state+0x36>

00001652 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1652:	0100      	lsls	r0, r0, #4
    1654:	f240 1370 	movw	r3, #368	; 0x170
    1658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    165c:	469c      	mov	ip, r3
    165e:	4460      	add	r0, ip
    1660:	6081      	str	r1, [r0, #8]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], (uint32_t)dst);

	return ERR_NONE;
}
    1662:	2000      	movs	r0, #0
    1664:	4770      	bx	lr

00001666 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1666:	0100      	lsls	r0, r0, #4
    1668:	f240 1370 	movw	r3, #368	; 0x170
    166c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1670:	469c      	mov	ip, r3
    1672:	4460      	add	r0, ip
    1674:	6041      	str	r1, [r0, #4]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], (uint32_t)src);

	return ERR_NONE;
}
    1676:	2000      	movs	r0, #0
    1678:	4770      	bx	lr

0000167a <_dma_set_next_descriptor>:

int32_t _dma_set_next_descriptor(const uint8_t current_channel, const uint8_t next_channel)
{
	hri_dmacdescriptor_write_DESCADDR_reg(&_descriptor_section[current_channel],
	                                      (uint32_t)&_descriptor_section[next_channel]);
    167a:	0109      	lsls	r1, r1, #4
    167c:	f240 1370 	movw	r3, #368	; 0x170
    1680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1684:	469c      	mov	ip, r3
    1686:	4461      	add	r1, ip
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1688:	0100      	lsls	r0, r0, #4
    168a:	4460      	add	r0, ip
    168c:	60c1      	str	r1, [r0, #12]

	return ERR_NONE;
}
    168e:	2000      	movs	r0, #0
    1690:	4770      	bx	lr

00001692 <_dma_set_data_amount>:

	return ERR_NONE;
}

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
    1692:	b530      	push	{r4, r5, lr}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    1694:	f240 1270 	movw	r2, #368	; 0x170
    1698:	f2c2 0200 	movt	r2, #8192	; 0x2000
    169c:	0104      	lsls	r4, r0, #4
    169e:	18a3      	adds	r3, r4, r2
    16a0:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    16a2:	5aa3      	ldrh	r3, [r4, r2]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    16a4:	059b      	lsls	r3, r3, #22
	uint32_t address   = hri_dmacdescriptor_read_DSTADDR_reg(&_descriptor_section[channel]);
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    16a6:	0f9b      	lsrs	r3, r3, #30
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    16a8:	5aa2      	ldrh	r2, [r4, r2]

	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    16aa:	0512      	lsls	r2, r2, #20
    16ac:	d50a      	bpl.n	16c4 <_dma_set_data_amount+0x32>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    16ae:	000c      	movs	r4, r1
    16b0:	409c      	lsls	r4, r3
    16b2:	1964      	adds	r4, r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    16b4:	0102      	lsls	r2, r0, #4
    16b6:	f240 1570 	movw	r5, #368	; 0x170
    16ba:	f2c2 0500 	movt	r5, #8192	; 0x2000
    16be:	46ac      	mov	ip, r5
    16c0:	4462      	add	r2, ip
    16c2:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    16c4:	f240 1270 	movw	r2, #368	; 0x170
    16c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    16cc:	0104      	lsls	r4, r0, #4
    16ce:	18a5      	adds	r5, r4, r2
    16d0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    16d2:	5aa4      	ldrh	r4, [r4, r2]
	}

	address = hri_dmacdescriptor_read_SRCADDR_reg(&_descriptor_section[channel]);

	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    16d4:	0562      	lsls	r2, r4, #21
    16d6:	d50a      	bpl.n	16ee <_dma_set_data_amount+0x5c>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    16d8:	000a      	movs	r2, r1
    16da:	409a      	lsls	r2, r3
    16dc:	1952      	adds	r2, r2, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    16de:	0103      	lsls	r3, r0, #4
    16e0:	f240 1470 	movw	r4, #368	; 0x170
    16e4:	f2c2 0400 	movt	r4, #8192	; 0x2000
    16e8:	46a4      	mov	ip, r4
    16ea:	4463      	add	r3, ip
    16ec:	605a      	str	r2, [r3, #4]
	}

	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    16ee:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    16f0:	0100      	lsls	r0, r0, #4
    16f2:	f240 1370 	movw	r3, #368	; 0x170
    16f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16fa:	469c      	mov	ip, r3
    16fc:	4460      	add	r0, ip
    16fe:	8041      	strh	r1, [r0, #2]

	return ERR_NONE;
}
    1700:	2000      	movs	r0, #0
    1702:	bd30      	pop	{r4, r5, pc}

00001704 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
    1704:	b570      	push	{r4, r5, r6, lr}
	((Dmac *)hw)->CHID.reg = data;
    1706:	f246 0300 	movw	r3, #24576	; 0x6000
    170a:	f2c4 1300 	movt	r3, #16640	; 0x4100
    170e:	223f      	movs	r2, #63	; 0x3f
    1710:	5498      	strb	r0, [r3, r2]
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID_Msk;
    1712:	f240 1270 	movw	r2, #368	; 0x170
    1716:	f2c2 0200 	movt	r2, #8192	; 0x2000
    171a:	0105      	lsls	r5, r0, #4
    171c:	5aac      	ldrh	r4, [r5, r2]
    171e:	2601      	movs	r6, #1
    1720:	4334      	orrs	r4, r6
    1722:	52ac      	strh	r4, [r5, r2]
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE_Msk;
    1724:	2440      	movs	r4, #64	; 0x40
    1726:	5d1a      	ldrb	r2, [r3, r4]
    1728:	2502      	movs	r5, #2
    172a:	432a      	orrs	r2, r5
    172c:	551a      	strb	r2, [r3, r4]
	hri_dmac_write_CHID_reg(DMAC, channel);
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(&_descriptor_section[channel]);
	hri_dmac_set_CHCTRLA_ENABLE_bit(DMAC);
	if (software_trigger) {
    172e:	b141      	cbz	r1, 1742 <_dma_enable_transaction+0x3e>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1730:	f246 0200 	movw	r2, #24576	; 0x6000
    1734:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1738:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    173a:	2301      	movs	r3, #1
    173c:	4083      	lsls	r3, r0
    173e:	430b      	orrs	r3, r1
    1740:	6113      	str	r3, [r2, #16]
	}

	return ERR_NONE;
}
    1742:	2000      	movs	r0, #0
    1744:	bd70      	pop	{r4, r5, r6, pc}

00001746 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
    1746:	000b      	movs	r3, r1
	*resource = &_resources[channel];
    1748:	0049      	lsls	r1, r1, #1
    174a:	18c9      	adds	r1, r1, r3
    174c:	0089      	lsls	r1, r1, #2
    174e:	f240 034c 	movw	r3, #76	; 0x4c
    1752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1756:	469c      	mov	ip, r3
    1758:	4461      	add	r1, ip
    175a:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    175c:	2000      	movs	r0, #0
    175e:	4770      	bx	lr

00001760 <DMAC_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1760:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1762:	f246 0200 	movw	r2, #24576	; 0x6000
    1766:	f2c4 1200 	movt	r2, #16640	; 0x4100
    176a:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    176c:	2307      	movs	r3, #7
    176e:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1770:	243f      	movs	r4, #63	; 0x3f
    1772:	5d15      	ldrb	r5, [r2, r4]
    1774:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    1776:	0058      	lsls	r0, r3, #1
    1778:	18c0      	adds	r0, r0, r3
    177a:	0080      	lsls	r0, r0, #2
    177c:	f240 014c 	movw	r1, #76	; 0x4c
    1780:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1784:	468c      	mov	ip, r1
    1786:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1788:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    178a:	214e      	movs	r1, #78	; 0x4e
    178c:	5c51      	ldrb	r1, [r2, r1]
    178e:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1790:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1792:	07ca      	lsls	r2, r1, #31
    1794:	d402      	bmi.n	179c <DMAC_0_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    1796:	078a      	lsls	r2, r1, #30
    1798:	d40a      	bmi.n	17b0 <DMAC_0_Handler+0x50>
	_dmac_handler();
}
    179a:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    179c:	f246 0200 	movw	r2, #24576	; 0x6000
    17a0:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17a4:	3c3e      	subs	r4, #62	; 0x3e
    17a6:	214e      	movs	r1, #78	; 0x4e
    17a8:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    17aa:	6843      	ldr	r3, [r0, #4]
    17ac:	4798      	blx	r3
    17ae:	e7f4      	b.n	179a <DMAC_0_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    17b0:	f246 0200 	movw	r2, #24576	; 0x6000
    17b4:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17b8:	2402      	movs	r4, #2
    17ba:	214e      	movs	r1, #78	; 0x4e
    17bc:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    17be:	f240 014c 	movw	r1, #76	; 0x4c
    17c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17c6:	005a      	lsls	r2, r3, #1
    17c8:	18d3      	adds	r3, r2, r3
    17ca:	009b      	lsls	r3, r3, #2
    17cc:	585b      	ldr	r3, [r3, r1]
    17ce:	4798      	blx	r3
}
    17d0:	e7e3      	b.n	179a <DMAC_0_Handler+0x3a>

000017d2 <DMAC_1_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    17d2:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17d4:	f246 0200 	movw	r2, #24576	; 0x6000
    17d8:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17dc:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    17de:	2307      	movs	r3, #7
    17e0:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    17e2:	243f      	movs	r4, #63	; 0x3f
    17e4:	5d15      	ldrb	r5, [r2, r4]
    17e6:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    17e8:	0058      	lsls	r0, r3, #1
    17ea:	18c0      	adds	r0, r0, r3
    17ec:	0080      	lsls	r0, r0, #2
    17ee:	f240 014c 	movw	r1, #76	; 0x4c
    17f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17f6:	468c      	mov	ip, r1
    17f8:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    17fa:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    17fc:	214e      	movs	r1, #78	; 0x4e
    17fe:	5c51      	ldrb	r1, [r2, r1]
    1800:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1802:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1804:	07ca      	lsls	r2, r1, #31
    1806:	d402      	bmi.n	180e <DMAC_1_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    1808:	078a      	lsls	r2, r1, #30
    180a:	d40a      	bmi.n	1822 <DMAC_1_Handler+0x50>
	_dmac_handler();
}
    180c:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    180e:	f246 0200 	movw	r2, #24576	; 0x6000
    1812:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1816:	3c3e      	subs	r4, #62	; 0x3e
    1818:	214e      	movs	r1, #78	; 0x4e
    181a:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    181c:	6843      	ldr	r3, [r0, #4]
    181e:	4798      	blx	r3
    1820:	e7f4      	b.n	180c <DMAC_1_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1822:	f246 0200 	movw	r2, #24576	; 0x6000
    1826:	f2c4 1200 	movt	r2, #16640	; 0x4100
    182a:	2402      	movs	r4, #2
    182c:	214e      	movs	r1, #78	; 0x4e
    182e:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1830:	f240 014c 	movw	r1, #76	; 0x4c
    1834:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1838:	005a      	lsls	r2, r3, #1
    183a:	18d3      	adds	r3, r2, r3
    183c:	009b      	lsls	r3, r3, #2
    183e:	585b      	ldr	r3, [r3, r1]
    1840:	4798      	blx	r3
}
    1842:	e7e3      	b.n	180c <DMAC_1_Handler+0x3a>

00001844 <DMAC_2_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1844:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1846:	f246 0200 	movw	r2, #24576	; 0x6000
    184a:	f2c4 1200 	movt	r2, #16640	; 0x4100
    184e:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1850:	2307      	movs	r3, #7
    1852:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1854:	243f      	movs	r4, #63	; 0x3f
    1856:	5d15      	ldrb	r5, [r2, r4]
    1858:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    185a:	0058      	lsls	r0, r3, #1
    185c:	18c0      	adds	r0, r0, r3
    185e:	0080      	lsls	r0, r0, #2
    1860:	f240 014c 	movw	r1, #76	; 0x4c
    1864:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1868:	468c      	mov	ip, r1
    186a:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    186c:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    186e:	214e      	movs	r1, #78	; 0x4e
    1870:	5c51      	ldrb	r1, [r2, r1]
    1872:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1874:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1876:	07ca      	lsls	r2, r1, #31
    1878:	d402      	bmi.n	1880 <DMAC_2_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    187a:	078a      	lsls	r2, r1, #30
    187c:	d40a      	bmi.n	1894 <DMAC_2_Handler+0x50>
	_dmac_handler();
}
    187e:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1880:	f246 0200 	movw	r2, #24576	; 0x6000
    1884:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1888:	3c3e      	subs	r4, #62	; 0x3e
    188a:	214e      	movs	r1, #78	; 0x4e
    188c:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    188e:	6843      	ldr	r3, [r0, #4]
    1890:	4798      	blx	r3
    1892:	e7f4      	b.n	187e <DMAC_2_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1894:	f246 0200 	movw	r2, #24576	; 0x6000
    1898:	f2c4 1200 	movt	r2, #16640	; 0x4100
    189c:	2402      	movs	r4, #2
    189e:	214e      	movs	r1, #78	; 0x4e
    18a0:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    18a2:	f240 014c 	movw	r1, #76	; 0x4c
    18a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    18aa:	005a      	lsls	r2, r3, #1
    18ac:	18d3      	adds	r3, r2, r3
    18ae:	009b      	lsls	r3, r3, #2
    18b0:	585b      	ldr	r3, [r3, r1]
    18b2:	4798      	blx	r3
}
    18b4:	e7e3      	b.n	187e <DMAC_2_Handler+0x3a>

000018b6 <DMAC_3_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    18b6:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    18b8:	f246 0200 	movw	r2, #24576	; 0x6000
    18bc:	f2c4 1200 	movt	r2, #16640	; 0x4100
    18c0:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    18c2:	2307      	movs	r3, #7
    18c4:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    18c6:	243f      	movs	r4, #63	; 0x3f
    18c8:	5d15      	ldrb	r5, [r2, r4]
    18ca:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    18cc:	0058      	lsls	r0, r3, #1
    18ce:	18c0      	adds	r0, r0, r3
    18d0:	0080      	lsls	r0, r0, #2
    18d2:	f240 014c 	movw	r1, #76	; 0x4c
    18d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    18da:	468c      	mov	ip, r1
    18dc:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    18de:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    18e0:	214e      	movs	r1, #78	; 0x4e
    18e2:	5c51      	ldrb	r1, [r2, r1]
    18e4:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    18e6:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    18e8:	07ca      	lsls	r2, r1, #31
    18ea:	d402      	bmi.n	18f2 <DMAC_3_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    18ec:	078a      	lsls	r2, r1, #30
    18ee:	d40a      	bmi.n	1906 <DMAC_3_Handler+0x50>
	_dmac_handler();
}
    18f0:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    18f2:	f246 0200 	movw	r2, #24576	; 0x6000
    18f6:	f2c4 1200 	movt	r2, #16640	; 0x4100
    18fa:	3c3e      	subs	r4, #62	; 0x3e
    18fc:	214e      	movs	r1, #78	; 0x4e
    18fe:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1900:	6843      	ldr	r3, [r0, #4]
    1902:	4798      	blx	r3
    1904:	e7f4      	b.n	18f0 <DMAC_3_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1906:	f246 0200 	movw	r2, #24576	; 0x6000
    190a:	f2c4 1200 	movt	r2, #16640	; 0x4100
    190e:	2402      	movs	r4, #2
    1910:	214e      	movs	r1, #78	; 0x4e
    1912:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1914:	f240 014c 	movw	r1, #76	; 0x4c
    1918:	f2c2 0100 	movt	r1, #8192	; 0x2000
    191c:	005a      	lsls	r2, r3, #1
    191e:	18d3      	adds	r3, r2, r3
    1920:	009b      	lsls	r3, r3, #2
    1922:	585b      	ldr	r3, [r3, r1]
    1924:	4798      	blx	r3
}
    1926:	e7e3      	b.n	18f0 <DMAC_3_Handler+0x3a>

00001928 <DMAC_OTHER_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_OTHER_Handler(void)
{
    1928:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    192a:	f246 0200 	movw	r2, #24576	; 0x6000
    192e:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1932:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1934:	2307      	movs	r3, #7
    1936:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1938:	243f      	movs	r4, #63	; 0x3f
    193a:	5d15      	ldrb	r5, [r2, r4]
    193c:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    193e:	0058      	lsls	r0, r3, #1
    1940:	18c0      	adds	r0, r0, r3
    1942:	0080      	lsls	r0, r0, #2
    1944:	f240 014c 	movw	r1, #76	; 0x4c
    1948:	f2c2 0100 	movt	r1, #8192	; 0x2000
    194c:	468c      	mov	ip, r1
    194e:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1950:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1952:	214e      	movs	r1, #78	; 0x4e
    1954:	5c51      	ldrb	r1, [r2, r1]
    1956:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1958:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    195a:	07ca      	lsls	r2, r1, #31
    195c:	d402      	bmi.n	1964 <DMAC_OTHER_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    195e:	078a      	lsls	r2, r1, #30
    1960:	d40a      	bmi.n	1978 <DMAC_OTHER_Handler+0x50>
	_dmac_handler();
}
    1962:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1964:	f246 0200 	movw	r2, #24576	; 0x6000
    1968:	f2c4 1200 	movt	r2, #16640	; 0x4100
    196c:	3c3e      	subs	r4, #62	; 0x3e
    196e:	214e      	movs	r1, #78	; 0x4e
    1970:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1972:	6843      	ldr	r3, [r0, #4]
    1974:	4798      	blx	r3
    1976:	e7f4      	b.n	1962 <DMAC_OTHER_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1978:	f246 0200 	movw	r2, #24576	; 0x6000
    197c:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1980:	2402      	movs	r4, #2
    1982:	214e      	movs	r1, #78	; 0x4e
    1984:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1986:	f240 014c 	movw	r1, #76	; 0x4c
    198a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    198e:	005a      	lsls	r2, r3, #1
    1990:	18d3      	adds	r3, r2, r3
    1992:	009b      	lsls	r3, r3, #2
    1994:	585b      	ldr	r3, [r3, r1]
    1996:	4798      	blx	r3
}
    1998:	e7e3      	b.n	1962 <DMAC_OTHER_Handler+0x3a>

0000199a <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    199a:	f642 2300 	movw	r3, #10752	; 0x2a00
    199e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19a2:	685b      	ldr	r3, [r3, #4]
	 | (CONF_EIC_FILTEN4 << EIC_CONFIG_FILTEN4_Pos) | EIC_CONFIG_SENSE4(CONF_EIC_SENSE4)                               \
	 | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)                               \
	 | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)                               \
	 | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7) | 0)

	if (!hri_eic_is_syncing(EIC_SEC, EIC_SYNCBUSY_SWRST)) {
    19a4:	07db      	lsls	r3, r3, #31
    19a6:	d434      	bmi.n	1a12 <_ext_irq_init+0x78>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19a8:	f642 2200 	movw	r2, #10752	; 0x2a00
    19ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
    19b0:	2103      	movs	r1, #3
    19b2:	6853      	ldr	r3, [r2, #4]
    19b4:	4219      	tst	r1, r3
    19b6:	d1fc      	bne.n	19b2 <_ext_irq_init+0x18>
	tmp = ((Eic *)hw)->CTRLA.reg;
    19b8:	f642 2300 	movw	r3, #10752	; 0x2a00
    19bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19c0:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC_SEC, EIC_CTRLA_ENABLE)) {
    19c2:	079b      	lsls	r3, r3, #30
    19c4:	d517      	bpl.n	19f6 <_ext_irq_init+0x5c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
    19c6:	f642 2300 	movw	r3, #10752	; 0x2a00
    19ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19ce:	781a      	ldrb	r2, [r3, #0]
    19d0:	2102      	movs	r1, #2
    19d2:	438a      	bics	r2, r1
    19d4:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19d6:	f642 2200 	movw	r2, #10752	; 0x2a00
    19da:	f2c4 0200 	movt	r2, #16384	; 0x4000
    19de:	3101      	adds	r1, #1
    19e0:	6853      	ldr	r3, [r2, #4]
    19e2:	4219      	tst	r1, r3
    19e4:	d1fc      	bne.n	19e0 <_ext_irq_init+0x46>
    19e6:	f642 2200 	movw	r2, #10752	; 0x2a00
    19ea:	f2c4 0200 	movt	r2, #16384	; 0x4000
    19ee:	2102      	movs	r1, #2
    19f0:	6853      	ldr	r3, [r2, #4]
    19f2:	4219      	tst	r1, r3
    19f4:	d1fc      	bne.n	19f0 <_ext_irq_init+0x56>
	((Eic *)hw)->CTRLA.reg = data;
    19f6:	f642 2300 	movw	r3, #10752	; 0x2a00
    19fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19fe:	2201      	movs	r2, #1
    1a00:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a02:	f642 2200 	movw	r2, #10752	; 0x2a00
    1a06:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1a0a:	2103      	movs	r1, #3
    1a0c:	6853      	ldr	r3, [r2, #4]
    1a0e:	4219      	tst	r1, r3
    1a10:	d1fc      	bne.n	1a0c <_ext_irq_init+0x72>
    1a12:	f642 2200 	movw	r2, #10752	; 0x2a00
    1a16:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1a1a:	2101      	movs	r1, #1
    1a1c:	6853      	ldr	r3, [r2, #4]
    1a1e:	4219      	tst	r1, r3
    1a20:	d1fc      	bne.n	1a1c <_ext_irq_init+0x82>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1a22:	f642 2200 	movw	r2, #10752	; 0x2a00
    1a26:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1a2a:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL_Msk;
    1a2c:	2110      	movs	r1, #16
    1a2e:	438b      	bics	r3, r1
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    1a30:	430b      	orrs	r3, r1
	((Eic *)hw)->CTRLA.reg = tmp;
    1a32:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a34:	f642 2200 	movw	r2, #10752	; 0x2a00
    1a38:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1a3c:	390d      	subs	r1, #13
    1a3e:	6853      	ldr	r3, [r2, #4]
    1a40:	4219      	tst	r1, r3
    1a42:	d1fc      	bne.n	1a3e <_ext_irq_init+0xa4>
	((Eic *)hw)->NONSEC.reg = data;
    1a44:	f642 2300 	movw	r3, #10752	; 0x2a00
    1a48:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a4c:	2220      	movs	r2, #32
    1a4e:	641a      	str	r2, [r3, #64]	; 0x40
	((Eic *)hw)->DPRESCALER.reg = data;
    1a50:	2200      	movs	r2, #0
    1a52:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->EVCTRL.reg = data;
    1a54:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
    1a56:	619a      	str	r2, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1a58:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
    1a5a:	22a0      	movs	r2, #160	; 0xa0
    1a5c:	03d2      	lsls	r2, r2, #15
    1a5e:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
    1a60:	781a      	ldrb	r2, [r3, #0]
    1a62:	2102      	movs	r1, #2
    1a64:	430a      	orrs	r2, r1
    1a66:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a68:	f642 2200 	movw	r2, #10752	; 0x2a00
    1a6c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1a70:	3101      	adds	r1, #1
    1a72:	6853      	ldr	r3, [r2, #4]
    1a74:	4219      	tst	r1, r3
    1a76:	d1fc      	bne.n	1a72 <_ext_irq_init+0xd8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a78:	f24e 1300 	movw	r3, #57600	; 0xe100
    1a7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1a80:	2280      	movs	r2, #128	; 0x80
    1a82:	509a      	str	r2, [r3, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1a84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a88:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8c:	f240 1180 	movw	r1, #384	; 0x180
    1a90:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a92:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_OTHER_IRQn);
	NVIC_ClearPendingIRQ(EIC_OTHER_IRQn);
	NVIC_EnableIRQ(EIC_OTHER_IRQn);

	callback = cb;
    1a94:	f240 03ac 	movw	r3, #172	; 0xac
    1a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a9c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1a9e:	2000      	movs	r0, #0
    1aa0:	4770      	bx	lr

00001aa2 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1aa2:	281b      	cmp	r0, #27
    1aa4:	d002      	beq.n	1aac <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    1aa6:	2001      	movs	r0, #1
    1aa8:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC_SEC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC_SEC, 1ul << extint);
	}

	return ERR_NONE;
}
    1aaa:	4770      	bx	lr
	if (enable) {
    1aac:	b941      	cbnz	r1, 1ac0 <_ext_irq_enable+0x1e>
	((Eic *)hw)->INTENCLR.reg = mask;
    1aae:	f642 2300 	movw	r3, #10752	; 0x2a00
    1ab2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ab6:	2220      	movs	r2, #32
    1ab8:	60da      	str	r2, [r3, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1aba:	615a      	str	r2, [r3, #20]
	return ERR_NONE;
    1abc:	2000      	movs	r0, #0
    1abe:	e7f4      	b.n	1aaa <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
    1ac0:	f642 2300 	movw	r3, #10752	; 0x2a00
    1ac4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ac8:	2220      	movs	r2, #32
    1aca:	611a      	str	r2, [r3, #16]
    1acc:	2000      	movs	r0, #0
    1ace:	e7ec      	b.n	1aaa <_ext_irq_enable+0x8>

00001ad0 <EIC_OTHER_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_OTHER_Handler(void)
{
    1ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ad2:	46c6      	mov	lr, r8
    1ad4:	b500      	push	{lr}
    1ad6:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    1ad8:	f642 2300 	movw	r3, #10752	; 0x2a00
    1adc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ae0:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    1ae2:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    1ae4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1ae6:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    1ae8:	f243 2100 	movw	r1, #12800	; 0x3200
    1aec:	f2c0 0100 	movt	r1, #0
    1af0:	f240 03ac 	movw	r3, #172	; 0xac
    1af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1af8:	6818      	ldr	r0, [r3, #0]
    1afa:	1e43      	subs	r3, r0, #1
    1afc:	4198      	sbcs	r0, r3
    1afe:	b2c0      	uxtb	r0, r0
    1b00:	22f2      	movs	r2, #242	; 0xf2
    1b02:	f241 037b 	movw	r3, #4219	; 0x107b
    1b06:	f2c0 0300 	movt	r3, #0
    1b0a:	4798      	blx	r3
	while (flags) {
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d055      	beq.n	1bbe <EIC_OTHER_Handler+0xee>
    1b12:	2301      	movs	r3, #1
    1b14:	425b      	negs	r3, r3
    1b16:	4698      	mov	r8, r3
				if (_map[middle].extint == pos) {
    1b18:	f243 15f8 	movw	r5, #12792	; 0x31f8
    1b1c:	f2c0 0500 	movt	r5, #0
    1b20:	e041      	b.n	1ba6 <EIC_OTHER_Handler+0xd6>
					upper = middle - 1;
    1b22:	3a01      	subs	r2, #1
    1b24:	b2d1      	uxtb	r1, r2
			while (upper >= lower) {
    1b26:	428f      	cmp	r7, r1
    1b28:	d80c      	bhi.n	1b44 <EIC_OTHER_Handler+0x74>
				middle = (upper + lower) >> 1;
    1b2a:	19cb      	adds	r3, r1, r7
    1b2c:	105b      	asrs	r3, r3, #1
    1b2e:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    1b30:	4003      	ands	r3, r0
    1b32:	00db      	lsls	r3, r3, #3
    1b34:	5d5b      	ldrb	r3, [r3, r5]
    1b36:	42a3      	cmp	r3, r4
    1b38:	d008      	beq.n	1b4c <EIC_OTHER_Handler+0x7c>
				if (_map[middle].extint < pos) {
    1b3a:	429c      	cmp	r4, r3
    1b3c:	ddf1      	ble.n	1b22 <EIC_OTHER_Handler+0x52>
					lower = middle + 1;
    1b3e:	3201      	adds	r2, #1
    1b40:	b2d7      	uxtb	r7, r2
    1b42:	e7f0      	b.n	1b26 <EIC_OTHER_Handler+0x56>
			if (INVALID_PIN_NUMBER != pin) {
    1b44:	4643      	mov	r3, r8
    1b46:	3301      	adds	r3, #1
    1b48:	d009      	beq.n	1b5e <EIC_OTHER_Handler+0x8e>
    1b4a:	e001      	b.n	1b50 <EIC_OTHER_Handler+0x80>
				if (_map[middle].extint == pos) {
    1b4c:	f240 081b 	movw	r8, #27
				callback(pin);
    1b50:	f240 03ac 	movw	r3, #172	; 0xac
    1b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	4640      	mov	r0, r8
    1b5c:	4798      	blx	r3
			flags &= ~(1ul << pos);
    1b5e:	9b01      	ldr	r3, [sp, #4]
    1b60:	0032      	movs	r2, r6
    1b62:	40a2      	lsls	r2, r4
    1b64:	4393      	bics	r3, r2
    1b66:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1b68:	9801      	ldr	r0, [sp, #4]
    1b6a:	f642 73c9 	movw	r3, #12233	; 0x2fc9
    1b6e:	f2c0 0300 	movt	r3, #0
    1b72:	4798      	blx	r3
    1b74:	3801      	subs	r0, #1
    1b76:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1b78:	1c63      	adds	r3, r4, #1
    1b7a:	d00a      	beq.n	1b92 <EIC_OTHER_Handler+0xc2>
				if (_map[middle].extint == pos) {
    1b7c:	2c05      	cmp	r4, #5
    1b7e:	d005      	beq.n	1b8c <EIC_OTHER_Handler+0xbc>
    1b80:	2305      	movs	r3, #5
    1b82:	2200      	movs	r2, #0
    1b84:	2700      	movs	r7, #0
    1b86:	0031      	movs	r1, r6
    1b88:	20ff      	movs	r0, #255	; 0xff
    1b8a:	e7d6      	b.n	1b3a <EIC_OTHER_Handler+0x6a>
    1b8c:	f240 081b 	movw	r8, #27
    1b90:	e7de      	b.n	1b50 <EIC_OTHER_Handler+0x80>
	return ((Eic *)hw)->INTFLAG.reg;
    1b92:	f642 2300 	movw	r3, #10752	; 0x2a00
    1b96:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b9a:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    1b9c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    1b9e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1ba0:	615a      	str	r2, [r3, #20]
	while (flags) {
    1ba2:	9b01      	ldr	r3, [sp, #4]
    1ba4:	b15b      	cbz	r3, 1bbe <EIC_OTHER_Handler+0xee>
		pos = ffs(flags) - 1;
    1ba6:	9801      	ldr	r0, [sp, #4]
    1ba8:	f642 73c9 	movw	r3, #12233	; 0x2fc9
    1bac:	f2c0 0300 	movt	r3, #0
    1bb0:	4798      	blx	r3
    1bb2:	3801      	subs	r0, #1
    1bb4:	b244      	sxtb	r4, r0
				if (_map[middle].extint == pos) {
    1bb6:	2601      	movs	r6, #1
		while (-1 != pos) {
    1bb8:	1c63      	adds	r3, r4, #1
    1bba:	d1df      	bne.n	1b7c <EIC_OTHER_Handler+0xac>
    1bbc:	e7e9      	b.n	1b92 <EIC_OTHER_Handler+0xc2>
	_ext_irq_handler();
}
    1bbe:	b002      	add	sp, #8
    1bc0:	bc04      	pop	{r2}
    1bc2:	4690      	mov	r8, r2
    1bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001bc6 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1bc6:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_evsys_write_NONSECUSER_reg(const void *const hw, uint8_t index, hri_evsys_nonsecuser_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->NONSECUSER[index].reg = data;
    1bc8:	f240 2300 	movw	r3, #512	; 0x200
    1bcc:	f2c4 2300 	movt	r3, #16896	; 0x4200
    1bd0:	2200      	movs	r2, #0
    1bd2:	f240 11e0 	movw	r1, #480	; 0x1e0
    1bd6:	505a      	str	r2, [r3, r1]
	((Evsys *)hw)->NONSECCHAN.reg = data;
    1bd8:	3908      	subs	r1, #8
    1bda:	505a      	str	r2, [r3, r1]
    1bdc:	2301      	movs	r3, #1
	hri_evsys_write_NONSECCHAN_reg(EVSYS_SEC, CHANNEL_NONSECCHAN_CONF_VALUE);
#endif

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1bde:	f243 2118 	movw	r1, #12824	; 0x3218
    1be2:	f2c0 0100 	movt	r1, #0
    1be6:	e008      	b.n	1bfa <_event_system_init+0x34>
	((Evsys *)hw)->USER[index].reg = data;
    1be8:	f240 3020 	movw	r0, #800	; 0x320
    1bec:	f2c4 2000 	movt	r0, #16896	; 0x4200
    1bf0:	1818      	adds	r0, r3, r0
    1bf2:	7002      	strb	r2, [r0, #0]
    1bf4:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_USERS; i++) {
    1bf6:	2b17      	cmp	r3, #23
    1bf8:	d003      	beq.n	1c02 <_event_system_init+0x3c>
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1bfa:	5c5a      	ldrb	r2, [r3, r1]
    1bfc:	2a00      	cmp	r2, #0
    1bfe:	d1f3      	bne.n	1be8 <_event_system_init+0x22>
    1c00:	e7f8      	b.n	1bf4 <_event_system_init+0x2e>
    1c02:	3b16      	subs	r3, #22

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1c04:	f240 2200 	movw	r2, #512	; 0x200
    1c08:	f2c4 2200 	movt	r2, #16896	; 0x4200
    1c0c:	f24c 260c 	movw	r6, #49676	; 0xc20c
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1c10:	2525      	movs	r5, #37	; 0x25
    1c12:	2400      	movs	r4, #0
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1c14:	2024      	movs	r0, #36	; 0x24
    1c16:	21ff      	movs	r1, #255	; 0xff
    1c18:	e004      	b.n	1c24 <_event_system_init+0x5e>
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1c1a:	6216      	str	r6, [r2, #32]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1c1c:	5554      	strb	r4, [r2, r5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1c1e:	5411      	strb	r1, [r2, r0]
    1c20:	3301      	adds	r3, #1
    1c22:	b2db      	uxtb	r3, r3
		}
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		if (EVENT_CHANNEL_SETTING_ENABLED & (1u << i)) {
    1c24:	2b01      	cmp	r3, #1
    1c26:	d0f8      	beq.n	1c1a <_event_system_init+0x54>
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1c28:	2b07      	cmp	r3, #7
    1c2a:	d9f9      	bls.n	1c20 <_event_system_init+0x5a>
			hri_evsys_write_CHINTEN_reg(EVSYS_SEC, i, interrupt_cfg[i]);
		}
	}

	return ERR_NONE;
}
    1c2c:	2000      	movs	r0, #0
    1c2e:	bd70      	pop	{r4, r5, r6, pc}

00001c30 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c30:	07c3      	lsls	r3, r0, #31
    1c32:	d510      	bpl.n	1c56 <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c34:	f641 4300 	movw	r3, #7168	; 0x1c00
    1c38:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c3c:	f242 1205 	movw	r2, #8453	; 0x2105
    1c40:	f2c0 0201 	movt	r2, #1
    1c44:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c46:	f641 4200 	movw	r2, #7168	; 0x1c00
    1c4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c4e:	217d      	movs	r1, #125	; 0x7d
    1c50:	6853      	ldr	r3, [r2, #4]
    1c52:	4219      	tst	r1, r3
    1c54:	d1fc      	bne.n	1c50 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1c56:	0783      	lsls	r3, r0, #30
    1c58:	d510      	bpl.n	1c7c <_gclk_init_generators_by_fref+0x4c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c5a:	f641 4300 	movw	r3, #7168	; 0x1c00
    1c5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c62:	f242 1203 	movw	r2, #8451	; 0x2103
    1c66:	f2c0 0201 	movt	r2, #1
    1c6a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c6c:	f641 4200 	movw	r2, #7168	; 0x1c00
    1c70:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c74:	217d      	movs	r1, #125	; 0x7d
    1c76:	6853      	ldr	r3, [r2, #4]
    1c78:	4219      	tst	r1, r3
    1c7a:	d1fc      	bne.n	1c76 <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    1c7c:	4770      	bx	lr

00001c7e <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c7e:	f640 0300 	movw	r3, #2048	; 0x800
    1c82:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c86:	2201      	movs	r2, #1
    1c88:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1c8a:	4770      	bx	lr

00001c8c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c8c:	f241 4300 	movw	r3, #5120	; 0x1400
    1c90:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c94:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1c96:	f641 7100 	movw	r1, #7936	; 0x1f00
    1c9a:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c9c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c9e:	2201      	movs	r2, #1
    1ca0:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1ca2:	4770      	bx	lr

00001ca4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1ca4:	f241 0300 	movw	r3, #4096	; 0x1000
    1ca8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1cac:	2242      	movs	r2, #66	; 0x42
    1cae:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    1cb0:	f241 0200 	movw	r2, #4096	; 0x1000
    1cb4:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1cb8:	2110      	movs	r1, #16
    1cba:	6913      	ldr	r3, [r2, #16]
    1cbc:	4219      	tst	r1, r3
    1cbe:	d0fc      	beq.n	1cba <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
    1cc0:	f241 0300 	movw	r3, #4096	; 0x1000
    1cc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1cc8:	7e1a      	ldrb	r2, [r3, #24]
    1cca:	2180      	movs	r1, #128	; 0x80
    1ccc:	430a      	orrs	r2, r1
    1cce:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1cd0:	4770      	bx	lr

00001cd2 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1cd2:	4770      	bx	lr

00001cd4 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1cd4:	f240 4300 	movw	r3, #1024	; 0x400
    1cd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1cdc:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1cde:	2203      	movs	r2, #3
    1ce0:	4013      	ands	r3, r2
    1ce2:	4298      	cmp	r0, r3
    1ce4:	d012      	beq.n	1d0c <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
    1ce6:	f240 4200 	movw	r2, #1024	; 0x400
    1cea:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1cee:	23ff      	movs	r3, #255	; 0xff
    1cf0:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1cf2:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1cf4:	2103      	movs	r1, #3
    1cf6:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    1cf8:	4008      	ands	r0, r1
    1cfa:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    1cfc:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1cfe:	f240 4200 	movw	r2, #1024	; 0x400
    1d02:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d06:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d0fc      	beq.n	1d06 <_set_performance_level+0x32>
			;
	}
}
    1d0c:	4770      	bx	lr

00001d0e <RTC_init>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d0e:	f242 4200 	movw	r2, #9216	; 0x2400
    1d12:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d16:	2101      	movs	r1, #1
    1d18:	6913      	ldr	r3, [r2, #16]
    1d1a:	4219      	tst	r1, r3
    1d1c:	d1fc      	bne.n	1d18 <RTC_init+0xa>
    1d1e:	f242 4200 	movw	r2, #9216	; 0x2400
    1d22:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d26:	f248 0103 	movw	r1, #32771	; 0x8003
    1d2a:	6913      	ldr	r3, [r2, #16]
    1d2c:	4219      	tst	r1, r3
    1d2e:	d1fc      	bne.n	1d2a <RTC_init+0x1c>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1d30:	f242 4300 	movw	r3, #9216	; 0x2400
    1d34:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1d38:	881b      	ldrh	r3, [r3, #0]
 */
int8_t RTC_init()
{

	hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_SWRST);
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(RTC)) {
    1d3a:	079b      	lsls	r3, r3, #30
    1d3c:	d518      	bpl.n	1d70 <RTC_init+0x62>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1d3e:	f242 4300 	movw	r3, #9216	; 0x2400
    1d42:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1d46:	881a      	ldrh	r2, [r3, #0]
    1d48:	2102      	movs	r1, #2
    1d4a:	438a      	bics	r2, r1
    1d4c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d4e:	f242 4200 	movw	r2, #9216	; 0x2400
    1d52:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d56:	f248 0103 	movw	r1, #32771	; 0x8003
    1d5a:	6913      	ldr	r3, [r2, #16]
    1d5c:	4219      	tst	r1, r3
    1d5e:	d1fc      	bne.n	1d5a <RTC_init+0x4c>
    1d60:	f242 4200 	movw	r2, #9216	; 0x2400
    1d64:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d68:	2102      	movs	r1, #2
    1d6a:	6913      	ldr	r3, [r2, #16]
    1d6c:	4219      	tst	r1, r3
    1d6e:	d1fc      	bne.n	1d6a <RTC_init+0x5c>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    1d70:	f242 4300 	movw	r3, #9216	; 0x2400
    1d74:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1d78:	881a      	ldrh	r2, [r3, #0]
    1d7a:	2101      	movs	r1, #1
    1d7c:	430a      	orrs	r2, r1
    1d7e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d80:	f242 4200 	movw	r2, #9216	; 0x2400
    1d84:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d88:	6913      	ldr	r3, [r2, #16]
    1d8a:	4219      	tst	r1, r3
    1d8c:	d1fc      	bne.n	1d88 <RTC_init+0x7a>
    1d8e:	f242 4200 	movw	r2, #9216	; 0x2400
    1d92:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d96:	2101      	movs	r1, #1
    1d98:	6913      	ldr	r3, [r2, #16]
    1d9a:	4219      	tst	r1, r3
    1d9c:	d1fc      	bne.n	1d98 <RTC_init+0x8a>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d9e:	f242 4300 	movw	r3, #9216	; 0x2400
    1da2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1da6:	2280      	movs	r2, #128	; 0x80
    1da8:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1daa:	f242 4200 	movw	r2, #9216	; 0x2400
    1dae:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1db2:	f248 0103 	movw	r1, #32771	; 0x8003
    1db6:	6913      	ldr	r3, [r2, #16]
    1db8:	4219      	tst	r1, r3
    1dba:	d1fc      	bne.n	1db6 <RTC_init+0xa8>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1dbc:	f242 4300 	movw	r3, #9216	; 0x2400
    1dc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1dc4:	f240 1200 	movw	r2, #256	; 0x100
    1dc8:	605a      	str	r2, [r3, #4]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1dca:	f640 42cc 	movw	r2, #3276	; 0xccc
    1dce:	621a      	str	r2, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dd0:	f242 4200 	movw	r2, #9216	; 0x2400
    1dd4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1dd8:	2120      	movs	r1, #32
    1dda:	6913      	ldr	r3, [r2, #16]
    1ddc:	4219      	tst	r1, r3
    1dde:	d1fc      	bne.n	1dda <RTC_init+0xcc>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1de0:	f242 4200 	movw	r2, #9216	; 0x2400
    1de4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1de8:	8813      	ldrh	r3, [r2, #0]
	tmp &= ~RTC_MODE0_CTRLA_ENABLE;
    1dea:	2102      	movs	r1, #2
    1dec:	438b      	bics	r3, r1
	tmp |= value << RTC_MODE0_CTRLA_ENABLE_Pos;
    1dee:	430b      	orrs	r3, r1
	((Rtc *)hw)->MODE0.CTRLA.reg = tmp;
    1df0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1df2:	f242 4200 	movw	r2, #9216	; 0x2400
    1df6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1dfa:	f248 0103 	movw	r1, #32771	; 0x8003
    1dfe:	6913      	ldr	r3, [r2, #16]
    1e00:	4219      	tst	r1, r3
    1e02:	d1fc      	bne.n	1dfe <RTC_init+0xf0>
	//		 | 0 << RTC_TAMPID_TAMPID3_Pos); /* Active Layer Internal Select n: disabled */

	hri_rtcmode0_write_CTRLA_ENABLE_bit(RTC, 1 << RTC_MODE0_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e04:	2000      	movs	r0, #0
    1e06:	4770      	bx	lr

00001e08 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1e08:	b530      	push	{r4, r5, lr}
    1e0a:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1e0c:	aa01      	add	r2, sp, #4
    1e0e:	f243 2330 	movw	r3, #12848	; 0x3230
    1e12:	f2c0 0300 	movt	r3, #0
    1e16:	cb32      	ldmia	r3!, {r1, r4, r5}
    1e18:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1e1a:	0003      	movs	r3, r0
    1e1c:	9a01      	ldr	r2, [sp, #4]
    1e1e:	4282      	cmp	r2, r0
    1e20:	d00c      	beq.n	1e3c <_sercom_get_hardware_index+0x34>
    1e22:	9a02      	ldr	r2, [sp, #8]
    1e24:	4282      	cmp	r2, r0
    1e26:	d007      	beq.n	1e38 <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
    1e28:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1e2a:	9a03      	ldr	r2, [sp, #12]
    1e2c:	429a      	cmp	r2, r3
    1e2e:	d001      	beq.n	1e34 <_sercom_get_hardware_index+0x2c>
}
    1e30:	b005      	add	sp, #20
    1e32:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e34:	3002      	adds	r0, #2
    1e36:	e002      	b.n	1e3e <_sercom_get_hardware_index+0x36>
    1e38:	2001      	movs	r0, #1
    1e3a:	e000      	b.n	1e3e <_sercom_get_hardware_index+0x36>
    1e3c:	2000      	movs	r0, #0
			return i;
    1e3e:	b2c0      	uxtb	r0, r0
    1e40:	e7f6      	b.n	1e30 <_sercom_get_hardware_index+0x28>

00001e42 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e42:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e44:	07db      	lsls	r3, r3, #31
    1e46:	d409      	bmi.n	1e5c <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1e48:	6803      	ldr	r3, [r0, #0]
    1e4a:	2202      	movs	r2, #2
    1e4c:	4313      	orrs	r3, r2
    1e4e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e50:	3201      	adds	r2, #1
    1e52:	69c3      	ldr	r3, [r0, #28]
    1e54:	421a      	tst	r2, r3
    1e56:	d1fc      	bne.n	1e52 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1e58:	2000      	movs	r0, #0
}
    1e5a:	4770      	bx	lr
		return ERR_BUSY;
    1e5c:	2004      	movs	r0, #4
    1e5e:	4240      	negs	r0, r0
    1e60:	e7fb      	b.n	1e5a <_spi_sync_enable+0x18>
	...

00001e64 <_usart_init>:
{
    1e64:	b510      	push	{r4, lr}
    1e66:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e68:	f641 6309 	movw	r3, #7689	; 0x1e09
    1e6c:	f2c0 0300 	movt	r3, #0
    1e70:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e72:	2802      	cmp	r0, #2
    1e74:	d00b      	beq.n	1e8e <_usart_init+0x2a>
	ASSERT(false);
    1e76:	f243 2154 	movw	r1, #12884	; 0x3254
    1e7a:	f2c0 0100 	movt	r1, #0
    1e7e:	f240 2247 	movw	r2, #583	; 0x247
    1e82:	2000      	movs	r0, #0
    1e84:	f241 037b 	movw	r3, #4219	; 0x107b
    1e88:	f2c0 0300 	movt	r3, #0
    1e8c:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e8e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e90:	07db      	lsls	r3, r3, #31
    1e92:	d418      	bmi.n	1ec6 <_usart_init+0x62>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e94:	2203      	movs	r2, #3
    1e96:	69e3      	ldr	r3, [r4, #28]
    1e98:	421a      	tst	r2, r3
    1e9a:	d1fc      	bne.n	1e96 <_usart_init+0x32>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e9c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e9e:	079b      	lsls	r3, r3, #30
    1ea0:	d50b      	bpl.n	1eba <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1ea2:	6823      	ldr	r3, [r4, #0]
    1ea4:	2202      	movs	r2, #2
    1ea6:	4393      	bics	r3, r2
    1ea8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1eaa:	3201      	adds	r2, #1
    1eac:	69e3      	ldr	r3, [r4, #28]
    1eae:	421a      	tst	r2, r3
    1eb0:	d1fc      	bne.n	1eac <_usart_init+0x48>
    1eb2:	2202      	movs	r2, #2
    1eb4:	69e3      	ldr	r3, [r4, #28]
    1eb6:	421a      	tst	r2, r3
    1eb8:	d1fc      	bne.n	1eb4 <_usart_init+0x50>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1eba:	2305      	movs	r3, #5
    1ebc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ebe:	2203      	movs	r2, #3
    1ec0:	69e3      	ldr	r3, [r4, #28]
    1ec2:	421a      	tst	r2, r3
    1ec4:	d1fc      	bne.n	1ec0 <_usart_init+0x5c>
    1ec6:	2201      	movs	r2, #1
    1ec8:	69e3      	ldr	r3, [r4, #28]
    1eca:	421a      	tst	r2, r3
    1ecc:	d1fc      	bne.n	1ec8 <_usart_init+0x64>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1ece:	2304      	movs	r3, #4
    1ed0:	f2c4 0310 	movt	r3, #16400	; 0x4010
    1ed4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ed6:	2203      	movs	r2, #3
    1ed8:	69e3      	ldr	r3, [r4, #28]
    1eda:	421a      	tst	r2, r3
    1edc:	d1fc      	bne.n	1ed8 <_usart_init+0x74>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1ede:	23c0      	movs	r3, #192	; 0xc0
    1ee0:	029b      	lsls	r3, r3, #10
    1ee2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ee4:	220f      	movs	r2, #15
    1ee6:	69e3      	ldr	r3, [r4, #28]
    1ee8:	421a      	tst	r2, r3
    1eea:	d1fc      	bne.n	1ee6 <_usart_init+0x82>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1eec:	2302      	movs	r3, #2
    1eee:	f2c0 0370 	movt	r3, #112	; 0x70
    1ef2:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <_usart_init+0xa0>)
    1ef6:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1ef8:	2300      	movs	r3, #0
    1efa:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1efc:	2230      	movs	r2, #48	; 0x30
    1efe:	54a3      	strb	r3, [r4, r2]
}
    1f00:	2000      	movs	r0, #0
    1f02:	bd10      	pop	{r4, pc}
    1f04:	fffff62b 	.word	0xfffff62b

00001f08 <_get_i2cm_index>:
{
    1f08:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1f0a:	f641 6309 	movw	r3, #7689	; 0x1e09
    1f0e:	f2c0 0300 	movt	r3, #0
    1f12:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1f14:	2801      	cmp	r0, #1
    1f16:	d00e      	beq.n	1f36 <_get_i2cm_index+0x2e>
	ASSERT(false);
    1f18:	f243 2154 	movw	r1, #12884	; 0x3254
    1f1c:	f2c0 0100 	movt	r1, #0
    1f20:	f240 32a6 	movw	r2, #934	; 0x3a6
    1f24:	2000      	movs	r0, #0
    1f26:	f241 037b 	movw	r3, #4219	; 0x107b
    1f2a:	f2c0 0300 	movt	r3, #0
    1f2e:	4798      	blx	r3
	return -1;
    1f30:	2001      	movs	r0, #1
    1f32:	4240      	negs	r0, r0
}
    1f34:	bd10      	pop	{r4, pc}
			return i;
    1f36:	2000      	movs	r0, #0
    1f38:	e7fc      	b.n	1f34 <_get_i2cm_index+0x2c>
	...

00001f3c <_i2c_m_sync_init_impl>:
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	0005      	movs	r5, r0
    1f40:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1f42:	0008      	movs	r0, r1
    1f44:	f641 7309 	movw	r3, #7945	; 0x1f09
    1f48:	f2c0 0300 	movt	r3, #0
    1f4c:	4798      	blx	r3
    1f4e:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1f50:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1f52:	07db      	lsls	r3, r3, #31
    1f54:	d425      	bmi.n	1fa2 <_i2c_m_sync_init_impl+0x66>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1f56:	0043      	lsls	r3, r0, #1
    1f58:	181b      	adds	r3, r3, r0
    1f5a:	00db      	lsls	r3, r3, #3
    1f5c:	f243 2230 	movw	r2, #12848	; 0x3230
    1f60:	f2c0 0200 	movt	r2, #0
    1f64:	4694      	mov	ip, r2
    1f66:	4463      	add	r3, ip
    1f68:	6919      	ldr	r1, [r3, #16]
    1f6a:	231c      	movs	r3, #28
    1f6c:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6e:	2203      	movs	r2, #3
    1f70:	69e3      	ldr	r3, [r4, #28]
    1f72:	421a      	tst	r2, r3
    1f74:	d1fc      	bne.n	1f70 <_i2c_m_sync_init_impl+0x34>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1f76:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1f78:	079b      	lsls	r3, r3, #30
    1f7a:	d50b      	bpl.n	1f94 <_i2c_m_sync_init_impl+0x58>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1f7c:	6823      	ldr	r3, [r4, #0]
    1f7e:	2202      	movs	r2, #2
    1f80:	4393      	bics	r3, r2
    1f82:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f84:	3201      	adds	r2, #1
    1f86:	69e3      	ldr	r3, [r4, #28]
    1f88:	421a      	tst	r2, r3
    1f8a:	d1fc      	bne.n	1f86 <_i2c_m_sync_init_impl+0x4a>
    1f8c:	2202      	movs	r2, #2
    1f8e:	69e3      	ldr	r3, [r4, #28]
    1f90:	421a      	tst	r2, r3
    1f92:	d1fc      	bne.n	1f8e <_i2c_m_sync_init_impl+0x52>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1f94:	2301      	movs	r3, #1
    1f96:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f98:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f9a:	2203      	movs	r2, #3
    1f9c:	69e3      	ldr	r3, [r4, #28]
    1f9e:	421a      	tst	r2, r3
    1fa0:	d1fc      	bne.n	1f9c <_i2c_m_sync_init_impl+0x60>
    1fa2:	2201      	movs	r2, #1
    1fa4:	69e3      	ldr	r3, [r4, #28]
    1fa6:	421a      	tst	r2, r3
    1fa8:	d1fc      	bne.n	1fa4 <_i2c_m_sync_init_impl+0x68>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1faa:	0043      	lsls	r3, r0, #1
    1fac:	181b      	adds	r3, r3, r0
    1fae:	00db      	lsls	r3, r3, #3
    1fb0:	f243 2230 	movw	r2, #12848	; 0x3230
    1fb4:	f2c0 0200 	movt	r2, #0
    1fb8:	4694      	mov	ip, r2
    1fba:	4463      	add	r3, ip
    1fbc:	6919      	ldr	r1, [r3, #16]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1fbe:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fc0:	2203      	movs	r2, #3
    1fc2:	69e3      	ldr	r3, [r4, #28]
    1fc4:	421a      	tst	r2, r3
    1fc6:	d1fc      	bne.n	1fc2 <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1fc8:	0043      	lsls	r3, r0, #1
    1fca:	181b      	adds	r3, r3, r0
    1fcc:	00db      	lsls	r3, r3, #3
    1fce:	f243 2230 	movw	r2, #12848	; 0x3230
    1fd2:	f2c0 0200 	movt	r2, #0
    1fd6:	4694      	mov	ip, r2
    1fd8:	4463      	add	r3, ip
    1fda:	695b      	ldr	r3, [r3, #20]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1fdc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fde:	2204      	movs	r2, #4
    1fe0:	69e3      	ldr	r3, [r4, #28]
    1fe2:	421a      	tst	r2, r3
    1fe4:	d1fc      	bne.n	1fe0 <_i2c_m_sync_init_impl+0xa4>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1fe6:	0043      	lsls	r3, r0, #1
    1fe8:	181b      	adds	r3, r3, r0
    1fea:	00db      	lsls	r3, r3, #3
    1fec:	f243 2230 	movw	r2, #12848	; 0x3230
    1ff0:	f2c0 0200 	movt	r2, #0
    1ff4:	4694      	mov	ip, r2
    1ff6:	4463      	add	r3, ip
    1ff8:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1ffa:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1ffc:	0189      	lsls	r1, r1, #6
    1ffe:	0f89      	lsrs	r1, r1, #30
    2000:	81a9      	strh	r1, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2002:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2004:	4e0c      	ldr	r6, [pc, #48]	; (2038 <_i2c_m_sync_init_impl+0xfc>)
    2006:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2008:	2301      	movs	r3, #1
    200a:	428b      	cmp	r3, r1
    200c:	419b      	sbcs	r3, r3
    200e:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    2010:	039b      	lsls	r3, r3, #14
    2012:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    2014:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2016:	2204      	movs	r2, #4
    2018:	69e3      	ldr	r3, [r4, #28]
    201a:	421a      	tst	r2, r3
    201c:	d1fc      	bne.n	2018 <_i2c_m_sync_init_impl+0xdc>
	service->trise = _i2cms[i].trise;
    201e:	0043      	lsls	r3, r0, #1
    2020:	1818      	adds	r0, r3, r0
    2022:	00c0      	lsls	r0, r0, #3
    2024:	f243 2330 	movw	r3, #12848	; 0x3230
    2028:	f2c0 0300 	movt	r3, #0
    202c:	469c      	mov	ip, r3
    202e:	4460      	add	r0, ip
    2030:	8bc3      	ldrh	r3, [r0, #30]
    2032:	81eb      	strh	r3, [r5, #14]
}
    2034:	2000      	movs	r0, #0
    2036:	bd70      	pop	{r4, r5, r6, pc}
    2038:	ffffbfff 	.word	0xffffbfff

0000203c <_usart_sync_init>:
{
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	0005      	movs	r5, r0
    2040:	000c      	movs	r4, r1
	ASSERT(device);
    2042:	f243 2154 	movw	r1, #12884	; 0x3254
    2046:	f2c0 0100 	movt	r1, #0
    204a:	1e43      	subs	r3, r0, #1
    204c:	4198      	sbcs	r0, r3
    204e:	b2c0      	uxtb	r0, r0
    2050:	22bb      	movs	r2, #187	; 0xbb
    2052:	f241 037b 	movw	r3, #4219	; 0x107b
    2056:	f2c0 0300 	movt	r3, #0
    205a:	4798      	blx	r3
	device->hw = hw;
    205c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    205e:	0020      	movs	r0, r4
    2060:	f641 6365 	movw	r3, #7781	; 0x1e65
    2064:	f2c0 0300 	movt	r3, #0
    2068:	4798      	blx	r3
}
    206a:	bd70      	pop	{r4, r5, r6, pc}

0000206c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    206c:	6803      	ldr	r3, [r0, #0]
    206e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    2070:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2072:	4770      	bx	lr

00002074 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2074:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    2076:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2078:	b2c0      	uxtb	r0, r0
}
    207a:	4770      	bx	lr

0000207c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    207c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    207e:	7e18      	ldrb	r0, [r3, #24]
    2080:	2301      	movs	r3, #1
    2082:	4018      	ands	r0, r3
}
    2084:	4770      	bx	lr

00002086 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    2086:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2088:	7e18      	ldrb	r0, [r3, #24]
    208a:	0780      	lsls	r0, r0, #30
    208c:	0fc0      	lsrs	r0, r0, #31
}
    208e:	4770      	bx	lr

00002090 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2090:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2092:	7e18      	ldrb	r0, [r3, #24]
    2094:	0740      	lsls	r0, r0, #29
    2096:	0fc0      	lsrs	r0, r0, #31
}
    2098:	4770      	bx	lr

0000209a <_i2c_m_sync_init>:
{
    209a:	b570      	push	{r4, r5, r6, lr}
    209c:	0004      	movs	r4, r0
    209e:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    20a0:	f243 2154 	movw	r1, #12884	; 0x3254
    20a4:	f2c0 0100 	movt	r1, #0
    20a8:	1e43      	subs	r3, r0, #1
    20aa:	4198      	sbcs	r0, r3
    20ac:	b2c0      	uxtb	r0, r0
    20ae:	f240 5218 	movw	r2, #1304	; 0x518
    20b2:	f241 037b 	movw	r3, #4219	; 0x107b
    20b6:	f2c0 0300 	movt	r3, #0
    20ba:	4798      	blx	r3
	i2c_dev->hw = hw;
    20bc:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    20be:	0029      	movs	r1, r5
    20c0:	0020      	movs	r0, r4
    20c2:	f641 733d 	movw	r3, #7997	; 0x1f3d
    20c6:	f2c0 0300 	movt	r3, #0
    20ca:	4798      	blx	r3
}
    20cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000020d0 <_i2c_m_sync_transfer>:
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	46de      	mov	lr, fp
    20d4:	4657      	mov	r7, sl
    20d6:	464e      	mov	r6, r9
    20d8:	4645      	mov	r5, r8
    20da:	b5e0      	push	{r5, r6, r7, lr}
    20dc:	b083      	sub	sp, #12
    20de:	0005      	movs	r5, r0
    20e0:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    20e2:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    20e4:	0006      	movs	r6, r0
    20e6:	1e73      	subs	r3, r6, #1
    20e8:	419e      	sbcs	r6, r3
    20ea:	b2f3      	uxtb	r3, r6
    20ec:	9301      	str	r3, [sp, #4]
    20ee:	f243 2654 	movw	r6, #12884	; 0x3254
    20f2:	f2c0 0600 	movt	r6, #0
    20f6:	f240 52d0 	movw	r2, #1488	; 0x5d0
    20fa:	0031      	movs	r1, r6
    20fc:	0018      	movs	r0, r3
    20fe:	f241 077b 	movw	r7, #4219	; 0x107b
    2102:	f2c0 0700 	movt	r7, #0
    2106:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    2108:	6928      	ldr	r0, [r5, #16]
    210a:	1e43      	subs	r3, r0, #1
    210c:	4198      	sbcs	r0, r3
    210e:	b2c0      	uxtb	r0, r0
    2110:	f240 52d1 	movw	r2, #1489	; 0x5d1
    2114:	0031      	movs	r1, r6
    2116:	47b8      	blx	r7
	ASSERT(msg);
    2118:	4640      	mov	r0, r8
    211a:	1e43      	subs	r3, r0, #1
    211c:	4198      	sbcs	r0, r3
    211e:	b2c0      	uxtb	r0, r0
    2120:	f240 52d2 	movw	r2, #1490	; 0x5d2
    2124:	0031      	movs	r1, r6
    2126:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2128:	886b      	ldrh	r3, [r5, #2]
    212a:	05db      	lsls	r3, r3, #23
    212c:	d500      	bpl.n	2130 <_i2c_m_sync_transfer+0x60>
    212e:	e21e      	b.n	256e <_i2c_m_sync_transfer+0x49e>
	msg->flags |= I2C_M_BUSY;
    2130:	4643      	mov	r3, r8
    2132:	885b      	ldrh	r3, [r3, #2]
    2134:	f240 1200 	movw	r2, #256	; 0x100
    2138:	4313      	orrs	r3, r2
    213a:	4642      	mov	r2, r8
    213c:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    213e:	002b      	movs	r3, r5
    2140:	ca43      	ldmia	r2!, {r0, r1, r6}
    2142:	c343      	stmia	r3!, {r0, r1, r6}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2144:	6863      	ldr	r3, [r4, #4]
    2146:	f240 1200 	movw	r2, #256	; 0x100
    214a:	4313      	orrs	r3, r2
    214c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    214e:	3afc      	subs	r2, #252	; 0xfc
    2150:	69e3      	ldr	r3, [r4, #28]
    2152:	421a      	tst	r2, r3
    2154:	d1fc      	bne.n	2150 <_i2c_m_sync_transfer+0x80>
	void *             hw    = i2c_dev->hw;
    2156:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2158:	683b      	ldr	r3, [r7, #0]
    215a:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    215c:	f243 2154 	movw	r1, #12884	; 0x3254
    2160:	f2c0 0100 	movt	r1, #0
    2164:	f240 52a5 	movw	r2, #1445	; 0x5a5
    2168:	9801      	ldr	r0, [sp, #4]
    216a:	f241 037b 	movw	r3, #4219	; 0x107b
    216e:	f2c0 0300 	movt	r3, #0
    2172:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2174:	686b      	ldr	r3, [r5, #4]
    2176:	2b01      	cmp	r3, #1
    2178:	d05c      	beq.n	2234 <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	4ab6      	ldr	r2, [pc, #728]	; (2458 <_i2c_m_sync_transfer+0x388>)
    217e:	4013      	ands	r3, r2
    2180:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2182:	2204      	movs	r2, #4
    2184:	69fb      	ldr	r3, [r7, #28]
    2186:	421a      	tst	r2, r3
    2188:	d1fc      	bne.n	2184 <_i2c_m_sync_transfer+0xb4>
	if (msg->addr & I2C_M_TEN) {
    218a:	882b      	ldrh	r3, [r5, #0]
    218c:	055a      	lsls	r2, r3, #21
    218e:	d55e      	bpl.n	224e <_i2c_m_sync_transfer+0x17e>
		if (msg->flags & I2C_M_RD) {
    2190:	886a      	ldrh	r2, [r5, #2]
    2192:	07d2      	lsls	r2, r2, #31
    2194:	d504      	bpl.n	21a0 <_i2c_m_sync_transfer+0xd0>
			msg->flags |= I2C_M_TEN;
    2196:	886a      	ldrh	r2, [r5, #2]
    2198:	f240 4100 	movw	r1, #1024	; 0x400
    219c:	430a      	orrs	r2, r1
    219e:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    21a0:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    21a2:	f240 71fe 	movw	r1, #2046	; 0x7fe
    21a6:	4019      	ands	r1, r3
    21a8:	2204      	movs	r2, #4
    21aa:	69fb      	ldr	r3, [r7, #28]
    21ac:	421a      	tst	r2, r3
    21ae:	d1fc      	bne.n	21aa <_i2c_m_sync_transfer+0xda>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    21b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    21b2:	f244 0300 	movw	r3, #16384	; 0x4000
    21b6:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    21b8:	f248 0200 	movw	r2, #32768	; 0x8000
    21bc:	4313      	orrs	r3, r2
    21be:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    21c0:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21c2:	2204      	movs	r2, #4
    21c4:	69fb      	ldr	r3, [r7, #28]
    21c6:	421a      	tst	r2, r3
    21c8:	d1fc      	bne.n	21c4 <_i2c_m_sync_transfer+0xf4>
	void *   hw      = i2c_dev->hw;
    21ca:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    21cc:	7e0b      	ldrb	r3, [r1, #24]
    21ce:	b2db      	uxtb	r3, r3
    21d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    21d4:	2003      	movs	r0, #3
    21d6:	4218      	tst	r0, r3
    21d8:	d104      	bne.n	21e4 <_i2c_m_sync_transfer+0x114>
    21da:	7e0b      	ldrb	r3, [r1, #24]
    21dc:	b2db      	uxtb	r3, r3
    21de:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    21e0:	2a00      	cmp	r2, #0
    21e2:	d1f8      	bne.n	21d6 <_i2c_m_sync_transfer+0x106>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21e4:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21e6:	2104      	movs	r1, #4
    21e8:	69fa      	ldr	r2, [r7, #28]
    21ea:	4211      	tst	r1, r2
    21ec:	d1fc      	bne.n	21e8 <_i2c_m_sync_transfer+0x118>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    21ee:	8b7a      	ldrh	r2, [r7, #26]
    21f0:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    21f2:	07d9      	lsls	r1, r3, #31
    21f4:	d400      	bmi.n	21f8 <_i2c_m_sync_transfer+0x128>
    21f6:	e09f      	b.n	2338 <_i2c_m_sync_transfer+0x268>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    21f8:	0793      	lsls	r3, r2, #30
    21fa:	d53e      	bpl.n	227a <_i2c_m_sync_transfer+0x1aa>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    21fc:	2301      	movs	r3, #1
    21fe:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    2200:	886b      	ldrh	r3, [r5, #2]
    2202:	f241 0100 	movw	r1, #4096	; 0x1000
    2206:	430b      	orrs	r3, r1
    2208:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    220a:	886b      	ldrh	r3, [r5, #2]
    220c:	4993      	ldr	r1, [pc, #588]	; (245c <_i2c_m_sync_transfer+0x38c>)
    220e:	400b      	ands	r3, r1
    2210:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2212:	2001      	movs	r0, #1
    2214:	0003      	movs	r3, r0
    2216:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    2218:	4258      	negs	r0, r3
    221a:	4158      	adcs	r0, r3
    221c:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    221e:	886b      	ldrh	r3, [r5, #2]
    2220:	4a8e      	ldr	r2, [pc, #568]	; (245c <_i2c_m_sync_transfer+0x38c>)
    2222:	4013      	ands	r3, r2
    2224:	806b      	strh	r3, [r5, #2]
}
    2226:	b003      	add	sp, #12
    2228:	bc3c      	pop	{r2, r3, r4, r5}
    222a:	4690      	mov	r8, r2
    222c:	4699      	mov	r9, r3
    222e:	46a2      	mov	sl, r4
    2230:	46ab      	mov	fp, r5
    2232:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    2234:	464b      	mov	r3, r9
    2236:	011b      	lsls	r3, r3, #4
    2238:	d59f      	bpl.n	217a <_i2c_m_sync_transfer+0xaa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    223a:	687a      	ldr	r2, [r7, #4]
    223c:	2380      	movs	r3, #128	; 0x80
    223e:	02db      	lsls	r3, r3, #11
    2240:	4313      	orrs	r3, r2
    2242:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2244:	2204      	movs	r2, #4
    2246:	69fb      	ldr	r3, [r7, #28]
    2248:	421a      	tst	r2, r3
    224a:	d1fc      	bne.n	2246 <_i2c_m_sync_transfer+0x176>
    224c:	e79d      	b.n	218a <_i2c_m_sync_transfer+0xba>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    224e:	886a      	ldrh	r2, [r5, #2]
    2250:	005b      	lsls	r3, r3, #1
    2252:	21ff      	movs	r1, #255	; 0xff
    2254:	400b      	ands	r3, r1
    2256:	39fe      	subs	r1, #254	; 0xfe
    2258:	4011      	ands	r1, r2
    225a:	4319      	orrs	r1, r3
    225c:	2204      	movs	r2, #4
    225e:	69fb      	ldr	r3, [r7, #28]
    2260:	421a      	tst	r2, r3
    2262:	d1fc      	bne.n	225e <_i2c_m_sync_transfer+0x18e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2266:	f244 0300 	movw	r3, #16384	; 0x4000
    226a:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    226c:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    226e:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2270:	2204      	movs	r2, #4
    2272:	69fb      	ldr	r3, [r7, #28]
    2274:	421a      	tst	r2, r3
    2276:	d1fc      	bne.n	2272 <_i2c_m_sync_transfer+0x1a2>
    2278:	e7a7      	b.n	21ca <_i2c_m_sync_transfer+0xfa>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    227a:	0753      	lsls	r3, r2, #29
    227c:	d41b      	bmi.n	22b6 <_i2c_m_sync_transfer+0x1e6>
			if (msg->flags & I2C_M_TEN) {
    227e:	886b      	ldrh	r3, [r5, #2]
    2280:	055b      	lsls	r3, r3, #21
    2282:	d535      	bpl.n	22f0 <_i2c_m_sync_transfer+0x220>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2284:	882b      	ldrh	r3, [r5, #0]
    2286:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2288:	2106      	movs	r1, #6
    228a:	4019      	ands	r1, r3
    228c:	2204      	movs	r2, #4
    228e:	69fb      	ldr	r3, [r7, #28]
    2290:	421a      	tst	r2, r3
    2292:	d1fc      	bne.n	228e <_i2c_m_sync_transfer+0x1be>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2296:	f244 0300 	movw	r3, #16384	; 0x4000
    229a:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    229c:	22f1      	movs	r2, #241	; 0xf1
    229e:	4313      	orrs	r3, r2
    22a0:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    22a2:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22a4:	3aed      	subs	r2, #237	; 0xed
    22a6:	69fb      	ldr	r3, [r7, #28]
    22a8:	421a      	tst	r2, r3
    22aa:	d1fc      	bne.n	22a6 <_i2c_m_sync_transfer+0x1d6>
				msg->flags &= ~I2C_M_TEN;
    22ac:	886b      	ldrh	r3, [r5, #2]
    22ae:	4a6c      	ldr	r2, [pc, #432]	; (2460 <_i2c_m_sync_transfer+0x390>)
    22b0:	4013      	ands	r3, r2
    22b2:	806b      	strh	r3, [r5, #2]
    22b4:	e065      	b.n	2382 <_i2c_m_sync_transfer+0x2b2>
				if (msg->len > 0) {
    22b6:	686b      	ldr	r3, [r5, #4]
    22b8:	2b00      	cmp	r3, #0
    22ba:	dd04      	ble.n	22c6 <_i2c_m_sync_transfer+0x1f6>
					msg->flags |= I2C_M_FAIL;
    22bc:	886b      	ldrh	r3, [r5, #2]
    22be:	f241 0200 	movw	r2, #4096	; 0x1000
    22c2:	4313      	orrs	r3, r2
    22c4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    22c6:	886b      	ldrh	r3, [r5, #2]
    22c8:	b21b      	sxth	r3, r3
    22ca:	2b00      	cmp	r3, #0
    22cc:	db06      	blt.n	22dc <_i2c_m_sync_transfer+0x20c>
				msg->flags &= ~I2C_M_BUSY;
    22ce:	886b      	ldrh	r3, [r5, #2]
    22d0:	4a62      	ldr	r2, [pc, #392]	; (245c <_i2c_m_sync_transfer+0x38c>)
    22d2:	4013      	ands	r3, r2
    22d4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    22d6:	2002      	movs	r0, #2
    22d8:	4240      	negs	r0, r0
    22da:	e7a0      	b.n	221e <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22dc:	687a      	ldr	r2, [r7, #4]
    22de:	23c0      	movs	r3, #192	; 0xc0
    22e0:	029b      	lsls	r3, r3, #10
    22e2:	4313      	orrs	r3, r2
    22e4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22e6:	2304      	movs	r3, #4
    22e8:	69fa      	ldr	r2, [r7, #28]
    22ea:	4213      	tst	r3, r2
    22ec:	d1fc      	bne.n	22e8 <_i2c_m_sync_transfer+0x218>
    22ee:	e7ee      	b.n	22ce <_i2c_m_sync_transfer+0x1fe>
			if (msg->len == 0) {
    22f0:	686b      	ldr	r3, [r5, #4]
    22f2:	b993      	cbnz	r3, 231a <_i2c_m_sync_transfer+0x24a>
				if (msg->flags & I2C_M_STOP) {
    22f4:	886b      	ldrh	r3, [r5, #2]
    22f6:	b21b      	sxth	r3, r3
    22f8:	2b00      	cmp	r3, #0
    22fa:	db04      	blt.n	2306 <_i2c_m_sync_transfer+0x236>
				msg->flags &= ~I2C_M_BUSY;
    22fc:	886b      	ldrh	r3, [r5, #2]
    22fe:	4a57      	ldr	r2, [pc, #348]	; (245c <_i2c_m_sync_transfer+0x38c>)
    2300:	4013      	ands	r3, r2
    2302:	806b      	strh	r3, [r5, #2]
    2304:	e03d      	b.n	2382 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2306:	687a      	ldr	r2, [r7, #4]
    2308:	23c0      	movs	r3, #192	; 0xc0
    230a:	029b      	lsls	r3, r3, #10
    230c:	4313      	orrs	r3, r2
    230e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2310:	2204      	movs	r2, #4
    2312:	69fb      	ldr	r3, [r7, #28]
    2314:	421a      	tst	r2, r3
    2316:	d1fc      	bne.n	2312 <_i2c_m_sync_transfer+0x242>
    2318:	e7f0      	b.n	22fc <_i2c_m_sync_transfer+0x22c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    231a:	68ab      	ldr	r3, [r5, #8]
    231c:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    231e:	2328      	movs	r3, #40	; 0x28
    2320:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2322:	2204      	movs	r2, #4
    2324:	69fb      	ldr	r3, [r7, #28]
    2326:	421a      	tst	r2, r3
    2328:	d1fc      	bne.n	2324 <_i2c_m_sync_transfer+0x254>
				msg->buffer++;
    232a:	68ab      	ldr	r3, [r5, #8]
    232c:	3301      	adds	r3, #1
    232e:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2330:	686b      	ldr	r3, [r5, #4]
    2332:	3b01      	subs	r3, #1
    2334:	606b      	str	r3, [r5, #4]
    2336:	e024      	b.n	2382 <_i2c_m_sync_transfer+0x2b2>
	} else if (flags & SB_FLAG) {
    2338:	079b      	lsls	r3, r3, #30
    233a:	d522      	bpl.n	2382 <_i2c_m_sync_transfer+0x2b2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    233c:	686b      	ldr	r3, [r5, #4]
    233e:	2b00      	cmp	r3, #0
    2340:	d03f      	beq.n	23c2 <_i2c_m_sync_transfer+0x2f2>
    2342:	0752      	lsls	r2, r2, #29
    2344:	d43d      	bmi.n	23c2 <_i2c_m_sync_transfer+0x2f2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2346:	0136      	lsls	r6, r6, #4
    2348:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    234a:	3b01      	subs	r3, #1
    234c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    234e:	2b00      	cmp	r3, #0
    2350:	d000      	beq.n	2354 <_i2c_m_sync_transfer+0x284>
    2352:	e10f      	b.n	2574 <_i2c_m_sync_transfer+0x4a4>
    2354:	2e00      	cmp	r6, #0
    2356:	d100      	bne.n	235a <_i2c_m_sync_transfer+0x28a>
    2358:	e112      	b.n	2580 <_i2c_m_sync_transfer+0x4b0>
				if (msg->flags & I2C_M_STOP) {
    235a:	886b      	ldrh	r3, [r5, #2]
    235c:	b21b      	sxth	r3, r3
    235e:	2b00      	cmp	r3, #0
    2360:	db1c      	blt.n	239c <_i2c_m_sync_transfer+0x2cc>
				msg->flags &= ~I2C_M_BUSY;
    2362:	886b      	ldrh	r3, [r5, #2]
    2364:	4a3d      	ldr	r2, [pc, #244]	; (245c <_i2c_m_sync_transfer+0x38c>)
    2366:	4013      	ands	r3, r2
    2368:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    236a:	68a9      	ldr	r1, [r5, #8]
    236c:	1c4b      	adds	r3, r1, #1
    236e:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2370:	2204      	movs	r2, #4
    2372:	69fb      	ldr	r3, [r7, #28]
    2374:	421a      	tst	r2, r3
    2376:	d1fc      	bne.n	2372 <_i2c_m_sync_transfer+0x2a2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2378:	2328      	movs	r3, #40	; 0x28
    237a:	5cfb      	ldrb	r3, [r7, r3]
    237c:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    237e:	2302      	movs	r3, #2
    2380:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    2382:	2300      	movs	r3, #0
    2384:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2386:	f240 1a00 	movw	sl, #256	; 0x100
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    238a:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    238c:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    238e:	f240 0c01 	movw	ip, #1
	} else if (flags & SB_FLAG) {
    2392:	f240 0902 	movw	r9, #2
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2396:	f240 0b28 	movw	fp, #40	; 0x28
    239a:	e0b3      	b.n	2504 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	4a2f      	ldr	r2, [pc, #188]	; (245c <_i2c_m_sync_transfer+0x38c>)
    23a0:	4013      	ands	r3, r2
    23a2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23a4:	3206      	adds	r2, #6
    23a6:	32ff      	adds	r2, #255	; 0xff
    23a8:	69fb      	ldr	r3, [r7, #28]
    23aa:	421a      	tst	r2, r3
    23ac:	d1fc      	bne.n	23a8 <_i2c_m_sync_transfer+0x2d8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23ae:	687a      	ldr	r2, [r7, #4]
    23b0:	23c0      	movs	r3, #192	; 0xc0
    23b2:	029b      	lsls	r3, r3, #10
    23b4:	4313      	orrs	r3, r2
    23b6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23b8:	2204      	movs	r2, #4
    23ba:	69fb      	ldr	r3, [r7, #28]
    23bc:	421a      	tst	r2, r3
    23be:	d1fc      	bne.n	23ba <_i2c_m_sync_transfer+0x2ea>
    23c0:	e7cf      	b.n	2362 <_i2c_m_sync_transfer+0x292>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23c2:	2302      	movs	r3, #2
    23c4:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    23c6:	2002      	movs	r0, #2
    23c8:	4240      	negs	r0, r0
    23ca:	e728      	b.n	221e <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23cc:	6862      	ldr	r2, [r4, #4]
    23ce:	23c0      	movs	r3, #192	; 0xc0
    23d0:	029b      	lsls	r3, r3, #10
    23d2:	4313      	orrs	r3, r2
    23d4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23d6:	2204      	movs	r2, #4
    23d8:	69e3      	ldr	r3, [r4, #28]
    23da:	421a      	tst	r2, r3
    23dc:	d1fc      	bne.n	23d8 <_i2c_m_sync_transfer+0x308>
    23de:	e0a7      	b.n	2530 <_i2c_m_sync_transfer+0x460>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    23e0:	4202      	tst	r2, r0
    23e2:	d11b      	bne.n	241c <_i2c_m_sync_transfer+0x34c>
			if (msg->flags & I2C_M_TEN) {
    23e4:	886b      	ldrh	r3, [r5, #2]
    23e6:	055b      	lsls	r3, r3, #21
    23e8:	d53c      	bpl.n	2464 <_i2c_m_sync_transfer+0x394>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    23ea:	882b      	ldrh	r3, [r5, #0]
    23ec:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23ee:	2006      	movs	r0, #6
    23f0:	4018      	ands	r0, r3
    23f2:	69e3      	ldr	r3, [r4, #28]
    23f4:	421a      	tst	r2, r3
    23f6:	d1fc      	bne.n	23f2 <_i2c_m_sync_transfer+0x322>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    23f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    23fa:	f244 0300 	movw	r3, #16384	; 0x4000
    23fe:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    2400:	26f1      	movs	r6, #241	; 0xf1
    2402:	4333      	orrs	r3, r6
    2404:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2406:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2408:	69e3      	ldr	r3, [r4, #28]
    240a:	421a      	tst	r2, r3
    240c:	d1fc      	bne.n	2408 <_i2c_m_sync_transfer+0x338>
				msg->flags &= ~I2C_M_TEN;
    240e:	886b      	ldrh	r3, [r5, #2]
    2410:	4813      	ldr	r0, [pc, #76]	; (2460 <_i2c_m_sync_transfer+0x390>)
    2412:	4003      	ands	r3, r0
    2414:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    2416:	2300      	movs	r3, #0
    2418:	9301      	str	r3, [sp, #4]
    241a:	e073      	b.n	2504 <_i2c_m_sync_transfer+0x434>
				if (msg->len > 0) {
    241c:	686b      	ldr	r3, [r5, #4]
    241e:	2b00      	cmp	r3, #0
    2420:	dd04      	ble.n	242c <_i2c_m_sync_transfer+0x35c>
					msg->flags |= I2C_M_FAIL;
    2422:	886b      	ldrh	r3, [r5, #2]
    2424:	f241 0000 	movw	r0, #4096	; 0x1000
    2428:	4303      	orrs	r3, r0
    242a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    242c:	886b      	ldrh	r3, [r5, #2]
    242e:	b21b      	sxth	r3, r3
    2430:	2b00      	cmp	r3, #0
    2432:	db07      	blt.n	2444 <_i2c_m_sync_transfer+0x374>
				msg->flags &= ~I2C_M_BUSY;
    2434:	886b      	ldrh	r3, [r5, #2]
    2436:	4809      	ldr	r0, [pc, #36]	; (245c <_i2c_m_sync_transfer+0x38c>)
    2438:	4003      	ands	r3, r0
    243a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    243c:	2302      	movs	r3, #2
    243e:	425b      	negs	r3, r3
    2440:	9301      	str	r3, [sp, #4]
    2442:	e05f      	b.n	2504 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2444:	6860      	ldr	r0, [r4, #4]
    2446:	23c0      	movs	r3, #192	; 0xc0
    2448:	029b      	lsls	r3, r3, #10
    244a:	4303      	orrs	r3, r0
    244c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    244e:	69e3      	ldr	r3, [r4, #28]
    2450:	421a      	tst	r2, r3
    2452:	d1fc      	bne.n	244e <_i2c_m_sync_transfer+0x37e>
    2454:	e7ee      	b.n	2434 <_i2c_m_sync_transfer+0x364>
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	fffbffff 	.word	0xfffbffff
    245c:	fffffeff 	.word	0xfffffeff
    2460:	fffffbff 	.word	0xfffffbff
			if (msg->len == 0) {
    2464:	686b      	ldr	r3, [r5, #4]
    2466:	b99b      	cbnz	r3, 2490 <_i2c_m_sync_transfer+0x3c0>
				if (msg->flags & I2C_M_STOP) {
    2468:	886b      	ldrh	r3, [r5, #2]
    246a:	b21b      	sxth	r3, r3
    246c:	2b00      	cmp	r3, #0
    246e:	db06      	blt.n	247e <_i2c_m_sync_transfer+0x3ae>
				msg->flags &= ~I2C_M_BUSY;
    2470:	886b      	ldrh	r3, [r5, #2]
    2472:	4863      	ldr	r0, [pc, #396]	; (2600 <_i2c_m_sync_transfer+0x530>)
    2474:	4003      	ands	r3, r0
    2476:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    2478:	2300      	movs	r3, #0
    247a:	9301      	str	r3, [sp, #4]
    247c:	e042      	b.n	2504 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    247e:	6860      	ldr	r0, [r4, #4]
    2480:	23c0      	movs	r3, #192	; 0xc0
    2482:	029b      	lsls	r3, r3, #10
    2484:	4303      	orrs	r3, r0
    2486:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2488:	69e3      	ldr	r3, [r4, #28]
    248a:	421a      	tst	r2, r3
    248c:	d1fc      	bne.n	2488 <_i2c_m_sync_transfer+0x3b8>
    248e:	e7ef      	b.n	2470 <_i2c_m_sync_transfer+0x3a0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2490:	68ab      	ldr	r3, [r5, #8]
    2492:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2494:	4658      	mov	r0, fp
    2496:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2498:	69e3      	ldr	r3, [r4, #28]
    249a:	421a      	tst	r2, r3
    249c:	d1fc      	bne.n	2498 <_i2c_m_sync_transfer+0x3c8>
				msg->buffer++;
    249e:	68ab      	ldr	r3, [r5, #8]
    24a0:	3301      	adds	r3, #1
    24a2:	60ab      	str	r3, [r5, #8]
				msg->len--;
    24a4:	686b      	ldr	r3, [r5, #4]
    24a6:	3b01      	subs	r3, #1
    24a8:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    24aa:	2300      	movs	r3, #0
    24ac:	9301      	str	r3, [sp, #4]
    24ae:	e029      	b.n	2504 <_i2c_m_sync_transfer+0x434>
	return I2C_OK;
    24b0:	2700      	movs	r7, #0
    24b2:	9701      	str	r7, [sp, #4]
	} else if (flags & SB_FLAG) {
    24b4:	464f      	mov	r7, r9
    24b6:	421f      	tst	r7, r3
    24b8:	d024      	beq.n	2504 <_i2c_m_sync_transfer+0x434>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    24ba:	686b      	ldr	r3, [r5, #4]
    24bc:	2b00      	cmp	r3, #0
    24be:	d04e      	beq.n	255e <_i2c_m_sync_transfer+0x48e>
    24c0:	4202      	tst	r2, r0
    24c2:	d14c      	bne.n	255e <_i2c_m_sync_transfer+0x48e>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    24c4:	0ef6      	lsrs	r6, r6, #27
    24c6:	4660      	mov	r0, ip
    24c8:	4006      	ands	r6, r0
			msg->len--;
    24ca:	3b01      	subs	r3, #1
    24cc:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    24ce:	2b00      	cmp	r3, #0
    24d0:	d000      	beq.n	24d4 <_i2c_m_sync_transfer+0x404>
    24d2:	e082      	b.n	25da <_i2c_m_sync_transfer+0x50a>
    24d4:	2e00      	cmp	r6, #0
    24d6:	d100      	bne.n	24da <_i2c_m_sync_transfer+0x40a>
    24d8:	e085      	b.n	25e6 <_i2c_m_sync_transfer+0x516>
				if (msg->flags & I2C_M_STOP) {
    24da:	886b      	ldrh	r3, [r5, #2]
    24dc:	b21b      	sxth	r3, r3
    24de:	2b00      	cmp	r3, #0
    24e0:	db2d      	blt.n	253e <_i2c_m_sync_transfer+0x46e>
				msg->flags &= ~I2C_M_BUSY;
    24e2:	886b      	ldrh	r3, [r5, #2]
    24e4:	4846      	ldr	r0, [pc, #280]	; (2600 <_i2c_m_sync_transfer+0x530>)
    24e6:	4003      	ands	r3, r0
    24e8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    24ea:	68a8      	ldr	r0, [r5, #8]
    24ec:	1c43      	adds	r3, r0, #1
    24ee:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24f0:	69e3      	ldr	r3, [r4, #28]
    24f2:	421a      	tst	r2, r3
    24f4:	d1fc      	bne.n	24f0 <_i2c_m_sync_transfer+0x420>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    24f6:	465b      	mov	r3, fp
    24f8:	5ce3      	ldrb	r3, [r4, r3]
    24fa:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24fc:	464b      	mov	r3, r9
    24fe:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    2500:	2300      	movs	r3, #0
    2502:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2504:	886b      	ldrh	r3, [r5, #2]
    2506:	4650      	mov	r0, sl
    2508:	4203      	tst	r3, r0
    250a:	d02e      	beq.n	256a <_i2c_m_sync_transfer+0x49a>
	void *   hw      = i2c_dev->hw;
    250c:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    250e:	7e33      	ldrb	r3, [r6, #24]
    2510:	b2db      	uxtb	r3, r3
    2512:	f64f 70ff 	movw	r0, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2516:	4219      	tst	r1, r3
    2518:	d140      	bne.n	259c <_i2c_m_sync_transfer+0x4cc>
    251a:	7e33      	ldrb	r3, [r6, #24]
    251c:	b2db      	uxtb	r3, r3
    251e:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    2520:	2800      	cmp	r0, #0
    2522:	d1f8      	bne.n	2516 <_i2c_m_sync_transfer+0x446>
			if (msg->flags & I2C_M_STOP) {
    2524:	4643      	mov	r3, r8
    2526:	885b      	ldrh	r3, [r3, #2]
    2528:	b21b      	sxth	r3, r3
    252a:	2b00      	cmp	r3, #0
    252c:	da00      	bge.n	2530 <_i2c_m_sync_transfer+0x460>
    252e:	e74d      	b.n	23cc <_i2c_m_sync_transfer+0x2fc>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2530:	886b      	ldrh	r3, [r5, #2]
    2532:	4a33      	ldr	r2, [pc, #204]	; (2600 <_i2c_m_sync_transfer+0x530>)
    2534:	4013      	ands	r3, r2
    2536:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    2538:	2005      	movs	r0, #5
    253a:	4240      	negs	r0, r0
			return ret;
    253c:	e673      	b.n	2226 <_i2c_m_sync_transfer+0x156>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    253e:	6863      	ldr	r3, [r4, #4]
    2540:	482f      	ldr	r0, [pc, #188]	; (2600 <_i2c_m_sync_transfer+0x530>)
    2542:	4003      	ands	r3, r0
    2544:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2546:	69e3      	ldr	r3, [r4, #28]
    2548:	421a      	tst	r2, r3
    254a:	d1fc      	bne.n	2546 <_i2c_m_sync_transfer+0x476>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    254c:	6860      	ldr	r0, [r4, #4]
    254e:	23c0      	movs	r3, #192	; 0xc0
    2550:	029b      	lsls	r3, r3, #10
    2552:	4303      	orrs	r3, r0
    2554:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2556:	69e3      	ldr	r3, [r4, #28]
    2558:	421a      	tst	r2, r3
    255a:	d1fc      	bne.n	2556 <_i2c_m_sync_transfer+0x486>
    255c:	e7c1      	b.n	24e2 <_i2c_m_sync_transfer+0x412>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    255e:	464b      	mov	r3, r9
    2560:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2562:	2302      	movs	r3, #2
    2564:	425b      	negs	r3, r3
    2566:	9301      	str	r3, [sp, #4]
    2568:	e7cc      	b.n	2504 <_i2c_m_sync_transfer+0x434>
    256a:	9801      	ldr	r0, [sp, #4]
    256c:	e65b      	b.n	2226 <_i2c_m_sync_transfer+0x156>
		return I2C_ERR_BUSY;
    256e:	2006      	movs	r0, #6
    2570:	4240      	negs	r0, r0
    2572:	e658      	b.n	2226 <_i2c_m_sync_transfer+0x156>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2574:	2b01      	cmp	r3, #1
    2576:	d000      	beq.n	257a <_i2c_m_sync_transfer+0x4aa>
    2578:	e6f7      	b.n	236a <_i2c_m_sync_transfer+0x29a>
    257a:	2e00      	cmp	r6, #0
    257c:	d100      	bne.n	2580 <_i2c_m_sync_transfer+0x4b0>
    257e:	e6f4      	b.n	236a <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2580:	687a      	ldr	r2, [r7, #4]
    2582:	2380      	movs	r3, #128	; 0x80
    2584:	02db      	lsls	r3, r3, #11
    2586:	4313      	orrs	r3, r2
    2588:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    258a:	2204      	movs	r2, #4
    258c:	69fb      	ldr	r3, [r7, #28]
    258e:	421a      	tst	r2, r3
    2590:	d1fc      	bne.n	258c <_i2c_m_sync_transfer+0x4bc>
			if (msg->len == 0) {
    2592:	686b      	ldr	r3, [r5, #4]
    2594:	2b00      	cmp	r3, #0
    2596:	d100      	bne.n	259a <_i2c_m_sync_transfer+0x4ca>
    2598:	e6df      	b.n	235a <_i2c_m_sync_transfer+0x28a>
    259a:	e6e6      	b.n	236a <_i2c_m_sync_transfer+0x29a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    259c:	6826      	ldr	r6, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    259e:	69e0      	ldr	r0, [r4, #28]
    25a0:	4202      	tst	r2, r0
    25a2:	d1fc      	bne.n	259e <_i2c_m_sync_transfer+0x4ce>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    25a4:	8b60      	ldrh	r0, [r4, #26]
    25a6:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    25a8:	4667      	mov	r7, ip
    25aa:	421f      	tst	r7, r3
    25ac:	d100      	bne.n	25b0 <_i2c_m_sync_transfer+0x4e0>
    25ae:	e77f      	b.n	24b0 <_i2c_m_sync_transfer+0x3e0>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    25b0:	464b      	mov	r3, r9
    25b2:	4203      	tst	r3, r0
    25b4:	d100      	bne.n	25b8 <_i2c_m_sync_transfer+0x4e8>
    25b6:	e713      	b.n	23e0 <_i2c_m_sync_transfer+0x310>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    25b8:	7627      	strb	r7, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    25ba:	886b      	ldrh	r3, [r5, #2]
    25bc:	f241 0600 	movw	r6, #4096	; 0x1000
    25c0:	4333      	orrs	r3, r6
    25c2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    25c4:	886b      	ldrh	r3, [r5, #2]
    25c6:	4e0e      	ldr	r6, [pc, #56]	; (2600 <_i2c_m_sync_transfer+0x530>)
    25c8:	4033      	ands	r3, r6
    25ca:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    25cc:	4663      	mov	r3, ip
    25ce:	4003      	ands	r3, r0
			return I2C_ERR_BAD_ADDRESS;
    25d0:	4258      	negs	r0, r3
    25d2:	4158      	adcs	r0, r3
    25d4:	1f43      	subs	r3, r0, #5
    25d6:	9301      	str	r3, [sp, #4]
    25d8:	e794      	b.n	2504 <_i2c_m_sync_transfer+0x434>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    25da:	2b01      	cmp	r3, #1
    25dc:	d000      	beq.n	25e0 <_i2c_m_sync_transfer+0x510>
    25de:	e784      	b.n	24ea <_i2c_m_sync_transfer+0x41a>
    25e0:	2e00      	cmp	r6, #0
    25e2:	d100      	bne.n	25e6 <_i2c_m_sync_transfer+0x516>
    25e4:	e781      	b.n	24ea <_i2c_m_sync_transfer+0x41a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    25e6:	6860      	ldr	r0, [r4, #4]
    25e8:	2380      	movs	r3, #128	; 0x80
    25ea:	02db      	lsls	r3, r3, #11
    25ec:	4303      	orrs	r3, r0
    25ee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25f0:	69e3      	ldr	r3, [r4, #28]
    25f2:	421a      	tst	r2, r3
    25f4:	d1fc      	bne.n	25f0 <_i2c_m_sync_transfer+0x520>
			if (msg->len == 0) {
    25f6:	686b      	ldr	r3, [r5, #4]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d100      	bne.n	25fe <_i2c_m_sync_transfer+0x52e>
    25fc:	e76d      	b.n	24da <_i2c_m_sync_transfer+0x40a>
    25fe:	e774      	b.n	24ea <_i2c_m_sync_transfer+0x41a>
    2600:	fffffeff 	.word	0xfffffeff

00002604 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2604:	b570      	push	{r4, r5, r6, lr}
    2606:	0005      	movs	r5, r0
    2608:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    260a:	0008      	movs	r0, r1
    260c:	f641 6309 	movw	r3, #7689	; 0x1e09
    2610:	f2c0 0300 	movt	r3, #0
    2614:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2616:	b190      	cbz	r0, 263e <_spi_m_sync_init+0x3a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2618:	2d00      	cmp	r5, #0
    261a:	d068      	beq.n	26ee <_spi_m_sync_init+0xea>
    261c:	f243 2154 	movw	r1, #12884	; 0x3254
    2620:	f2c0 0100 	movt	r1, #0
    2624:	1e60      	subs	r0, r4, #1
    2626:	4184      	sbcs	r4, r0
    2628:	b2e0      	uxtb	r0, r4
    262a:	f640 1236 	movw	r2, #2358	; 0x936
    262e:	f241 037b 	movw	r3, #4219	; 0x107b
    2632:	f2c0 0300 	movt	r3, #0
    2636:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2638:	200d      	movs	r0, #13
    263a:	4240      	negs	r0, r0
    263c:	e056      	b.n	26ec <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    263e:	2d00      	cmp	r5, #0
    2640:	d164      	bne.n	270c <_spi_m_sync_init+0x108>
    2642:	f243 2154 	movw	r1, #12884	; 0x3254
    2646:	f2c0 0100 	movt	r1, #0
    264a:	f640 1236 	movw	r2, #2358	; 0x936
    264e:	2000      	movs	r0, #0
    2650:	f241 037b 	movw	r3, #4219	; 0x107b
    2654:	f2c0 0300 	movt	r3, #0
    2658:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    265a:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    265c:	07db      	lsls	r3, r3, #31
    265e:	d418      	bmi.n	2692 <_spi_m_sync_init+0x8e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2660:	2203      	movs	r2, #3
    2662:	69e3      	ldr	r3, [r4, #28]
    2664:	421a      	tst	r2, r3
    2666:	d1fc      	bne.n	2662 <_spi_m_sync_init+0x5e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2668:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    266a:	079b      	lsls	r3, r3, #30
    266c:	d50b      	bpl.n	2686 <_spi_m_sync_init+0x82>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    266e:	6823      	ldr	r3, [r4, #0]
    2670:	2202      	movs	r2, #2
    2672:	4393      	bics	r3, r2
    2674:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2676:	3201      	adds	r2, #1
    2678:	69e3      	ldr	r3, [r4, #28]
    267a:	421a      	tst	r2, r3
    267c:	d1fc      	bne.n	2678 <_spi_m_sync_init+0x74>
    267e:	2202      	movs	r2, #2
    2680:	69e3      	ldr	r3, [r4, #28]
    2682:	421a      	tst	r2, r3
    2684:	d1fc      	bne.n	2680 <_spi_m_sync_init+0x7c>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2686:	230d      	movs	r3, #13
    2688:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    268a:	2203      	movs	r2, #3
    268c:	69e3      	ldr	r3, [r4, #28]
    268e:	421a      	tst	r2, r3
    2690:	d1fc      	bne.n	268c <_spi_m_sync_init+0x88>
    2692:	2201      	movs	r2, #1
    2694:	69e3      	ldr	r3, [r4, #28]
    2696:	421a      	tst	r2, r3
    2698:	d1fc      	bne.n	2694 <_spi_m_sync_init+0x90>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    269a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    269c:	f243 2154 	movw	r1, #12884	; 0x3254
    26a0:	f2c0 0100 	movt	r1, #0
    26a4:	0020      	movs	r0, r4
    26a6:	1e43      	subs	r3, r0, #1
    26a8:	4198      	sbcs	r0, r3
    26aa:	b2c0      	uxtb	r0, r0
    26ac:	f640 1200 	movw	r2, #2304	; 0x900
    26b0:	f241 037b 	movw	r3, #4219	; 0x107b
    26b4:	f2c0 0300 	movt	r3, #0
    26b8:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    26ba:	230c      	movs	r3, #12
    26bc:	f2c0 0301 	movt	r3, #1
    26c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26c2:	2203      	movs	r2, #3
    26c4:	69e3      	ldr	r3, [r4, #28]
    26c6:	421a      	tst	r2, r3
    26c8:	d1fc      	bne.n	26c4 <_spi_m_sync_init+0xc0>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    26ca:	2380      	movs	r3, #128	; 0x80
    26cc:	029b      	lsls	r3, r3, #10
    26ce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26d0:	2207      	movs	r2, #7
    26d2:	69e3      	ldr	r3, [r4, #28]
    26d4:	421a      	tst	r2, r3
    26d6:	d1fc      	bne.n	26d2 <_spi_m_sync_init+0xce>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    26d8:	2301      	movs	r3, #1
    26da:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    26dc:	2100      	movs	r1, #0
    26de:	2230      	movs	r2, #48	; 0x30
    26e0:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    26e2:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    26e4:	33ff      	adds	r3, #255	; 0xff
    26e6:	33ff      	adds	r3, #255	; 0xff
    26e8:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    26ea:	2000      	movs	r0, #0
}
    26ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    26ee:	f243 2154 	movw	r1, #12884	; 0x3254
    26f2:	f2c0 0100 	movt	r1, #0
    26f6:	f640 1236 	movw	r2, #2358	; 0x936
    26fa:	2000      	movs	r0, #0
    26fc:	f241 037b 	movw	r3, #4219	; 0x107b
    2700:	f2c0 0300 	movt	r3, #0
    2704:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2706:	200d      	movs	r0, #13
    2708:	4240      	negs	r0, r0
    270a:	e7ef      	b.n	26ec <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    270c:	f243 2154 	movw	r1, #12884	; 0x3254
    2710:	f2c0 0100 	movt	r1, #0
    2714:	0020      	movs	r0, r4
    2716:	1e43      	subs	r3, r0, #1
    2718:	4198      	sbcs	r0, r3
    271a:	b2c0      	uxtb	r0, r0
    271c:	f640 1236 	movw	r2, #2358	; 0x936
    2720:	f241 037b 	movw	r3, #4219	; 0x107b
    2724:	f2c0 0300 	movt	r3, #0
    2728:	4798      	blx	r3
    272a:	e796      	b.n	265a <_spi_m_sync_init+0x56>

0000272c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    272c:	b510      	push	{r4, lr}
    272e:	0004      	movs	r4, r0
	ASSERT(dev && dev->prvt);
    2730:	b1a8      	cbz	r0, 275e <_spi_m_sync_enable+0x32>
    2732:	6800      	ldr	r0, [r0, #0]
    2734:	1e43      	subs	r3, r0, #1
    2736:	4198      	sbcs	r0, r3
    2738:	b2c0      	uxtb	r0, r0
    273a:	f243 2154 	movw	r1, #12884	; 0x3254
    273e:	f2c0 0100 	movt	r1, #0
    2742:	f640 1295 	movw	r2, #2453	; 0x995
    2746:	f241 037b 	movw	r3, #4219	; 0x107b
    274a:	f2c0 0300 	movt	r3, #0
    274e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2750:	6820      	ldr	r0, [r4, #0]
    2752:	f641 6343 	movw	r3, #7747	; 0x1e43
    2756:	f2c0 0300 	movt	r3, #0
    275a:	4798      	blx	r3
}
    275c:	bd10      	pop	{r4, pc}
    275e:	2000      	movs	r0, #0
    2760:	e7eb      	b.n	273a <_spi_m_sync_enable+0xe>

00002762 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2762:	b5f0      	push	{r4, r5, r6, r7, lr}
    2764:	46de      	mov	lr, fp
    2766:	4657      	mov	r7, sl
    2768:	464e      	mov	r6, r9
    276a:	4645      	mov	r5, r8
    276c:	b5e0      	push	{r5, r6, r7, lr}
    276e:	b083      	sub	sp, #12
    2770:	4681      	mov	r9, r0
    2772:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    2774:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2776:	680b      	ldr	r3, [r1, #0]
    2778:	4698      	mov	r8, r3
    277a:	684d      	ldr	r5, [r1, #4]
    277c:	7903      	ldrb	r3, [r0, #4]
    277e:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2780:	b1e8      	cbz	r0, 27be <_spi_m_sync_trans+0x5c>
    2782:	0020      	movs	r0, r4
    2784:	1e43      	subs	r3, r0, #1
    2786:	4198      	sbcs	r0, r3
    2788:	b2c0      	uxtb	r0, r0
    278a:	f243 2154 	movw	r1, #12884	; 0x3254
    278e:	f2c0 0100 	movt	r1, #0
    2792:	f640 229a 	movw	r2, #2714	; 0xa9a
    2796:	f241 037b 	movw	r3, #4219	; 0x107b
    279a:	f2c0 0300 	movt	r3, #0
    279e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    27a0:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    27a2:	075b      	lsls	r3, r3, #29
    27a4:	d140      	bne.n	2828 <_spi_m_sync_trans+0xc6>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27a6:	2303      	movs	r3, #3
    27a8:	69e0      	ldr	r0, [r4, #28]
    27aa:	4018      	ands	r0, r3
    27ac:	2800      	cmp	r0, #0
    27ae:	d1fb      	bne.n	27a8 <_spi_m_sync_trans+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    27b0:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    27b2:	079b      	lsls	r3, r3, #30
    27b4:	d53b      	bpl.n	282e <_spi_m_sync_trans+0xcc>
    27b6:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    27b8:	f240 0c01 	movw	ip, #1
    27bc:	e009      	b.n	27d2 <_spi_m_sync_trans+0x70>
    27be:	2000      	movs	r0, #0
    27c0:	e7e3      	b.n	278a <_spi_m_sync_trans+0x28>
		*ctrl->rxbuf++ = (uint8_t)data;
    27c2:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    27c4:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    27c6:	b25b      	sxtb	r3, r3
    27c8:	2b00      	cmp	r3, #0
    27ca:	db16      	blt.n	27fa <_spi_m_sync_trans+0x98>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    27cc:	68b3      	ldr	r3, [r6, #8]
    27ce:	4283      	cmp	r3, r0
    27d0:	d927      	bls.n	2822 <_spi_m_sync_trans+0xc0>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    27d2:	7e23      	ldrb	r3, [r4, #24]
    27d4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    27d6:	2104      	movs	r1, #4
    27d8:	4219      	tst	r1, r3
    27da:	d02b      	beq.n	2834 <_spi_m_sync_trans+0xd2>
	return ((Sercom *)hw)->SPI.DATA.reg;
    27dc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    27de:	2d00      	cmp	r5, #0
    27e0:	d0f0      	beq.n	27c4 <_spi_m_sync_trans+0x62>
		*ctrl->rxbuf++ = (uint8_t)data;
    27e2:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    27e4:	9901      	ldr	r1, [sp, #4]
    27e6:	2901      	cmp	r1, #1
    27e8:	d9eb      	bls.n	27c2 <_spi_m_sync_trans+0x60>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    27ea:	0a3f      	lsrs	r7, r7, #8
    27ec:	706f      	strb	r7, [r5, #1]
    27ee:	3502      	adds	r5, #2
    27f0:	e7e8      	b.n	27c4 <_spi_m_sync_trans+0x62>
		data = *ctrl->txbuf++;
    27f2:	f240 0b01 	movw	fp, #1
    27f6:	44d8      	add	r8, fp
    27f8:	e036      	b.n	2868 <_spi_m_sync_trans+0x106>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    27fa:	2301      	movs	r3, #1
    27fc:	425b      	negs	r3, r3
    27fe:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2800:	3381      	adds	r3, #129	; 0x81
    2802:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2804:	2013      	movs	r0, #19
    2806:	4240      	negs	r0, r0
	tmp &= mask;
    2808:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    280a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    280c:	4213      	tst	r3, r2
    280e:	d0fc      	beq.n	280a <_spi_m_sync_trans+0xa8>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2810:	2303      	movs	r3, #3
    2812:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2814:	b003      	add	sp, #12
    2816:	bc3c      	pop	{r2, r3, r4, r5}
    2818:	4690      	mov	r8, r2
    281a:	4699      	mov	r9, r3
    281c:	46a2      	mov	sl, r4
    281e:	46ab      	mov	fp, r5
    2820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2822:	4293      	cmp	r3, r2
    2824:	d8d5      	bhi.n	27d2 <_spi_m_sync_trans+0x70>
    2826:	e7ef      	b.n	2808 <_spi_m_sync_trans+0xa6>
		return ERR_BUSY;
    2828:	2004      	movs	r0, #4
    282a:	4240      	negs	r0, r0
    282c:	e7f2      	b.n	2814 <_spi_m_sync_trans+0xb2>
		return ERR_NOT_INITIALIZED;
    282e:	2014      	movs	r0, #20
    2830:	4240      	negs	r0, r0
    2832:	e7ef      	b.n	2814 <_spi_m_sync_trans+0xb2>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2834:	4290      	cmp	r0, r2
    2836:	d8c6      	bhi.n	27c6 <_spi_m_sync_trans+0x64>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2838:	4667      	mov	r7, ip
    283a:	421f      	tst	r7, r3
    283c:	d0c3      	beq.n	27c6 <_spi_m_sync_trans+0x64>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    283e:	464f      	mov	r7, r9
    2840:	88ff      	ldrh	r7, [r7, #6]
    2842:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    2844:	4647      	mov	r7, r8
    2846:	b17f      	cbz	r7, 2868 <_spi_m_sync_trans+0x106>
		data = *ctrl->txbuf++;
    2848:	783f      	ldrb	r7, [r7, #0]
    284a:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    284c:	9901      	ldr	r1, [sp, #4]
    284e:	2901      	cmp	r1, #1
    2850:	d9cf      	bls.n	27f2 <_spi_m_sync_trans+0x90>
			data |= (*ctrl->txbuf) << 8;
    2852:	4647      	mov	r7, r8
    2854:	787f      	ldrb	r7, [r7, #1]
    2856:	023f      	lsls	r7, r7, #8
    2858:	46bb      	mov	fp, r7
    285a:	4657      	mov	r7, sl
    285c:	4659      	mov	r1, fp
    285e:	430f      	orrs	r7, r1
    2860:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    2862:	f240 0b02 	movw	fp, #2
    2866:	44d8      	add	r8, fp
	ctrl->txcnt++;
    2868:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    286a:	4657      	mov	r7, sl
    286c:	62a7      	str	r7, [r4, #40]	; 0x28
    286e:	e7aa      	b.n	27c6 <_spi_m_sync_trans+0x64>

00002870 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2870:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    2872:	f24f 0c00 	movw	ip, #61440	; 0xf000
    2876:	f6cb 5cff 	movt	ip, #48639	; 0xbdff
    287a:	4460      	add	r0, ip
    287c:	0a80      	lsrs	r0, r0, #10
		if (_tcs[i].number == index) {
    287e:	b2c0      	uxtb	r0, r0
    2880:	b168      	cbz	r0, 289e <get_tc_index+0x2e>
	ASSERT(false);
    2882:	f243 2188 	movw	r1, #12936	; 0x3288
    2886:	f2c0 0100 	movt	r1, #0
    288a:	f240 123c 	movw	r2, #316	; 0x13c
    288e:	2000      	movs	r0, #0
    2890:	f241 037b 	movw	r3, #4219	; 0x107b
    2894:	f2c0 0300 	movt	r3, #0
    2898:	4798      	blx	r3
	return -1;
    289a:	2001      	movs	r0, #1
    289c:	4240      	negs	r0, r0
}
    289e:	bd10      	pop	{r4, pc}

000028a0 <_timer_init>:
{
    28a0:	b570      	push	{r4, r5, r6, lr}
    28a2:	0006      	movs	r6, r0
    28a4:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    28a6:	0008      	movs	r0, r1
    28a8:	f642 0371 	movw	r3, #10353	; 0x2871
    28ac:	f2c0 0300 	movt	r3, #0
    28b0:	4798      	blx	r3
    28b2:	0005      	movs	r5, r0
	device->hw = hw;
    28b4:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    28b6:	f243 2188 	movw	r1, #12936	; 0x3288
    28ba:	f2c0 0100 	movt	r1, #0
    28be:	228d      	movs	r2, #141	; 0x8d
    28c0:	2001      	movs	r0, #1
    28c2:	f241 037b 	movw	r3, #4219	; 0x107b
    28c6:	f2c0 0300 	movt	r3, #0
    28ca:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    28cc:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    28ce:	07db      	lsls	r3, r3, #31
    28d0:	d418      	bmi.n	2904 <_timer_init+0x64>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28d2:	2203      	movs	r2, #3
    28d4:	6923      	ldr	r3, [r4, #16]
    28d6:	421a      	tst	r2, r3
    28d8:	d1fc      	bne.n	28d4 <_timer_init+0x34>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28da:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    28dc:	079b      	lsls	r3, r3, #30
    28de:	d50b      	bpl.n	28f8 <_timer_init+0x58>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE_Msk;
    28e0:	6823      	ldr	r3, [r4, #0]
    28e2:	2202      	movs	r2, #2
    28e4:	4393      	bics	r3, r2
    28e6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28e8:	3201      	adds	r2, #1
    28ea:	6923      	ldr	r3, [r4, #16]
    28ec:	421a      	tst	r2, r3
    28ee:	d1fc      	bne.n	28ea <_timer_init+0x4a>
    28f0:	2202      	movs	r2, #2
    28f2:	6923      	ldr	r3, [r4, #16]
    28f4:	421a      	tst	r2, r3
    28f6:	d1fc      	bne.n	28f2 <_timer_init+0x52>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    28f8:	2301      	movs	r3, #1
    28fa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28fc:	2203      	movs	r2, #3
    28fe:	6923      	ldr	r3, [r4, #16]
    2900:	421a      	tst	r2, r3
    2902:	d1fc      	bne.n	28fe <_timer_init+0x5e>
    2904:	2201      	movs	r2, #1
    2906:	6923      	ldr	r3, [r4, #16]
    2908:	421a      	tst	r2, r3
    290a:	d1fc      	bne.n	2906 <_timer_init+0x66>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    290c:	006b      	lsls	r3, r5, #1
    290e:	195b      	adds	r3, r3, r5
    2910:	00db      	lsls	r3, r3, #3
    2912:	f243 2270 	movw	r2, #12912	; 0x3270
    2916:	f2c0 0200 	movt	r2, #0
    291a:	4694      	mov	ip, r2
    291c:	4463      	add	r3, ip
    291e:	6859      	ldr	r1, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2920:	6021      	str	r1, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2922:	2203      	movs	r2, #3
    2924:	6923      	ldr	r3, [r4, #16]
    2926:	421a      	tst	r2, r3
    2928:	d1fc      	bne.n	2924 <_timer_init+0x84>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    292a:	006b      	lsls	r3, r5, #1
    292c:	195b      	adds	r3, r3, r5
    292e:	00db      	lsls	r3, r3, #3
    2930:	f243 2270 	movw	r2, #12912	; 0x3270
    2934:	f2c0 0200 	movt	r2, #0
    2938:	4694      	mov	ip, r2
    293a:	4463      	add	r3, ip
    293c:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    293e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2940:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2942:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2944:	2301      	movs	r3, #1
    2946:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2948:	330b      	adds	r3, #11
    294a:	400b      	ands	r3, r1
    294c:	2b08      	cmp	r3, #8
    294e:	d065      	beq.n	2a1c <_timer_init+0x17c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2950:	2b00      	cmp	r3, #0
    2952:	d000      	beq.n	2956 <_timer_init+0xb6>
    2954:	e082      	b.n	2a5c <_timer_init+0x1bc>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2956:	006b      	lsls	r3, r5, #1
    2958:	195b      	adds	r3, r3, r5
    295a:	00db      	lsls	r3, r3, #3
    295c:	f243 2270 	movw	r2, #12912	; 0x3270
    2960:	f2c0 0200 	movt	r2, #0
    2964:	4694      	mov	ip, r2
    2966:	4463      	add	r3, ip
    2968:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    296a:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    296c:	22c0      	movs	r2, #192	; 0xc0
    296e:	6923      	ldr	r3, [r4, #16]
    2970:	421a      	tst	r2, r3
    2972:	d1fc      	bne.n	296e <_timer_init+0xce>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2974:	2300      	movs	r3, #0
    2976:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2978:	22c0      	movs	r2, #192	; 0xc0
    297a:	6923      	ldr	r3, [r4, #16]
    297c:	421a      	tst	r2, r3
    297e:	d1fc      	bne.n	297a <_timer_init+0xda>
		hri_tccount16_write_PER_reg(hw, _tcs[i].per);
    2980:	006b      	lsls	r3, r5, #1
    2982:	195b      	adds	r3, r3, r5
    2984:	00db      	lsls	r3, r3, #3
    2986:	f243 2270 	movw	r2, #12912	; 0x3270
    298a:	f2c0 0200 	movt	r2, #0
    298e:	4694      	mov	ip, r2
    2990:	4463      	add	r3, ip
    2992:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.PER.reg = data;
    2994:	8363      	strh	r3, [r4, #26]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2996:	2220      	movs	r2, #32
    2998:	6923      	ldr	r3, [r4, #16]
    299a:	421a      	tst	r2, r3
    299c:	d1fc      	bne.n	2998 <_timer_init+0xf8>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF_Msk;
    299e:	2301      	movs	r3, #1
    29a0:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    29a2:	f241 0300 	movw	r3, #4096	; 0x1000
    29a6:	f2c4 2300 	movt	r3, #16896	; 0x4200
    29aa:	429c      	cmp	r4, r3
    29ac:	d100      	bne.n	29b0 <_timer_init+0x110>
    29ae:	e07c      	b.n	2aaa <_timer_init+0x20a>
	NVIC_DisableIRQ(_tcs[i].irq);
    29b0:	006b      	lsls	r3, r5, #1
    29b2:	195b      	adds	r3, r3, r5
    29b4:	00db      	lsls	r3, r3, #3
    29b6:	f243 2270 	movw	r2, #12912	; 0x3270
    29ba:	f2c0 0200 	movt	r2, #0
    29be:	4694      	mov	ip, r2
    29c0:	4463      	add	r3, ip
    29c2:	2201      	movs	r2, #1
    29c4:	569a      	ldrsb	r2, [r3, r2]
  if ((int32_t)(IRQn) >= 0)
    29c6:	2a00      	cmp	r2, #0
    29c8:	db26      	blt.n	2a18 <_timer_init+0x178>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29ca:	0953      	lsrs	r3, r2, #5
    29cc:	211f      	movs	r1, #31
    29ce:	4011      	ands	r1, r2
    29d0:	2201      	movs	r2, #1
    29d2:	408a      	lsls	r2, r1
    29d4:	f24e 1100 	movw	r1, #57600	; 0xe100
    29d8:	f2ce 0100 	movt	r1, #57344	; 0xe000
    29dc:	3320      	adds	r3, #32
    29de:	009b      	lsls	r3, r3, #2
    29e0:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    29e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29e6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    29ea:	006b      	lsls	r3, r5, #1
    29ec:	195d      	adds	r5, r3, r5
    29ee:	00ed      	lsls	r5, r5, #3
    29f0:	4465      	add	r5, ip
    29f2:	2201      	movs	r2, #1
    29f4:	56aa      	ldrsb	r2, [r5, r2]
  if ((int32_t)(IRQn) >= 0)
    29f6:	2a00      	cmp	r2, #0
    29f8:	db0e      	blt.n	2a18 <_timer_init+0x178>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29fa:	0953      	lsrs	r3, r2, #5
    29fc:	211f      	movs	r1, #31
    29fe:	4011      	ands	r1, r2
    2a00:	2201      	movs	r2, #1
    2a02:	408a      	lsls	r2, r1
    2a04:	f24e 1100 	movw	r1, #57600	; 0xe100
    2a08:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2a0c:	0018      	movs	r0, r3
    2a0e:	3060      	adds	r0, #96	; 0x60
    2a10:	0080      	lsls	r0, r0, #2
    2a12:	5042      	str	r2, [r0, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a14:	009b      	lsls	r3, r3, #2
    2a16:	505a      	str	r2, [r3, r1]
}
    2a18:	2000      	movs	r0, #0
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2a1c:	006b      	lsls	r3, r5, #1
    2a1e:	195b      	adds	r3, r3, r5
    2a20:	00db      	lsls	r3, r3, #3
    2a22:	4463      	add	r3, ip
    2a24:	691b      	ldr	r3, [r3, #16]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2a26:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a28:	22c0      	movs	r2, #192	; 0xc0
    2a2a:	6923      	ldr	r3, [r4, #16]
    2a2c:	421a      	tst	r2, r3
    2a2e:	d1fc      	bne.n	2a2a <_timer_init+0x18a>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2a30:	2300      	movs	r3, #0
    2a32:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a34:	22c0      	movs	r2, #192	; 0xc0
    2a36:	6923      	ldr	r3, [r4, #16]
    2a38:	421a      	tst	r2, r3
    2a3a:	d1fc      	bne.n	2a36 <_timer_init+0x196>
		hri_tccount32_write_PER_reg(hw, _tcs[i].per);
    2a3c:	006b      	lsls	r3, r5, #1
    2a3e:	195b      	adds	r3, r3, r5
    2a40:	00db      	lsls	r3, r3, #3
    2a42:	f243 2270 	movw	r2, #12912	; 0x3270
    2a46:	f2c0 0200 	movt	r2, #0
    2a4a:	4694      	mov	ip, r2
    2a4c:	4463      	add	r3, ip
    2a4e:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.PER.reg = data;
    2a50:	61a3      	str	r3, [r4, #24]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a52:	2220      	movs	r2, #32
    2a54:	6923      	ldr	r3, [r4, #16]
    2a56:	421a      	tst	r2, r3
    2a58:	d1fc      	bne.n	2a54 <_timer_init+0x1b4>
    2a5a:	e7a0      	b.n	299e <_timer_init+0xfe>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2a5c:	2b04      	cmp	r3, #4
    2a5e:	d19e      	bne.n	299e <_timer_init+0xfe>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2a60:	006b      	lsls	r3, r5, #1
    2a62:	195b      	adds	r3, r3, r5
    2a64:	00db      	lsls	r3, r3, #3
    2a66:	f243 2270 	movw	r2, #12912	; 0x3270
    2a6a:	f2c0 0200 	movt	r2, #0
    2a6e:	4694      	mov	ip, r2
    2a70:	4463      	add	r3, ip
    2a72:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2a74:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a76:	22c0      	movs	r2, #192	; 0xc0
    2a78:	6923      	ldr	r3, [r4, #16]
    2a7a:	421a      	tst	r2, r3
    2a7c:	d1fc      	bne.n	2a78 <_timer_init+0x1d8>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2a7e:	2300      	movs	r3, #0
    2a80:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a82:	22c0      	movs	r2, #192	; 0xc0
    2a84:	6923      	ldr	r3, [r4, #16]
    2a86:	421a      	tst	r2, r3
    2a88:	d1fc      	bne.n	2a84 <_timer_init+0x1e4>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2a8a:	006b      	lsls	r3, r5, #1
    2a8c:	195b      	adds	r3, r3, r5
    2a8e:	00db      	lsls	r3, r3, #3
    2a90:	f243 2270 	movw	r2, #12912	; 0x3270
    2a94:	f2c0 0200 	movt	r2, #0
    2a98:	4694      	mov	ip, r2
    2a9a:	4463      	add	r3, ip
    2a9c:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2a9e:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2aa0:	2220      	movs	r2, #32
    2aa2:	6923      	ldr	r3, [r4, #16]
    2aa4:	421a      	tst	r2, r3
    2aa6:	d1fc      	bne.n	2aa2 <_timer_init+0x202>
    2aa8:	e779      	b.n	299e <_timer_init+0xfe>
		_tc0_dev = (struct _timer_device *)dev;
    2aaa:	f240 03b0 	movw	r3, #176	; 0xb0
    2aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ab2:	601e      	str	r6, [r3, #0]
    2ab4:	e77c      	b.n	29b0 <_timer_init+0x110>

00002ab6 <_tc_get_timer>:
}
    2ab6:	2000      	movs	r0, #0
    2ab8:	4770      	bx	lr

00002aba <TC0_Handler>:
{
    2aba:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    2abc:	f240 03b0 	movw	r3, #176	; 0xb0
    2ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ac4:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2ac6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF_Msk) >> TC_INTFLAG_OVF_Pos;
    2ac8:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2aca:	07d2      	lsls	r2, r2, #31
    2acc:	d400      	bmi.n	2ad0 <TC0_Handler+0x16>
}
    2ace:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF_Msk;
    2ad0:	2201      	movs	r2, #1
    2ad2:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2ad4:	6803      	ldr	r3, [r0, #0]
    2ad6:	4798      	blx	r3
}
    2ad8:	e7f9      	b.n	2ace <TC0_Handler+0x14>

00002ada <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    2ada:	b570      	push	{r4, r5, r6, lr}
    2adc:	0005      	movs	r5, r0
    2ade:	000c      	movs	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    2ae0:	b1e8      	cbz	r0, 2b1e <_rand_sync_init+0x44>
    2ae2:	0008      	movs	r0, r1
    2ae4:	1e43      	subs	r3, r0, #1
    2ae6:	4198      	sbcs	r0, r3
    2ae8:	b2c0      	uxtb	r0, r0
    2aea:	f243 219c 	movw	r1, #12956	; 0x329c
    2aee:	f2c0 0100 	movt	r1, #0
    2af2:	223d      	movs	r2, #61	; 0x3d
    2af4:	f241 037b 	movw	r3, #4219	; 0x107b
    2af8:	f2c0 0300 	movt	r3, #0
    2afc:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    2afe:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    2b00:	079b      	lsls	r3, r3, #30
    2b02:	d40e      	bmi.n	2b22 <_rand_sync_init+0x48>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY_Msk;
    2b04:	7823      	ldrb	r3, [r4, #0]
    2b06:	2240      	movs	r2, #64	; 0x40
    2b08:	4393      	bics	r3, r2
    2b0a:	7023      	strb	r3, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO_Msk;
    2b0c:	7923      	ldrb	r3, [r4, #4]
    2b0e:	3a3f      	subs	r2, #63	; 0x3f
    2b10:	4393      	bics	r3, r2
    2b12:	7123      	strb	r3, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
    2b14:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    2b16:	2320      	movs	r3, #32
    2b18:	712b      	strb	r3, [r5, #4]
	return ERR_NONE;
    2b1a:	2000      	movs	r0, #0
	}
	return rc;
}
    2b1c:	bd70      	pop	{r4, r5, r6, pc}
    2b1e:	2000      	movs	r0, #0
    2b20:	e7e3      	b.n	2aea <_rand_sync_init+0x10>
		return ERR_DENIED;
    2b22:	2011      	movs	r0, #17
    2b24:	4240      	negs	r0, r0
	return rc;
    2b26:	e7f9      	b.n	2b1c <_rand_sync_init+0x42>

00002b28 <button_on_PA27_used>:
volatile uint32_t app_mode          = IDLE_MODE_IRQ;
volatile bool     SW0_flag          = false;

static void button_on_PA27_used(void)
{
	SW0_flag = true;
    2b28:	f240 03b4 	movw	r3, #180	; 0xb4
    2b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b30:	2201      	movs	r2, #1
    2b32:	701a      	strb	r2, [r3, #0]
}
    2b34:	4770      	bx	lr

00002b36 <Enter_Mode_Standby>:
	((Pm *)hw)->SLEEPCFG.reg = data;
    2b36:	f240 4300 	movw	r3, #1024	; 0x400
    2b3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2b3e:	2204      	movs	r2, #4
    2b40:	705a      	strb	r2, [r3, #1]
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    2b42:	f240 4200 	movw	r2, #1024	; 0x400
    2b46:	f2c4 0200 	movt	r2, #16384	; 0x4000
	tmp = (tmp & PM_SLEEPCFG_SLEEPMODE_Msk) >> PM_SLEEPCFG_SLEEPMODE_Pos;
    2b4a:	2107      	movs	r1, #7
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    2b4c:	7853      	ldrb	r3, [r2, #1]
{
	/* Enter STANDBY Sleep Mode */
	hri_pm_write_SLEEPCFG_reg(PM, PM_SLEEPCFG_SLEEPMODE_STANDBY);

	/* Ensure register is written before issuing wfi command */
	while (hri_pm_read_SLEEPCFG_SLEEPMODE_bf(PM) != PM_SLEEPCFG_SLEEPMODE_STANDBY_Val)
    2b4e:	400b      	ands	r3, r1
    2b50:	2b04      	cmp	r3, #4
    2b52:	d1fb      	bne.n	2b4c <Enter_Mode_Standby+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
    2b54:	f3bf 8f4f 	dsb	sy
		;

	__DSB();
	__WFI();
    2b58:	bf30      	wfi
}
    2b5a:	4770      	bx	lr

00002b5c <rtc_reconfig_Interrupts>:
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2b5c:	f242 4300 	movw	r3, #9216	; 0x2400
    2b60:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	2102      	movs	r1, #2
    2b68:	438a      	bics	r2, r1
    2b6a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b6c:	f242 4200 	movw	r2, #9216	; 0x2400
    2b70:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2b74:	f248 0103 	movw	r1, #32771	; 0x8003
    2b78:	6913      	ldr	r3, [r2, #16]
    2b7a:	4219      	tst	r1, r3
    2b7c:	d1fc      	bne.n	2b78 <rtc_reconfig_Interrupts+0x1c>

/* reconfigure the RTC in interrupt when in IDLE_MODE_IRQ & STANDBY_MODE_IRQ */
static void rtc_reconfig_Interrupts(void)
{
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(RTC);     /* RTC Disable. */
	RTC->MODE1.CTRLA.reg = RTC_MODE1_CTRLA_SWRST; /* Perform a Software reset on the RTC */
    2b7e:	f242 4300 	movw	r3, #9216	; 0x2400
    2b82:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2b86:	2201      	movs	r2, #1
    2b88:	801a      	strh	r2, [r3, #0]
	while (RTC->MODE1.SYNCBUSY.bit.SWRST)
    2b8a:	f242 4200 	movw	r2, #9216	; 0x2400
    2b8e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2b92:	6913      	ldr	r3, [r2, #16]
    2b94:	07db      	lsls	r3, r3, #31
    2b96:	d4fc      	bmi.n	2b92 <rtc_reconfig_Interrupts+0x36>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2b98:	f242 4300 	movw	r3, #9216	; 0x2400
    2b9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2ba0:	2280      	movs	r2, #128	; 0x80
    2ba2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ba4:	f242 4200 	movw	r2, #9216	; 0x2400
    2ba8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2bac:	f248 0103 	movw	r1, #32771	; 0x8003
    2bb0:	6913      	ldr	r3, [r2, #16]
    2bb2:	4219      	tst	r1, r3
    2bb4:	d1fc      	bne.n	2bb0 <rtc_reconfig_Interrupts+0x54>
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2bb6:	f242 4300 	movw	r3, #9216	; 0x2400
    2bba:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2bbe:	f640 42cc 	movw	r2, #3276	; 0xccc
    2bc2:	621a      	str	r2, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2bc4:	f242 4200 	movw	r2, #9216	; 0x2400
    2bc8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2bcc:	2120      	movs	r1, #32
    2bce:	6913      	ldr	r3, [r2, #16]
    2bd0:	4219      	tst	r1, r3
    2bd2:	d1fc      	bne.n	2bce <rtc_reconfig_Interrupts+0x72>
	((Rtc *)hw)->MODE0.EVCTRL.reg &= ~RTC_MODE0_EVCTRL_CMPEO0;
    2bd4:	f242 4300 	movw	r3, #9216	; 0x2400
    2bd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2bdc:	685a      	ldr	r2, [r3, #4]
    2bde:	4906      	ldr	r1, [pc, #24]	; (2bf8 <rtc_reconfig_Interrupts+0x9c>)
    2be0:	400a      	ands	r2, r1
    2be2:	605a      	str	r2, [r3, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2be4:	f240 1200 	movw	r2, #256	; 0x100
    2be8:	815a      	strh	r2, [r3, #10]
    2bea:	f24e 1300 	movw	r3, #57600	; 0xe100
    2bee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2bf2:	3afc      	subs	r2, #252	; 0xfc
    2bf4:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COMP_reg(RTC, 0, 0xccc);  /* Compare Value: 3276 */
	hri_rtcmode0_clear_EVCTRL_CMPEO0_bit(RTC);   /* Clear the RTC CMPEO0 event to disable event coming from the RTC */
	hri_rtcmode0_set_INTEN_CMP0_bit(
	    RTC);                 /* Set the  CMPEO0 Interrupt to enable interrupt coming from the RTC compare 0 */
	NVIC_EnableIRQ(RTC_IRQn); /* Enable the interrupt at the core level */
}
    2bf6:	4770      	bx	lr
    2bf8:	fffffeff 	.word	0xfffffeff

00002bfc <dmac_channel_0_callback>:
/**
 * \brief DMA Interrupt Handler function used in all state of the application
 */
void dmac_channel_0_callback(struct _dma_resource *resource)
{
	DMA_Flag = true;
    2bfc:	f240 03b4 	movw	r3, #180	; 0xb4
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	2201      	movs	r2, #1
    2c06:	705a      	strb	r2, [r3, #1]
}
    2c08:	4770      	bx	lr

00002c0a <RTC_Handler>:
{
    2c0a:	b510      	push	{r4, lr}
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2c0c:	f242 4300 	movw	r3, #9216	; 0x2400
    2c10:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c14:	f240 1200 	movw	r2, #256	; 0x100
    2c18:	819a      	strh	r2, [r3, #12]
	adc_async_start_conversion(&ADC_0);
    2c1a:	f240 00cc 	movw	r0, #204	; 0xcc
    2c1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c22:	f640 235f 	movw	r3, #2655	; 0xa5f
    2c26:	f2c0 0300 	movt	r3, #0
    2c2a:	4798      	blx	r3
}
    2c2c:	bd10      	pop	{r4, pc}

00002c2e <EXTERNAL_IRQ_0_enable>:
{
    2c2e:	b510      	push	{r4, lr}
	ext_irq_register(PIN_PA27, button_on_PA27_used);
    2c30:	f642 3129 	movw	r1, #11049	; 0x2b29
    2c34:	f2c0 0100 	movt	r1, #0
    2c38:	201b      	movs	r0, #27
    2c3a:	f640 23ff 	movw	r3, #2815	; 0xaff
    2c3e:	f2c0 0300 	movt	r3, #0
    2c42:	4798      	blx	r3
}
    2c44:	bd10      	pop	{r4, pc}

00002c46 <Light_sensor_to_data_streammer>:
{
    2c46:	b510      	push	{r4, lr}
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2c48:	f240 2270 	movw	r2, #624	; 0x270
    2c4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2c50:	8811      	ldrh	r1, [r2, #0]
    2c52:	8893      	ldrh	r3, [r2, #4]
		temp2 = temp + temp2;
    2c54:	18cb      	adds	r3, r1, r3
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2c56:	8911      	ldrh	r1, [r2, #8]
		temp2 = temp + temp2;
    2c58:	18c9      	adds	r1, r1, r3
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2c5a:	8993      	ldrh	r3, [r2, #12]
		temp2 = temp + temp2;
    2c5c:	1859      	adds	r1, r3, r1
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2c5e:	8a13      	ldrh	r3, [r2, #16]
		temp2 = temp + temp2;
    2c60:	185b      	adds	r3, r3, r1
	average = temp2 / (MAX_TRANSFER / 2);
    2c62:	2205      	movs	r2, #5
    2c64:	fbb3 f3f2 	udiv	r3, r3, r2
	DataStream_buf[1] = (uint8_t)average;
    2c68:	f240 0100 	movw	r1, #0
    2c6c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2c70:	704b      	strb	r3, [r1, #1]
	DataStream_buf[2] = (uint8_t)(average >> 8);
    2c72:	0a1b      	lsrs	r3, r3, #8
    2c74:	708b      	strb	r3, [r1, #2]
	io_write(io, DataStream_buf, 4); /* use the SPI to send the data */
    2c76:	f240 03b4 	movw	r3, #180	; 0xb4
    2c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c7e:	6858      	ldr	r0, [r3, #4]
    2c80:	3a01      	subs	r2, #1
    2c82:	f640 4303 	movw	r3, #3075	; 0xc03
    2c86:	f2c0 0300 	movt	r3, #0
    2c8a:	4798      	blx	r3
}
    2c8c:	bd10      	pop	{r4, pc}

00002c8e <optimize_Low_Power>:
}

static inline void hri_supc_set_VREG_LPEFF_bit(const void *const hw)
{
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREG.reg |= SUPC_VREG_LPEFF_Msk;
    2c8e:	f641 0300 	movw	r3, #6144	; 0x1800
    2c92:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c96:	699a      	ldr	r2, [r3, #24]
    2c98:	f240 1100 	movw	r1, #256	; 0x100
    2c9c:	430a      	orrs	r2, r1
    2c9e:	619a      	str	r2, [r3, #24]

static inline void hri_supc_write_VREG_SEL_bf(const void *const hw, hri_supc_vreg_reg_t data)
{
	uint32_t tmp;
	SUPC_CRITICAL_SECTION_ENTER();
	tmp = ((Supc *)hw)->VREG.reg;
    2ca0:	699a      	ldr	r2, [r3, #24]
	tmp &= ~SUPC_VREG_SEL_Msk;
    2ca2:	39f4      	subs	r1, #244	; 0xf4
    2ca4:	438a      	bics	r2, r1
	tmp |= SUPC_VREG_SEL(data);
    2ca6:	3908      	subs	r1, #8
    2ca8:	430a      	orrs	r2, r1
	((Supc *)hw)->VREG.reg = tmp;
    2caa:	619a      	str	r2, [r3, #24]
	return (((Supc *)hw)->STATUS.reg & SUPC_STATUS_VREGRDY_Msk) >> SUPC_STATUS_VREGRDY_Pos;
    2cac:	f641 0200 	movw	r2, #6144	; 0x1800
    2cb0:	f2c4 0200 	movt	r2, #16384	; 0x4000
	while (hri_supc_get_STATUS_VREGRDY_bit(SUPC) == false)
    2cb4:	31fc      	adds	r1, #252	; 0xfc
    2cb6:	68d3      	ldr	r3, [r2, #12]
    2cb8:	4219      	tst	r1, r3
    2cba:	d0fc      	beq.n	2cb6 <optimize_Low_Power+0x28>

static inline void hri_pm_write_STDBYCFG_PDCFG_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->STDBYCFG.reg;
    2cbc:	f240 4300 	movw	r3, #1024	; 0x400
    2cc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2cc4:	891a      	ldrh	r2, [r3, #8]
	tmp &= ~PM_STDBYCFG_PDCFG_Msk;
    2cc6:	2101      	movs	r1, #1
    2cc8:	438a      	bics	r2, r1
	tmp |= value << PM_STDBYCFG_PDCFG_Pos;
	((Pm *)hw)->STDBYCFG.reg = tmp;
    2cca:	811a      	strh	r2, [r3, #8]
	PM->PWCFG.bit.RAMPSWC = PM_PWCFG_RAMPSWC_4KB_Val;
    2ccc:	78da      	ldrb	r2, [r3, #3]
    2cce:	2103      	movs	r1, #3
    2cd0:	430a      	orrs	r2, r1
    2cd2:	70da      	strb	r2, [r3, #3]
}
    2cd4:	4770      	bx	lr

00002cd6 <config_dma_channel_0>:

void config_dma_channel_0(void)
{
    2cd6:	b500      	push	{lr}
    2cd8:	b083      	sub	sp, #12
	struct _dma_resource *dma_res;

	/* Set DMA CH-0 source address (SRAM: adc_result)*/
	_dma_set_source_address(0, (void *)(&(ADC->RESULT)));
    2cda:	f641 4124 	movw	r1, #7204	; 0x1c24
    2cde:	f2c4 2100 	movt	r1, #16896	; 0x4200
    2ce2:	2000      	movs	r0, #0
    2ce4:	f241 6367 	movw	r3, #5735	; 0x1667
    2ce8:	f2c0 0300 	movt	r3, #0
    2cec:	4798      	blx	r3

	/* Set DMA CH-0 destination address (SRAM: adc_result_copy)*/
	_dma_set_destination_address(
	    0, (void *)((uint32_t)(&adc_result_store) + (DMA_BITCOUNT_VALUE * (DMAC_BTCTRL_STEPSIZE_X1_Val + 1))));
    2cee:	f240 2170 	movw	r1, #624	; 0x270
    2cf2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2cf6:	310a      	adds	r1, #10
	_dma_set_destination_address(
    2cf8:	2000      	movs	r0, #0
    2cfa:	f241 6353 	movw	r3, #5715	; 0x1653
    2cfe:	f2c0 0300 	movt	r3, #0
    2d02:	4798      	blx	r3

	/* Set DMA CH-0 block length */
	_dma_set_data_amount(0, (uint32_t)DMA_BITCOUNT_VALUE);
    2d04:	210a      	movs	r1, #10
    2d06:	2000      	movs	r0, #0
    2d08:	f241 6393 	movw	r3, #5779	; 0x1693
    2d0c:	f2c0 0300 	movt	r3, #0
    2d10:	4798      	blx	r3

	/* Get DMA CH-0 resource to set the application callback */
	_dma_get_channel_resource(&dma_res, 0);
    2d12:	2100      	movs	r1, #0
    2d14:	a801      	add	r0, sp, #4
    2d16:	f241 7347 	movw	r3, #5959	; 0x1747
    2d1a:	f2c0 0300 	movt	r3, #0
    2d1e:	4798      	blx	r3

	/* Set application callback to handle the DMA CH-0 transfer done */
	dma_res->dma_cb.transfer_done = dmac_channel_0_callback;
    2d20:	f642 33fd 	movw	r3, #11261	; 0x2bfd
    2d24:	f2c0 0300 	movt	r3, #0
    2d28:	9a01      	ldr	r2, [sp, #4]
    2d2a:	6013      	str	r3, [r2, #0]

	/* Set next descriptor */
	_dma_set_next_descriptor(0, 0);
    2d2c:	2100      	movs	r1, #0
    2d2e:	2000      	movs	r0, #0
    2d30:	f241 637b 	movw	r3, #5755	; 0x167b
    2d34:	f2c0 0300 	movt	r3, #0
    2d38:	4798      	blx	r3

	/* Enable DMA CH-0 transfer complete interrupt */
	_dma_set_irq_state(0, DMA_TRANSFER_COMPLETE_CB, true);
    2d3a:	2201      	movs	r2, #1
    2d3c:	2100      	movs	r1, #0
    2d3e:	2000      	movs	r0, #0
    2d40:	f241 53fb 	movw	r3, #5627	; 0x15fb
    2d44:	f2c0 0300 	movt	r3, #0
    2d48:	4798      	blx	r3

	/* Enable CH-0 DMA transaction */
	_dma_enable_transaction(0, false);
    2d4a:	2100      	movs	r1, #0
    2d4c:	2000      	movs	r0, #0
    2d4e:	f241 7305 	movw	r3, #5893	; 0x1705
    2d52:	f2c0 0300 	movt	r3, #0
    2d56:	4798      	blx	r3
	while (DMAC->CHSTATUS.bit.BUSY)
    2d58:	f246 0200 	movw	r2, #24576	; 0x6000
    2d5c:	f2c4 1200 	movt	r2, #16640	; 0x4100
    2d60:	214f      	movs	r1, #79	; 0x4f
    2d62:	5c53      	ldrb	r3, [r2, r1]
    2d64:	079b      	lsls	r3, r3, #30
    2d66:	d4fc      	bmi.n	2d62 <config_dma_channel_0+0x8c>
		;
}
    2d68:	b003      	add	sp, #12
    2d6a:	bd00      	pop	{pc}

00002d6c <main>:

/* Main Function: STATE MACHINE IMPLEMENTATION */
int main(void)
{
    2d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d6e:	46c6      	mov	lr, r8
    2d70:	b500      	push	{lr}
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
    2d72:	f240 2381 	movw	r3, #641	; 0x281
    2d76:	f2c0 0300 	movt	r3, #0
    2d7a:	4798      	blx	r3

	/* Optimize the SAM L10 Chip to Low Power */
	optimize_Low_Power();
    2d7c:	f642 438f 	movw	r3, #11407	; 0x2c8f
    2d80:	f2c0 0300 	movt	r3, #0
    2d84:	4798      	blx	r3

	/* Enable IRQ on the PA27 */
	EXTERNAL_IRQ_0_enable();
    2d86:	f642 432f 	movw	r3, #11311	; 0x2c2f
    2d8a:	f2c0 0300 	movt	r3, #0
    2d8e:	4798      	blx	r3
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    2d90:	f240 01b4 	movw	r1, #180	; 0xb4
    2d94:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2d98:	3104      	adds	r1, #4
    2d9a:	f240 1410 	movw	r4, #272	; 0x110
    2d9e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    2da2:	0020      	movs	r0, r4
    2da4:	f640 53bb 	movw	r3, #3515	; 0xdbb
    2da8:	f2c0 0300 	movt	r3, #0
    2dac:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2dae:	0020      	movs	r0, r4
    2db0:	f640 43c5 	movw	r3, #3269	; 0xcc5
    2db4:	f2c0 0300 	movt	r3, #0
    2db8:	4798      	blx	r3

	/* Initialize the SPI connection for DGI usage */
	SPI_DGI_Init();

	config_dma_channel_0();
    2dba:	f642 43d7 	movw	r3, #11479	; 0x2cd7
    2dbe:	f2c0 0300 	movt	r3, #0
    2dc2:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {

		if (SW0_flag) {
    2dc4:	f240 04b4 	movw	r4, #180	; 0xb4
    2dc8:	f2c2 0400 	movt	r4, #8192	; 0x2000
			SW0_flag = false;
    2dcc:	2500      	movs	r5, #0
    2dce:	e046      	b.n	2e5e <main+0xf2>
			if (app_mode == MAX_MODE_NUMBER) {
				app_mode = 0;
    2dd0:	60a5      	str	r5, [r4, #8]
    2dd2:	e04d      	b.n	2e70 <main+0x104>
			}
		}
		switch (app_mode) {
		case IDLE_MODE_IRQ:
			/* reconfigure the RTC interrupt */
			rtc_reconfig_Interrupts();
    2dd4:	f642 335d 	movw	r3, #11101	; 0x2b5d
    2dd8:	f2c0 0300 	movt	r3, #0
    2ddc:	4798      	blx	r3
	((Adc *)hw)->EVCTRL.reg &= ~ADC_EVCTRL_STARTEI_Msk;
    2dde:	f641 4300 	movw	r3, #7168	; 0x1c00
    2de2:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2de6:	78da      	ldrb	r2, [r3, #3]
    2de8:	2102      	movs	r1, #2
    2dea:	438a      	bics	r2, r1
    2dec:	70da      	strb	r2, [r3, #3]

			/* Reconfigure the ADC to work without event triggering */
			adc_reconfig();

			/* Enable ADC channel */
			adc_async_enable_channel(&ADC_0, 0);
    2dee:	f240 00cc 	movw	r0, #204	; 0xcc
    2df2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2df6:	0029      	movs	r1, r5
    2df8:	f640 2319 	movw	r3, #2585	; 0xa19
    2dfc:	f2c0 0300 	movt	r3, #0
    2e00:	4798      	blx	r3

			/* reset DMA flag */
			DMA_Flag = false;
    2e02:	7065      	strb	r5, [r4, #1]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2e04:	f242 4300 	movw	r3, #9216	; 0x2400
    2e08:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2e0c:	881a      	ldrh	r2, [r3, #0]
    2e0e:	2102      	movs	r1, #2
    2e10:	430a      	orrs	r2, r1
    2e12:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e14:	f242 4200 	movw	r2, #9216	; 0x2400
    2e18:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2e1c:	f248 0103 	movw	r1, #32771	; 0x8003
    2e20:	6913      	ldr	r3, [r2, #16]
    2e22:	4219      	tst	r1, r3
    2e24:	d1fc      	bne.n	2e20 <main+0xb4>

			/* RTC Enable */
			hri_rtcmode0_set_CTRLA_ENABLE_bit(RTC);

			/* Wait for DMA transfer complete */
			while (!(DMA_Flag)) {
    2e26:	7863      	ldrb	r3, [r4, #1]
    2e28:	b9a3      	cbnz	r3, 2e54 <main+0xe8>
}

static inline void hri_pm_clear_STDBYCFG_DPGPDSW_bit(const void *const hw)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    2e2a:	f240 4200 	movw	r2, #1024	; 0x400
    2e2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2e32:	2610      	movs	r6, #16
	((Pm *)hw)->SLEEPCFG.reg = data;
    2e34:	2002      	movs	r0, #2
	tmp = (tmp & PM_SLEEPCFG_SLEEPMODE_Msk) >> PM_SLEEPCFG_SLEEPMODE_Pos;
    2e36:	2107      	movs	r1, #7
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    2e38:	8913      	ldrh	r3, [r2, #8]
    2e3a:	43b3      	bics	r3, r6
    2e3c:	8113      	strh	r3, [r2, #8]
	((Pm *)hw)->SLEEPCFG.reg = data;
    2e3e:	7050      	strb	r0, [r2, #1]
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    2e40:	7853      	ldrb	r3, [r2, #1]
	while (hri_pm_read_SLEEPCFG_SLEEPMODE_bf(PM) != PM_SLEEPCFG_SLEEPMODE_IDLE_Val)
    2e42:	400b      	ands	r3, r1
    2e44:	2b02      	cmp	r3, #2
    2e46:	d1fb      	bne.n	2e40 <main+0xd4>
    2e48:	f3bf 8f4f 	dsb	sy
	__WFI();
    2e4c:	bf30      	wfi
			while (!(DMA_Flag)) {
    2e4e:	7863      	ldrb	r3, [r4, #1]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0f1      	beq.n	2e38 <main+0xcc>
				Enter_Mode_Idle();
			}

			/* WAKE-UP!!! */
			/* DGI Transfer to the Data Streamer */
			Light_sensor_to_data_streammer();
    2e54:	f642 4347 	movw	r3, #11335	; 0x2c47
    2e58:	f2c0 0300 	movt	r3, #0
    2e5c:	4798      	blx	r3
		if (SW0_flag) {
    2e5e:	7823      	ldrb	r3, [r4, #0]
    2e60:	b133      	cbz	r3, 2e70 <main+0x104>
			SW0_flag = false;
    2e62:	7025      	strb	r5, [r4, #0]
			if (app_mode == MAX_MODE_NUMBER) {
    2e64:	68a3      	ldr	r3, [r4, #8]
    2e66:	2b03      	cmp	r3, #3
    2e68:	d0b2      	beq.n	2dd0 <main+0x64>
				app_mode++;
    2e6a:	68a3      	ldr	r3, [r4, #8]
    2e6c:	3301      	adds	r3, #1
    2e6e:	60a3      	str	r3, [r4, #8]
		switch (app_mode) {
    2e70:	68a3      	ldr	r3, [r4, #8]
    2e72:	2b01      	cmp	r3, #1
    2e74:	d035      	beq.n	2ee2 <main+0x176>
    2e76:	2b00      	cmp	r3, #0
    2e78:	d0ac      	beq.n	2dd4 <main+0x68>
    2e7a:	2b02      	cmp	r3, #2
    2e7c:	d074      	beq.n	2f68 <main+0x1fc>
    2e7e:	2b03      	cmp	r3, #3
    2e80:	d1ed      	bne.n	2e5e <main+0xf2>
			Light_sensor_to_data_streammer();
			break;

		case STANDBY_MODE_SLPWKG_PWRGAT:
			/* Initializes MCU, drivers and middle ware */
			ADC_0_init();
    2e82:	f240 3375 	movw	r3, #885	; 0x375
    2e86:	f2c0 0300 	movt	r3, #0
    2e8a:	4798      	blx	r3

			/* RTC Initialization */
			RTC_init();
    2e8c:	f641 530f 	movw	r3, #7439	; 0x1d0f
    2e90:	f2c0 0300 	movt	r3, #0
    2e94:	4798      	blx	r3

			/* Enable ADC channel */
			adc_async_enable_channel(&ADC_0, 0);
    2e96:	f240 00cc 	movw	r0, #204	; 0xcc
    2e9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e9e:	0029      	movs	r1, r5
    2ea0:	f640 2319 	movw	r3, #2585	; 0xa19
    2ea4:	f2c0 0300 	movt	r3, #0
    2ea8:	4798      	blx	r3

			/* reset DMA flag */
			DMA_Flag = false;
    2eaa:	7065      	strb	r5, [r4, #1]

			/* Wait for DMA transfer complete*/
			while (!(DMA_Flag)) {
    2eac:	7863      	ldrb	r3, [r4, #1]
    2eae:	b993      	cbnz	r3, 2ed6 <main+0x16a>
	((Pm *)hw)->STDBYCFG.reg |= PM_STDBYCFG_DPGPDSW_Msk;
    2eb0:	f240 4600 	movw	r6, #1024	; 0x400
    2eb4:	f2c4 0600 	movt	r6, #16384	; 0x4000
    2eb8:	f240 0810 	movw	r8, #16
				/* enable Power gating */
				enable_dynpower_gating();

				/* Enter STANDBY Sleep Mode */
				Enter_Mode_Standby();
    2ebc:	f642 3737 	movw	r7, #11063	; 0x2b37
    2ec0:	f2c0 0700 	movt	r7, #0
    2ec4:	8933      	ldrh	r3, [r6, #8]
    2ec6:	4642      	mov	r2, r8
    2ec8:	4313      	orrs	r3, r2
    2eca:	b29b      	uxth	r3, r3
    2ecc:	8133      	strh	r3, [r6, #8]
    2ece:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    2ed0:	7863      	ldrb	r3, [r4, #1]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d0f6      	beq.n	2ec4 <main+0x158>
			}

			/* WAKE-UP!!! */
			Light_sensor_to_data_streammer();
    2ed6:	f642 4347 	movw	r3, #11335	; 0x2c47
    2eda:	f2c0 0300 	movt	r3, #0
    2ede:	4798      	blx	r3
			break;
    2ee0:	e7bd      	b.n	2e5e <main+0xf2>
			rtc_reconfig_Interrupts();
    2ee2:	f642 335d 	movw	r3, #11101	; 0x2b5d
    2ee6:	f2c0 0300 	movt	r3, #0
    2eea:	4798      	blx	r3
    2eec:	f641 4300 	movw	r3, #7168	; 0x1c00
    2ef0:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2ef4:	78da      	ldrb	r2, [r3, #3]
    2ef6:	2102      	movs	r1, #2
    2ef8:	438a      	bics	r2, r1
    2efa:	70da      	strb	r2, [r3, #3]
			adc_async_enable_channel(&ADC_0, 0);
    2efc:	f240 00cc 	movw	r0, #204	; 0xcc
    2f00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f04:	0029      	movs	r1, r5
    2f06:	f640 2319 	movw	r3, #2585	; 0xa19
    2f0a:	f2c0 0300 	movt	r3, #0
    2f0e:	4798      	blx	r3
			DMA_Flag = false;
    2f10:	7065      	strb	r5, [r4, #1]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2f12:	f242 4300 	movw	r3, #9216	; 0x2400
    2f16:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2f1a:	881a      	ldrh	r2, [r3, #0]
    2f1c:	2102      	movs	r1, #2
    2f1e:	430a      	orrs	r2, r1
    2f20:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f22:	f242 4200 	movw	r2, #9216	; 0x2400
    2f26:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2f2a:	f248 0103 	movw	r1, #32771	; 0x8003
    2f2e:	6913      	ldr	r3, [r2, #16]
    2f30:	4219      	tst	r1, r3
    2f32:	d1fc      	bne.n	2f2e <main+0x1c2>
			while (!(DMA_Flag)) {
    2f34:	7863      	ldrb	r3, [r4, #1]
    2f36:	b98b      	cbnz	r3, 2f5c <main+0x1f0>
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    2f38:	f240 4600 	movw	r6, #1024	; 0x400
    2f3c:	f2c4 0600 	movt	r6, #16384	; 0x4000
    2f40:	f240 0810 	movw	r8, #16
				Enter_Mode_Standby();
    2f44:	f642 3737 	movw	r7, #11063	; 0x2b37
    2f48:	f2c0 0700 	movt	r7, #0
    2f4c:	8933      	ldrh	r3, [r6, #8]
    2f4e:	4642      	mov	r2, r8
    2f50:	4393      	bics	r3, r2
    2f52:	8133      	strh	r3, [r6, #8]
    2f54:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    2f56:	7863      	ldrb	r3, [r4, #1]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d0f7      	beq.n	2f4c <main+0x1e0>
			Light_sensor_to_data_streammer();
    2f5c:	f642 4347 	movw	r3, #11335	; 0x2c47
    2f60:	f2c0 0300 	movt	r3, #0
    2f64:	4798      	blx	r3
			break;
    2f66:	e77a      	b.n	2e5e <main+0xf2>
			ADC_0_init();
    2f68:	f240 3375 	movw	r3, #885	; 0x375
    2f6c:	f2c0 0300 	movt	r3, #0
    2f70:	4798      	blx	r3
			RTC_init();
    2f72:	f641 530f 	movw	r3, #7439	; 0x1d0f
    2f76:	f2c0 0300 	movt	r3, #0
    2f7a:	4798      	blx	r3
			adc_async_enable_channel(&ADC_0, 0);
    2f7c:	f240 00cc 	movw	r0, #204	; 0xcc
    2f80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f84:	0029      	movs	r1, r5
    2f86:	f640 2319 	movw	r3, #2585	; 0xa19
    2f8a:	f2c0 0300 	movt	r3, #0
    2f8e:	4798      	blx	r3
			DMA_Flag = false;
    2f90:	7065      	strb	r5, [r4, #1]
			while (!(DMA_Flag)) {
    2f92:	7863      	ldrb	r3, [r4, #1]
    2f94:	b98b      	cbnz	r3, 2fba <main+0x24e>
    2f96:	f240 4600 	movw	r6, #1024	; 0x400
    2f9a:	f2c4 0600 	movt	r6, #16384	; 0x4000
    2f9e:	f240 0810 	movw	r8, #16
				Enter_Mode_Standby();
    2fa2:	f642 3737 	movw	r7, #11063	; 0x2b37
    2fa6:	f2c0 0700 	movt	r7, #0
    2faa:	8933      	ldrh	r3, [r6, #8]
    2fac:	4642      	mov	r2, r8
    2fae:	4393      	bics	r3, r2
    2fb0:	8133      	strh	r3, [r6, #8]
    2fb2:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    2fb4:	7863      	ldrb	r3, [r4, #1]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d0f7      	beq.n	2faa <main+0x23e>
			Light_sensor_to_data_streammer();
    2fba:	f642 4347 	movw	r3, #11335	; 0x2c47
    2fbe:	f2c0 0300 	movt	r3, #0
    2fc2:	4798      	blx	r3
			break;
    2fc4:	e74b      	b.n	2e5e <main+0xf2>
	...

00002fc8 <__ffssi2>:
    2fc8:	b510      	push	{r4, lr}
    2fca:	2300      	movs	r3, #0
    2fcc:	b110      	cbz	r0, 2fd4 <__ffssi2+0xc>
    2fce:	f000 f803 	bl	2fd8 <__ctzsi2>
    2fd2:	1c43      	adds	r3, r0, #1
    2fd4:	0018      	movs	r0, r3
    2fd6:	bd10      	pop	{r4, pc}

00002fd8 <__ctzsi2>:
    2fd8:	4241      	negs	r1, r0
    2fda:	4008      	ands	r0, r1
    2fdc:	211c      	movs	r1, #28
    2fde:	2301      	movs	r3, #1
    2fe0:	041b      	lsls	r3, r3, #16
    2fe2:	4298      	cmp	r0, r3
    2fe4:	d301      	bcc.n	2fea <__ctzsi2+0x12>
    2fe6:	0c00      	lsrs	r0, r0, #16
    2fe8:	3910      	subs	r1, #16
    2fea:	0a1b      	lsrs	r3, r3, #8
    2fec:	4298      	cmp	r0, r3
    2fee:	d301      	bcc.n	2ff4 <__ctzsi2+0x1c>
    2ff0:	0a00      	lsrs	r0, r0, #8
    2ff2:	3908      	subs	r1, #8
    2ff4:	091b      	lsrs	r3, r3, #4
    2ff6:	4298      	cmp	r0, r3
    2ff8:	d301      	bcc.n	2ffe <__ctzsi2+0x26>
    2ffa:	0900      	lsrs	r0, r0, #4
    2ffc:	3904      	subs	r1, #4
    2ffe:	a202      	add	r2, pc, #8	; (adr r2, 3008 <__ctzsi2+0x30>)
    3000:	5c10      	ldrb	r0, [r2, r0]
    3002:	1a40      	subs	r0, r0, r1
    3004:	4770      	bx	lr
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	1d1d1c1b 	.word	0x1d1d1c1b
    300c:	1e1e1e1e 	.word	0x1e1e1e1e
    3010:	1f1f1f1f 	.word	0x1f1f1f1f
    3014:	1f1f1f1f 	.word	0x1f1f1f1f

00003018 <__libc_init_array>:
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	2500      	movs	r5, #0
    301c:	4b0e      	ldr	r3, [pc, #56]	; (3058 <__libc_init_array+0x40>)
    301e:	4c0f      	ldr	r4, [pc, #60]	; (305c <__libc_init_array+0x44>)
    3020:	1ae4      	subs	r4, r4, r3
    3022:	10a4      	asrs	r4, r4, #2
    3024:	42a5      	cmp	r5, r4
    3026:	d109      	bne.n	303c <__libc_init_array+0x24>
    3028:	2500      	movs	r5, #0
    302a:	f000 f943 	bl	32b4 <_init>
    302e:	4c0c      	ldr	r4, [pc, #48]	; (3060 <__libc_init_array+0x48>)
    3030:	4b0c      	ldr	r3, [pc, #48]	; (3064 <__libc_init_array+0x4c>)
    3032:	1ae4      	subs	r4, r4, r3
    3034:	10a4      	asrs	r4, r4, #2
    3036:	42a5      	cmp	r5, r4
    3038:	d107      	bne.n	304a <__libc_init_array+0x32>
    303a:	bd70      	pop	{r4, r5, r6, pc}
    303c:	4a06      	ldr	r2, [pc, #24]	; (3058 <__libc_init_array+0x40>)
    303e:	00ab      	lsls	r3, r5, #2
    3040:	189b      	adds	r3, r3, r2
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	4798      	blx	r3
    3046:	3501      	adds	r5, #1
    3048:	e7ec      	b.n	3024 <__libc_init_array+0xc>
    304a:	4a06      	ldr	r2, [pc, #24]	; (3064 <__libc_init_array+0x4c>)
    304c:	00ab      	lsls	r3, r5, #2
    304e:	189b      	adds	r3, r3, r2
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	4798      	blx	r3
    3054:	3501      	adds	r5, #1
    3056:	e7ee      	b.n	3036 <__libc_init_array+0x1e>
    3058:	000032c0 	.word	0x000032c0
    305c:	000032c0 	.word	0x000032c0
    3060:	000032c4 	.word	0x000032c4
    3064:	000032c0 	.word	0x000032c0
    3068:	682f2e2e 	.word	0x682f2e2e
    306c:	732f6c61 	.word	0x732f6c61
    3070:	682f6372 	.word	0x682f6372
    3074:	615f6c61 	.word	0x615f6c61
    3078:	615f6364 	.word	0x615f6364
    307c:	636e7973 	.word	0x636e7973
    3080:	0000632e 	.word	0x0000632e
    3084:	682f2e2e 	.word	0x682f2e2e
    3088:	732f6c61 	.word	0x732f6c61
    308c:	682f6372 	.word	0x682f6372
    3090:	695f6c61 	.word	0x695f6c61
    3094:	6d5f6332 	.word	0x6d5f6332
    3098:	6e79735f 	.word	0x6e79735f
    309c:	00632e63 	.word	0x00632e63
    30a0:	682f2e2e 	.word	0x682f2e2e
    30a4:	732f6c61 	.word	0x732f6c61
    30a8:	682f6372 	.word	0x682f6372
    30ac:	695f6c61 	.word	0x695f6c61
    30b0:	00632e6f 	.word	0x00632e6f
    30b4:	682f2e2e 	.word	0x682f2e2e
    30b8:	732f6c61 	.word	0x732f6c61
    30bc:	682f6372 	.word	0x682f6372
    30c0:	725f6c61 	.word	0x725f6c61
    30c4:	5f646e61 	.word	0x5f646e61
    30c8:	636e7973 	.word	0x636e7973
    30cc:	0000632e 	.word	0x0000632e
    30d0:	682f2e2e 	.word	0x682f2e2e
    30d4:	732f6c61 	.word	0x732f6c61
    30d8:	682f6372 	.word	0x682f6372
    30dc:	735f6c61 	.word	0x735f6c61
    30e0:	6d5f6970 	.word	0x6d5f6970
    30e4:	6e79735f 	.word	0x6e79735f
    30e8:	00632e63 	.word	0x00632e63
    30ec:	682f2e2e 	.word	0x682f2e2e
    30f0:	732f6c61 	.word	0x732f6c61
    30f4:	682f6372 	.word	0x682f6372
    30f8:	745f6c61 	.word	0x745f6c61
    30fc:	72656d69 	.word	0x72656d69
    3100:	0000632e 	.word	0x0000632e
    3104:	682f2e2e 	.word	0x682f2e2e
    3108:	732f6c61 	.word	0x732f6c61
    310c:	682f6372 	.word	0x682f6372
    3110:	755f6c61 	.word	0x755f6c61
    3114:	74726173 	.word	0x74726173
    3118:	6e79735f 	.word	0x6e79735f
    311c:	00632e63 	.word	0x00632e63
    3120:	682f2e2e 	.word	0x682f2e2e
    3124:	752f6c61 	.word	0x752f6c61
    3128:	736c6974 	.word	0x736c6974
    312c:	6372732f 	.word	0x6372732f
    3130:	6974752f 	.word	0x6974752f
    3134:	6c5f736c 	.word	0x6c5f736c
    3138:	2e747369 	.word	0x2e747369
    313c:	00000063 	.word	0x00000063
    3140:	682f2e2e 	.word	0x682f2e2e
    3144:	752f6c61 	.word	0x752f6c61
    3148:	736c6974 	.word	0x736c6974
    314c:	6372732f 	.word	0x6372732f
    3150:	6974752f 	.word	0x6974752f
    3154:	725f736c 	.word	0x725f736c
    3158:	62676e69 	.word	0x62676e69
    315c:	65666675 	.word	0x65666675
    3160:	00632e72 	.word	0x00632e72

00003164 <_adcs>:
    3164:	0000c000 18000002 06000000 00000000     ................
	...
    3180:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3190:	632e6364 00000000                       dc.c....

00003198 <_cfgs>:
    3198:	00000042 00801300 00000908 00000000     B...............
	...

000031f8 <_map>:
    31f8:	00000005 0000001b 682f2e2e 652f6c70     ........../hpl/e
    3208:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00003218 <user_mux_confs>:
	...
    3224:	00010000 00000000 00000000 42000400     ...............B
    3234:	42000800 42000c00                       ...B...B

0000323c <_i2cms>:
    323c:	00000001 00200014 00000100 00000f0e     ...... .........
    324c:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    325c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    326c:	0000632e                                .c..

00003270 <_tcs>:
    3270:	00002200 00000308 00000000 00000000     ."..............
    3280:	000001f4 00000000 682f2e2e 742f6c70     ........../hpl/t
    3290:	70682f63 63745f6c 0000632e 682f2e2e     c/hpl_tc.c..../h
    32a0:	742f6c70 2f676e72 5f6c7068 676e7274     pl/trng/hpl_trng
    32b0:	0000632e                                .c..

000032b4 <_init>:
    32b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32ba:	bc08      	pop	{r3}
    32bc:	469e      	mov	lr, r3
    32be:	4770      	bx	lr

000032c0 <__init_array_start>:
    32c0:	00000241 	.word	0x00000241

000032c4 <_fini>:
    32c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32ca:	bc08      	pop	{r3}
    32cc:	469e      	mov	lr, r3
    32ce:	4770      	bx	lr

000032d0 <__fini_array_start>:
    32d0:	00000215 	.word	0x00000215

Disassembly of section .gnu.sgstubs:

0000fb00 <nsc_ext_irq_init>:
    fb00:	e97f e97f 	sg
    fb04:	f7f0 bb0f 	b.w	126 <__acle_se_nsc_ext_irq_init>

0000fb08 <nsc_periph_clock_init>:
    fb08:	e97f e97f 	sg
    fb0c:	f7f0 baf2 	b.w	f4 <__acle_se_nsc_periph_clock_init>
	...
