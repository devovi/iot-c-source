
ATSAML11E16A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bcc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  0000fb00  0000fb00  0002fb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000008  20000000  00002bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000254  20000010  00002be0  00020010  2**4
                  ALLOC
  4 .heap         00000204  20000264  00002e34  00020010  2**0
                  ALLOC
  5 .stack        00000400  20000468  00003038  00020010  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00034bad  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004b93  00000000  00000000  00068c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012b36  00000000  00000000  0006d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fb8  00000000  00000000  0008031b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016f8  00000000  00000000  000812d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001fab6  00000000  00000000  000829cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001810f  00000000  00000000  000a2481  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009c9b0  00000000  00000000  000ba590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000027ac  00000000  00000000  00156f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 08 00 20 b1 02 00 00 ad 02 00 00 ad 02 00 00     h.. ............
	...
      2c:	ad 02 00 00 00 00 00 00 00 00 00 00 ad 02 00 00     ................
      3c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 eb 24 00 00     .............$..
      4c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      5c:	dd 19 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      6c:	6d 16 00 00 df 16 00 00 51 17 00 00 c3 17 00 00     m.......Q.......
      7c:	35 18 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     5...............
      8c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      9c:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      ac:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      bc:	ad 02 00 00 ad 02 00 00 ad 02 00 00 29 23 00 00     ............)#..
      cc:	ad 02 00 00 ad 02 00 00 57 13 00 00 6f 13 00 00     ........W...o...
      dc:	ad 02 00 00 ad 02 00 00 ad 02 00 00 ad 02 00 00     ................
      ec:	ad 02 00 00 ad 02 00 00                             ........

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	23ff      	movs	r3, #255	; 0xff
      f6:	4003      	ands	r3, r0
      f8:	009b      	lsls	r3, r3, #2
      fa:	f641 4c00 	movw	ip, #7168	; 0x1c00
      fe:	f2c4 0c00 	movt	ip, #16384	; 0x4000
     102:	4463      	add	r3, ip
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     104:	2280      	movs	r2, #128	; 0x80
     106:	589a      	ldr	r2, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     108:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10a:	0652      	lsls	r2, r2, #25
     10c:	d404      	bmi.n	118 <__acle_se_nsc_periph_clock_init+0x24>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     10e:	2240      	movs	r2, #64	; 0x40
     110:	4311      	orrs	r1, r2
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     112:	3240      	adds	r2, #64	; 0x40
     114:	5099      	str	r1, [r3, r2]
	}
	return 0;
     116:	2000      	movs	r0, #0
}
     118:	0001      	movs	r1, r0
     11a:	0002      	movs	r2, r0
     11c:	0003      	movs	r3, r0
     11e:	4684      	mov	ip, r0
     120:	f38e 8800 	msr	CPSR_f, lr
     124:	4774      	bxns	lr

00000126 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     126:	b5f0      	push	{r4, r5, r6, r7, lr}
     128:	46ce      	mov	lr, r9
     12a:	4647      	mov	r7, r8
     12c:	b580      	push	{r7, lr}
     12e:	b087      	sub	sp, #28
     130:	9002      	str	r0, [sp, #8]
     132:	9103      	str	r1, [sp, #12]
     134:	9204      	str	r2, [sp, #16]
     136:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     138:	f642 2300 	movw	r3, #10752	; 0x2a00
     13c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     140:	6898      	ldr	r0, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     142:	6999      	ldr	r1, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     146:	69dc      	ldr	r4, [r3, #28]
     148:	46a4      	mov	ip, r4
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     14c:	9e02      	ldr	r6, [sp, #8]
     14e:	4046      	eors	r6, r0
     150:	403e      	ands	r6, r7
     152:	4046      	eors	r6, r0
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     154:	9b04      	ldr	r3, [sp, #16]
     156:	9301      	str	r3, [sp, #4]
     158:	001d      	movs	r5, r3
     15a:	404d      	eors	r5, r1
     15c:	403d      	ands	r5, r7
     15e:	404d      	eors	r5, r1
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9c05      	ldr	r4, [sp, #20]
     162:	4054      	eors	r4, r2
     164:	403c      	ands	r4, r7
     166:	4054      	eors	r4, r2
     168:	46a1      	mov	r9, r4
	uint32_t config_nonsec_mask = 0;
     16a:	2100      	movs	r1, #0
	for (i = 0; i < 8; i++) {
     16c:	2300      	movs	r3, #0
		if (nonsec_mask & (1u << i)) {
     16e:	2001      	movs	r0, #1
			config_nonsec_mask |= (0xFu << (i * 4));
     170:	f240 080f 	movw	r8, #15
     174:	e002      	b.n	17c <__acle_se_nsc_ext_irq_init+0x56>
	for (i = 0; i < 8; i++) {
     176:	3301      	adds	r3, #1
     178:	2b08      	cmp	r3, #8
     17a:	d008      	beq.n	18e <__acle_se_nsc_ext_irq_init+0x68>
		if (nonsec_mask & (1u << i)) {
     17c:	0002      	movs	r2, r0
     17e:	409a      	lsls	r2, r3
     180:	4217      	tst	r7, r2
     182:	d0f8      	beq.n	176 <__acle_se_nsc_ext_irq_init+0x50>
			config_nonsec_mask |= (0xFu << (i * 4));
     184:	009a      	lsls	r2, r3, #2
     186:	4644      	mov	r4, r8
     188:	4094      	lsls	r4, r2
     18a:	4321      	orrs	r1, r4
     18c:	e7f3      	b.n	176 <__acle_se_nsc_ext_irq_init+0x50>
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     18e:	4660      	mov	r0, ip
     190:	9b03      	ldr	r3, [sp, #12]
     192:	4058      	eors	r0, r3
     194:	4008      	ands	r0, r1
     196:	4663      	mov	r3, ip
     198:	4058      	eors	r0, r3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     19a:	f642 2300 	movw	r3, #10752	; 0x2a00
     19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1a2:	781a      	ldrb	r2, [r3, #0]
     1a4:	2102      	movs	r1, #2
     1a6:	438a      	bics	r2, r1
     1a8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1aa:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1b2:	3101      	adds	r1, #1
     1b4:	6853      	ldr	r3, [r2, #4]
     1b6:	4219      	tst	r1, r3
     1b8:	d1fc      	bne.n	1b4 <__acle_se_nsc_ext_irq_init+0x8e>
     1ba:	f642 2200 	movw	r2, #10752	; 0x2a00
     1be:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1c2:	2102      	movs	r1, #2
     1c4:	6853      	ldr	r3, [r2, #4]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <__acle_se_nsc_ext_irq_init+0x9e>
	((Eic *)hw)->EVCTRL.reg = data;
     1ca:	f642 2300 	movw	r3, #10752	; 0x2a00
     1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1d2:	609e      	str	r6, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1d4:	619d      	str	r5, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1d6:	464a      	mov	r2, r9
     1d8:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1da:	61d8      	str	r0, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	2102      	movs	r1, #2
     1e0:	430a      	orrs	r2, r1
     1e2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1e4:	f642 2200 	movw	r2, #10752	; 0x2a00
     1e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1ec:	3101      	adds	r1, #1
     1ee:	6853      	ldr	r3, [r2, #4]
     1f0:	4219      	tst	r1, r3
     1f2:	d1fc      	bne.n	1ee <__acle_se_nsc_ext_irq_init+0xc8>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     1f4:	2000      	movs	r0, #0
     1f6:	b007      	add	sp, #28
     1f8:	0001      	movs	r1, r0
     1fa:	0002      	movs	r2, r0
     1fc:	0003      	movs	r3, r0
     1fe:	4684      	mov	ip, r0
     200:	bc0c      	pop	{r2, r3}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	bcf0      	pop	{r4, r5, r6, r7}
     208:	bc02      	pop	{r1}
     20a:	4686      	mov	lr, r0
     20c:	f381 8800 	msr	CPSR_f, r1
     210:	470c      	bxns	r1
	...

00000214 <__do_global_dtors_aux>:
     214:	b510      	push	{r4, lr}
     216:	f240 0410 	movw	r4, #16
     21a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     21e:	7823      	ldrb	r3, [r4, #0]
     220:	b963      	cbnz	r3, 23c <__do_global_dtors_aux+0x28>
     222:	f240 0300 	movw	r3, #0
     226:	f2c0 0300 	movt	r3, #0
     22a:	b12b      	cbz	r3, 238 <__do_global_dtors_aux+0x24>
     22c:	f244 0020 	movw	r0, #16416	; 0x4020
     230:	f2c0 0080 	movt	r0, #128	; 0x80
     234:	e000      	b.n	238 <__do_global_dtors_aux+0x24>
     236:	bf00      	nop
     238:	2301      	movs	r3, #1
     23a:	7023      	strb	r3, [r4, #0]
     23c:	bd10      	pop	{r4, pc}
     23e:	46c0      	nop			; (mov r8, r8)

00000240 <frame_dummy>:
     240:	f240 0300 	movw	r3, #0
     244:	f2c0 0300 	movt	r3, #0
     248:	b510      	push	{r4, lr}
     24a:	b14b      	cbz	r3, 260 <frame_dummy+0x20>
     24c:	f240 0114 	movw	r1, #20
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c2 0100 	movt	r1, #8192	; 0x2000
     258:	f2c0 0080 	movt	r0, #128	; 0x80
     25c:	e000      	b.n	260 <frame_dummy+0x20>
     25e:	bf00      	nop
     260:	f244 0020 	movw	r0, #16416	; 0x4020
     264:	f2c0 0080 	movt	r0, #128	; 0x80
     268:	6803      	ldr	r3, [r0, #0]
     26a:	b903      	cbnz	r3, 26e <frame_dummy+0x2e>
     26c:	bd10      	pop	{r4, pc}
     26e:	f240 0300 	movw	r3, #0
     272:	f2c0 0300 	movt	r3, #0
     276:	2b00      	cmp	r3, #0
     278:	d0f8      	beq.n	26c <frame_dummy+0x2c>
     27a:	4798      	blx	r3
     27c:	e7f6      	b.n	26c <frame_dummy+0x2c>
     27e:	46c0      	nop			; (mov r8, r8)

00000280 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     280:	b510      	push	{r4, lr}
	system_init();
     282:	f240 7313 	movw	r3, #1811	; 0x713
     286:	f2c0 0300 	movt	r3, #0
     28a:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     28c:	f243 2300 	movw	r3, #12800	; 0x3200
     290:	f2c4 0300 	movt	r3, #16384	; 0x4000
     294:	2200      	movs	r2, #0
     296:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     298:	f24e 1300 	movw	r3, #57600	; 0xe100
     29c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     2a0:	f240 2180 	movw	r1, #640	; 0x280
     2a4:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     2a6:	3104      	adds	r1, #4
     2a8:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
}
     2aa:	bd10      	pop	{r4, pc}

000002ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ac:	e7fe      	b.n	2ac <Dummy_Handler>
	...

000002b0 <Reset_Handler>:
{
     2b0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     2b2:	f642 32cc 	movw	r2, #11212	; 0x2bcc
     2b6:	f2c0 0200 	movt	r2, #0
     2ba:	f240 0300 	movw	r3, #0
     2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2c2:	429a      	cmp	r2, r3
     2c4:	d020      	beq.n	308 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     2c6:	001a      	movs	r2, r3
     2c8:	f240 0308 	movw	r3, #8
     2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2d0:	429a      	cmp	r2, r3
     2d2:	d219      	bcs.n	308 <Reset_Handler+0x58>
     2d4:	f240 0308 	movw	r3, #8
     2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2dc:	3303      	adds	r3, #3
     2de:	4a24      	ldr	r2, [pc, #144]	; (370 <Reset_Handler+0xc0>)
     2e0:	1a9b      	subs	r3, r3, r2
     2e2:	089b      	lsrs	r3, r3, #2
     2e4:	3301      	adds	r3, #1
     2e6:	009b      	lsls	r3, r3, #2
     2e8:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     2ea:	f240 0100 	movw	r1, #0
     2ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
     2f2:	1851      	adds	r1, r2, r1
     2f4:	f642 30cc 	movw	r0, #11212	; 0x2bcc
     2f8:	f2c0 0000 	movt	r0, #0
     2fc:	1810      	adds	r0, r2, r0
     2fe:	6800      	ldr	r0, [r0, #0]
     300:	6008      	str	r0, [r1, #0]
     302:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     304:	429a      	cmp	r2, r3
     306:	d1f0      	bne.n	2ea <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	f240 0210 	movw	r2, #16
     30c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     310:	f240 2364 	movw	r3, #612	; 0x264
     314:	f2c2 0300 	movt	r3, #8192	; 0x2000
     318:	429a      	cmp	r2, r3
     31a:	d213      	bcs.n	344 <Reset_Handler+0x94>
     31c:	f240 0210 	movw	r2, #16
     320:	f2c2 0200 	movt	r2, #8192	; 0x2000
     324:	43d3      	mvns	r3, r2
     326:	f240 2164 	movw	r1, #612	; 0x264
     32a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     32e:	468c      	mov	ip, r1
     330:	4463      	add	r3, ip
     332:	2103      	movs	r1, #3
     334:	438b      	bics	r3, r1
     336:	3304      	adds	r3, #4
     338:	4694      	mov	ip, r2
     33a:	4463      	add	r3, ip
                *pDest++ = 0;
     33c:	2100      	movs	r1, #0
     33e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     340:	4293      	cmp	r3, r2
     342:	d1fc      	bne.n	33e <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     344:	f240 0300 	movw	r3, #0
     348:	f2c0 0300 	movt	r3, #0
     34c:	227f      	movs	r2, #127	; 0x7f
     34e:	4393      	bics	r3, r2
     350:	f64e 5200 	movw	r2, #60672	; 0xed00
     354:	f2ce 0200 	movt	r2, #57344	; 0xe000
     358:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     35a:	f642 03f9 	movw	r3, #10489	; 0x28f9
     35e:	f2c0 0300 	movt	r3, #0
     362:	4798      	blx	r3
        main();
     364:	f242 634d 	movw	r3, #9805	; 0x264d
     368:	f2c0 0300 	movt	r3, #0
     36c:	4798      	blx	r3
     36e:	e7fe      	b.n	36e <Reset_Handler+0xbe>
     370:	20000004 	.word	0x20000004

00000374 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC;
     378:	f640 0300 	movw	r3, #2048	; 0x800
     37c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     380:	69da      	ldr	r2, [r3, #28]
     382:	2180      	movs	r1, #128	; 0x80
     384:	430a      	orrs	r2, r1
     386:	61da      	str	r2, [r3, #28]
     388:	f641 4300 	movw	r3, #7168	; 0x1c00
     38c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     390:	3940      	subs	r1, #64	; 0x40
     392:	22c0      	movs	r2, #192	; 0xc0
     394:	5099      	str	r1, [r3, r2]
	hri_mclk_set_APBCMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
#else
	nsc_periph_clock_init(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
#endif
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	f240 042c 	movw	r4, #44	; 0x2c
     39a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     39e:	f641 4100 	movw	r1, #7168	; 0x1c00
     3a2:	f2c4 2100 	movt	r1, #16896	; 0x4200
     3a6:	f240 05cc 	movw	r5, #204	; 0xcc
     3aa:	f2c2 0500 	movt	r5, #8192	; 0x2000
     3ae:	2300      	movs	r3, #0
     3b0:	9302      	str	r3, [sp, #8]
     3b2:	f240 03fc 	movw	r3, #252	; 0xfc
     3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3ba:	9301      	str	r3, [sp, #4]
     3bc:	2701      	movs	r7, #1
     3be:	9700      	str	r7, [sp, #0]
     3c0:	2300      	movs	r3, #0
     3c2:	0022      	movs	r2, r4
     3c4:	0028      	movs	r0, r5
     3c6:	f640 0665 	movw	r6, #2149	; 0x865
     3ca:	f2c0 0600 	movt	r6, #0
     3ce:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3d0:	1d22      	adds	r2, r4, #4
     3d2:	2310      	movs	r3, #16
     3d4:	2100      	movs	r1, #0
     3d6:	0028      	movs	r0, r5
     3d8:	f640 1419 	movw	r4, #2329	; 0x919
     3dc:	f2c0 0400 	movt	r4, #0
     3e0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e2:	f240 2300 	movw	r3, #512	; 0x200
     3e6:	f2c6 0300 	movt	r3, #24576	; 0x6000
     3ea:	2204      	movs	r2, #4
     3ec:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ee:	f243 2300 	movw	r3, #12800	; 0x3200
     3f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
     3fa:	629a      	str	r2, [r3, #40]	; 0x28
     3fc:	22c0      	movs	r2, #192	; 0xc0
     3fe:	0612      	lsls	r2, r2, #24
     400:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     402:	2242      	movs	r2, #66	; 0x42
     404:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     406:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     408:	2001      	movs	r0, #1
     40a:	4301      	orrs	r1, r0
     40c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	2131      	movs	r1, #49	; 0x31
     412:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     414:	240f      	movs	r4, #15
     416:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     418:	4302      	orrs	r2, r0
     41a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     41c:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(LIGHT_SENSOR, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(LIGHT_SENSOR, PINMUX_PA02B_ADC_AIN0);
}
     41e:	b005      	add	sp, #20
     420:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000422 <RAND_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TRNG_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
     422:	f640 0300 	movw	r3, #2048	; 0x800
     426:	f2c4 0300 	movt	r3, #16384	; 0x4000
     42a:	69da      	ldr	r2, [r3, #28]
     42c:	f240 4100 	movw	r1, #1024	; 0x400
     430:	430a      	orrs	r2, r1
     432:	61da      	str	r2, [r3, #28]

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
     434:	4770      	bx	lr

00000436 <RAND_0_init>:

void RAND_0_init(void)
{
     436:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
     438:	f240 4323 	movw	r3, #1059	; 0x423
     43c:	f2c0 0300 	movt	r3, #0
     440:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
     442:	f642 0100 	movw	r1, #10240	; 0x2800
     446:	f2c4 2100 	movt	r1, #16896	; 0x4200
     44a:	f240 00c4 	movw	r0, #196	; 0xc4
     44e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     452:	f640 3343 	movw	r3, #2883	; 0xb43
     456:	f2c0 0300 	movt	r3, #0
     45a:	4798      	blx	r3
}
     45c:	bd10      	pop	{r4, pc}

0000045e <RTC_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     45e:	f640 0300 	movw	r3, #2048	; 0x800
     462:	f2c4 0300 	movt	r3, #16384	; 0x4000
     466:	695a      	ldr	r2, [r3, #20]
     468:	f240 2100 	movw	r1, #512	; 0x200
     46c:	430a      	orrs	r2, r1
     46e:	615a      	str	r2, [r3, #20]
void RTC_CLOCK_init(void)
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
#endif
}
     470:	4770      	bx	lr

00000472 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     472:	b5f0      	push	{r4, r5, r6, r7, lr}
     474:	46c6      	mov	lr, r8
     476:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     478:	f240 2400 	movw	r4, #512	; 0x200
     47c:	f2c6 0400 	movt	r4, #24576	; 0x6000
     480:	2310      	movs	r3, #16
     482:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     484:	f243 2300 	movw	r3, #12800	; 0x3200
     488:	f2c4 0300 	movt	r3, #16384	; 0x4000
     48c:	2210      	movs	r2, #16
     48e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     492:	629a      	str	r2, [r3, #40]	; 0x28
     494:	2200      	movs	r2, #0
     496:	f2cc 0202 	movt	r2, #49154	; 0xc002
     49a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     49c:	2144      	movs	r1, #68	; 0x44
     49e:	5c5a      	ldrb	r2, [r3, r1]
     4a0:	2004      	movs	r0, #4
     4a2:	4382      	bics	r2, r0
     4a4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     4a8:	2601      	movs	r6, #1
     4aa:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ac:	2501      	movs	r5, #1
     4ae:	432a      	orrs	r2, r5
     4b0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b4:	3912      	subs	r1, #18
     4b6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4b8:	f240 0c0f 	movw	ip, #15
     4bc:	4660      	mov	r0, ip
     4be:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     4c0:	2703      	movs	r7, #3
     4c2:	433a      	orrs	r2, r7
     4c4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c6:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c8:	f244 0200 	movw	r2, #16384	; 0x4000
     4cc:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ce:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
     4d4:	629a      	str	r2, [r3, #40]	; 0x28
     4d6:	22c0      	movs	r2, #192	; 0xc0
     4d8:	0612      	lsls	r2, r2, #24
     4da:	4690      	mov	r8, r2
     4dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4de:	311c      	adds	r1, #28
     4e0:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     4e2:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e4:	4328      	orrs	r0, r5
     4e6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e8:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ea:	2037      	movs	r0, #55	; 0x37
     4ec:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4ee:	4662      	mov	r2, ip
     4f0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     4f2:	4339      	orrs	r1, r7
     4f4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f8:	f248 0100 	movw	r1, #32768	; 0x8000
     4fc:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4fe:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     500:	f2c4 0100 	movt	r1, #16384	; 0x4000
     504:	6299      	str	r1, [r3, #40]	; 0x28
     506:	4642      	mov	r2, r8
     508:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50a:	214f      	movs	r1, #79	; 0x4f
     50c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     50e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     510:	432a      	orrs	r2, r5
     512:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     514:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     516:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     518:	3940      	subs	r1, #64	; 0x40
     51a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     51c:	3121      	adds	r1, #33	; 0x21
     51e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     520:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(SERCOM0_SPI_SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SERCOM0_SPI_SCK, PINMUX_PA15D_SERCOM0_PAD3);
}
     522:	bc04      	pop	{r2}
     524:	4690      	mov	r8, r2
     526:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000528 <SPI_0_CLOCK_init>:
     528:	f641 4300 	movw	r3, #7168	; 0x1c00
     52c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     530:	2240      	movs	r2, #64	; 0x40
     532:	21ac      	movs	r1, #172	; 0xac
     534:	505a      	str	r2, [r3, r1]
     536:	3904      	subs	r1, #4
     538:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     53a:	f640 0300 	movw	r3, #2048	; 0x800
     53e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     542:	69da      	ldr	r2, [r3, #28]
     544:	39a6      	subs	r1, #166	; 0xa6
     546:	430a      	orrs	r2, r1
     548:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     54a:	4770      	bx	lr

0000054c <SPI_0_init>:

void SPI_0_init(void)
{
     54c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     54e:	f240 5329 	movw	r3, #1321	; 0x529
     552:	f2c0 0300 	movt	r3, #0
     556:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     558:	f240 4100 	movw	r1, #1024	; 0x400
     55c:	f2c4 2100 	movt	r1, #16896	; 0x4200
     560:	f240 1014 	movw	r0, #276	; 0x114
     564:	f2c2 0000 	movt	r0, #8192	; 0x2000
     568:	f640 3375 	movw	r3, #2933	; 0xb75
     56c:	f2c0 0300 	movt	r3, #0
     570:	4798      	blx	r3
	SPI_0_PORT_init();
     572:	f240 4373 	movw	r3, #1139	; 0x473
     576:	f2c0 0300 	movt	r3, #0
     57a:	4798      	blx	r3
}
     57c:	bd10      	pop	{r4, pc}

0000057e <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     57e:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	f243 2300 	movw	r3, #12800	; 0x3200
     584:	f2c4 0300 	movt	r3, #16384	; 0x4000
     588:	2240      	movs	r2, #64	; 0x40
     58a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     58c:	2501      	movs	r5, #1
     58e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     590:	2401      	movs	r4, #1
     592:	4321      	orrs	r1, r4
     594:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     596:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     598:	2030      	movs	r0, #48	; 0x30
     59a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     59c:	3a31      	subs	r2, #49	; 0x31
     59e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     5a0:	3a0c      	subs	r2, #12
     5a2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a6:	2141      	movs	r1, #65	; 0x41
     5a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     5aa:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ac:	4322      	orrs	r2, r4
     5ae:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b4:	3932      	subs	r1, #50	; 0x32
     5b6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5b8:	3121      	adds	r1, #33	; 0x21
     5ba:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5bc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
}
     5be:	bd30      	pop	{r4, r5, pc}

000005c0 <USART_0_CLOCK_init>:
     5c0:	f641 4300 	movw	r3, #7168	; 0x1c00
     5c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5c8:	2140      	movs	r1, #64	; 0x40
     5ca:	22b0      	movs	r2, #176	; 0xb0
     5cc:	5099      	str	r1, [r3, r2]
     5ce:	3103      	adds	r1, #3
     5d0:	3a08      	subs	r2, #8
     5d2:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     5d4:	f640 0300 	movw	r3, #2048	; 0x800
     5d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5dc:	69da      	ldr	r2, [r3, #28]
     5de:	393f      	subs	r1, #63	; 0x3f
     5e0:	430a      	orrs	r2, r1
     5e2:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	nsc_periph_clock_init(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
#endif
}
     5e4:	4770      	bx	lr

000005e6 <USART_0_init>:

void USART_0_init(void)
{
     5e6:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     5e8:	f240 53c1 	movw	r3, #1473	; 0x5c1
     5ec:	f2c0 0300 	movt	r3, #0
     5f0:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM1, (void *)NULL);
     5f2:	f640 0100 	movw	r1, #2048	; 0x800
     5f6:	f2c4 2100 	movt	r1, #16896	; 0x4200
     5fa:	f240 102c 	movw	r0, #300	; 0x12c
     5fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
     602:	2200      	movs	r2, #0
     604:	f640 7337 	movw	r3, #3895	; 0xf37
     608:	f2c0 0300 	movt	r3, #0
     60c:	4798      	blx	r3
	USART_0_PORT_init();
     60e:	f240 537f 	movw	r3, #1407	; 0x57f
     612:	f2c0 0300 	movt	r3, #0
     616:	4798      	blx	r3
}
     618:	bd10      	pop	{r4, pc}

0000061a <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     61a:	f640 0300 	movw	r3, #2048	; 0x800
     61e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     622:	695a      	ldr	r2, [r3, #20]
     624:	f240 1100 	movw	r1, #256	; 0x100
     628:	430a      	orrs	r2, r1
     62a:	615a      	str	r2, [r3, #20]
void WDT_0_CLOCK_init(void)
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
#endif
}
     62c:	4770      	bx	lr

0000062e <WDT_0_init>:

void WDT_0_init(void)
{
     62e:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     630:	f240 631b 	movw	r3, #1563	; 0x61b
     634:	f2c0 0300 	movt	r3, #0
     638:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     63a:	f642 1148 	movw	r1, #10568	; 0x2948
     63e:	f2c0 0100 	movt	r1, #0
     642:	2248      	movs	r2, #72	; 0x48
     644:	2001      	movs	r0, #1
     646:	f640 7387 	movw	r3, #3975	; 0xf87
     64a:	f2c0 0300 	movt	r3, #0
     64e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     650:	f240 00f8 	movw	r0, #248	; 0xf8
     654:	f2c2 0000 	movt	r0, #8192	; 0x2000
     658:	f242 0300 	movw	r3, #8192	; 0x2000
     65c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     660:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     662:	f242 3397 	movw	r3, #9111	; 0x2397
     666:	f2c0 0300 	movt	r3, #0
     66a:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     66c:	bd10      	pop	{r4, pc}

0000066e <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     66e:	b510      	push	{r4, lr}
     670:	f641 4300 	movw	r3, #7168	; 0x1c00
     674:	f2c4 0300 	movt	r3, #16384	; 0x4000
     678:	2140      	movs	r1, #64	; 0x40
     67a:	2298      	movs	r2, #152	; 0x98
     67c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     67e:	f640 0300 	movw	r3, #2048	; 0x800
     682:	f2c4 0300 	movt	r3, #16384	; 0x4000
     686:	69da      	ldr	r2, [r3, #28]
     688:	393f      	subs	r1, #63	; 0x3f
     68a:	430a      	orrs	r2, r1
     68c:	61da      	str	r2, [r3, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);

	event_system_init();
     68e:	f640 233f 	movw	r3, #2623	; 0xa3f
     692:	f2c0 0300 	movt	r3, #0
     696:	4798      	blx	r3
}
     698:	bd10      	pop	{r4, pc}

0000069a <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     69a:	b570      	push	{r4, r5, r6, lr}
     69c:	f641 4300 	movw	r3, #7168	; 0x1c00
     6a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6a4:	2141      	movs	r1, #65	; 0x41
     6a6:	228c      	movs	r2, #140	; 0x8c
     6a8:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     6aa:	f640 0300 	movw	r3, #2048	; 0x800
     6ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6b2:	695a      	ldr	r2, [r3, #20]
     6b4:	f240 4100 	movw	r1, #1024	; 0x400
     6b8:	430a      	orrs	r2, r1
     6ba:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6bc:	f240 2200 	movw	r2, #512	; 0x200
     6c0:	f2c6 0200 	movt	r2, #24576	; 0x6000
     6c4:	2080      	movs	r0, #128	; 0x80
     6c6:	0500      	lsls	r0, r0, #20
     6c8:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ca:	f243 2300 	movw	r3, #12800	; 0x3200
     6ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6d2:	2100      	movs	r1, #0
     6d4:	f2c4 0102 	movt	r1, #16386	; 0x4002
     6d8:	6299      	str	r1, [r3, #40]	; 0x28
     6da:	f640 0100 	movw	r1, #2048	; 0x800
     6de:	f2cc 0102 	movt	r1, #49154	; 0xc002
     6e2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6e4:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN_Msk;
     6e6:	215b      	movs	r1, #91	; 0x5b
     6e8:	5c5c      	ldrb	r4, [r3, r1]
     6ea:	2504      	movs	r5, #4
     6ec:	432c      	orrs	r4, r5
     6ee:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6f0:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     6f4:	2001      	movs	r0, #1
     6f6:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f8:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fa:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fc:	391e      	subs	r1, #30
     6fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     700:	300e      	adds	r0, #14
     702:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     704:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON, PINMUX_PA27A_EIC_EXTINT5);

	ext_irq_init();
     706:	f640 2389 	movw	r3, #2697	; 0xa89
     70a:	f2c0 0300 	movt	r3, #0
     70e:	4798      	blx	r3
}
     710:	bd70      	pop	{r4, r5, r6, pc}

00000712 <system_init>:

void system_init(void)
{
     712:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     714:	f241 3387 	movw	r3, #4999	; 0x1387
     718:	f2c0 0300 	movt	r3, #0
     71c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     71e:	f240 2300 	movw	r3, #512	; 0x200
     722:	f2c6 0300 	movt	r3, #24576	; 0x6000
     726:	2280      	movs	r2, #128	; 0x80
     728:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     72a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     72c:	f243 2300 	movw	r3, #12800	; 0x3200
     730:	f2c4 0300 	movt	r3, #16384	; 0x4000
     734:	f2c4 0200 	movt	r2, #16384	; 0x4000
     738:	629a      	str	r2, [r3, #40]	; 0x28
     73a:	22c0      	movs	r2, #192	; 0xc0
     73c:	0612      	lsls	r2, r2, #24
     73e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	2147      	movs	r1, #71	; 0x47
     742:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     744:	2001      	movs	r0, #1
     746:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     748:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     74a:	f240 3375 	movw	r3, #885	; 0x375
     74e:	f2c0 0300 	movt	r3, #0
     752:	4798      	blx	r3

	RAND_0_init();
     754:	f240 4337 	movw	r3, #1079	; 0x437
     758:	f2c0 0300 	movt	r3, #0
     75c:	4798      	blx	r3
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     75e:	f640 0300 	movw	r3, #2048	; 0x800
     762:	f2c4 0300 	movt	r3, #16384	; 0x4000
     766:	69da      	ldr	r2, [r3, #28]
     768:	2110      	movs	r1, #16
     76a:	430a      	orrs	r2, r1
     76c:	61da      	str	r2, [r3, #28]
     76e:	f641 4300 	movw	r3, #7168	; 0x1c00
     772:	f2c4 0300 	movt	r3, #16384	; 0x4000
     776:	3130      	adds	r1, #48	; 0x30
     778:	22b8      	movs	r2, #184	; 0xb8
     77a:	5099      	str	r1, [r3, r2]
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     77c:	f242 3325 	movw	r3, #8997	; 0x2325
     780:	f2c0 0300 	movt	r3, #0
     784:	4798      	blx	r3
     786:	0002      	movs	r2, r0
     788:	f241 0100 	movw	r1, #4096	; 0x1000
     78c:	f2c4 2100 	movt	r1, #16896	; 0x4200
     790:	f240 1038 	movw	r0, #312	; 0x138
     794:	f2c2 0000 	movt	r0, #8192	; 0x2000
     798:	f640 53fb 	movw	r3, #3579	; 0xdfb
     79c:	f2c0 0300 	movt	r3, #0
     7a0:	4798      	blx	r3

	TIMER_0_init();

	RTC_CLOCK_init();
     7a2:	f240 435f 	movw	r3, #1119	; 0x45f
     7a6:	f2c0 0300 	movt	r3, #0
     7aa:	4798      	blx	r3
	RTC_init();
     7ac:	f641 431b 	movw	r3, #7195	; 0x1c1b
     7b0:	f2c0 0300 	movt	r3, #0
     7b4:	4798      	blx	r3

	SPI_0_init();
     7b6:	f240 534d 	movw	r3, #1357	; 0x54d
     7ba:	f2c0 0300 	movt	r3, #0
     7be:	4798      	blx	r3

	USART_0_init();
     7c0:	f240 53e7 	movw	r3, #1511	; 0x5e7
     7c4:	f2c0 0300 	movt	r3, #0
     7c8:	4798      	blx	r3

	WDT_0_init();
     7ca:	f240 632f 	movw	r3, #1583	; 0x62f
     7ce:	f2c0 0300 	movt	r3, #0
     7d2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     7d4:	f240 636f 	movw	r3, #1647	; 0x66f
     7d8:	f2c0 0300 	movt	r3, #0
     7dc:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     7de:	f240 639b 	movw	r3, #1691	; 0x69b
     7e2:	f2c0 0300 	movt	r3, #0
     7e6:	4798      	blx	r3
}
     7e8:	bd10      	pop	{r4, pc}

000007ea <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     7ea:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     7ec:	6983      	ldr	r3, [r0, #24]
     7ee:	b103      	cbz	r3, 7f2 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     7f0:	4798      	blx	r3
	}
}
     7f2:	bd10      	pop	{r4, pc}

000007f4 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     7f4:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     7f6:	69c3      	ldr	r3, [r0, #28]
     7f8:	b103      	cbz	r3, 7fc <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     7fa:	4798      	blx	r3
	}
}
     7fc:	bd10      	pop	{r4, pc}

000007fe <adc_async_channel_conversion_done>:
{
     7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
     800:	b083      	sub	sp, #12
     802:	0005      	movs	r5, r0
     804:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     806:	6a03      	ldr	r3, [r0, #32]
     808:	5c5b      	ldrb	r3, [r3, r1]
     80a:	005c      	lsls	r4, r3, #1
     80c:	18e4      	adds	r4, r4, r3
     80e:	00e4      	lsls	r4, r4, #3
     810:	6a83      	ldr	r3, [r0, #40]	; 0x28
     812:	469c      	mov	ip, r3
     814:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     816:	1d27      	adds	r7, r4, #4
     818:	9201      	str	r2, [sp, #4]
     81a:	466b      	mov	r3, sp
     81c:	7919      	ldrb	r1, [r3, #4]
     81e:	0038      	movs	r0, r7
     820:	f241 0351 	movw	r3, #4177	; 0x1051
     824:	f2c0 0300 	movt	r3, #0
     828:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     82a:	0028      	movs	r0, r5
     82c:	f241 332f 	movw	r3, #4911	; 0x132f
     830:	f2c0 0300 	movt	r3, #0
     834:	4798      	blx	r3
     836:	2801      	cmp	r0, #1
     838:	d90a      	bls.n	850 <adc_async_channel_conversion_done+0x52>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     83a:	9b01      	ldr	r3, [sp, #4]
     83c:	0a19      	lsrs	r1, r3, #8
     83e:	0038      	movs	r0, r7
     840:	f241 0351 	movw	r3, #4177	; 0x1051
     844:	f2c0 0300 	movt	r3, #0
     848:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     84a:	8aa3      	ldrh	r3, [r4, #20]
     84c:	3301      	adds	r3, #1
     84e:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     850:	8aa3      	ldrh	r3, [r4, #20]
     852:	3301      	adds	r3, #1
     854:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     856:	6823      	ldr	r3, [r4, #0]
     858:	b113      	cbz	r3, 860 <adc_async_channel_conversion_done+0x62>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     85a:	0031      	movs	r1, r6
     85c:	0028      	movs	r0, r5
     85e:	4798      	blx	r3
}
     860:	b003      	add	sp, #12
     862:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000864 <adc_async_init>:
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	46d6      	mov	lr, sl
     868:	464f      	mov	r7, r9
     86a:	b580      	push	{r7, lr}
     86c:	b083      	sub	sp, #12
     86e:	0007      	movs	r7, r0
     870:	9101      	str	r1, [sp, #4]
     872:	0016      	movs	r6, r2
     874:	001c      	movs	r4, r3
     876:	ab0a      	add	r3, sp, #40	; 0x28
     878:	781d      	ldrb	r5, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     87a:	2800      	cmp	r0, #0
     87c:	d046      	beq.n	90c <adc_async_init+0xa8>
     87e:	2900      	cmp	r1, #0
     880:	d046      	beq.n	910 <adc_async_init+0xac>
     882:	2a00      	cmp	r2, #0
     884:	d046      	beq.n	914 <adc_async_init+0xb0>
     886:	2000      	movs	r0, #0
     888:	b115      	cbz	r5, 890 <adc_async_init+0x2c>
     88a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     88c:	1e43      	subs	r3, r0, #1
     88e:	4198      	sbcs	r0, r3
     890:	f642 1a64 	movw	sl, #10596	; 0x2964
     894:	f2c0 0a00 	movt	sl, #0
     898:	223f      	movs	r2, #63	; 0x3f
     89a:	4651      	mov	r1, sl
     89c:	f640 7987 	movw	r9, #3975	; 0xf87
     8a0:	f2c0 0900 	movt	r9, #0
     8a4:	47c8      	blx	r9
	ASSERT(channel_amount <= (channel_max + 1));
     8a6:	1c62      	adds	r2, r4, #1
     8a8:	0feb      	lsrs	r3, r5, #31
     8aa:	17d0      	asrs	r0, r2, #31
     8ac:	42aa      	cmp	r2, r5
     8ae:	4158      	adcs	r0, r3
     8b0:	b2c0      	uxtb	r0, r0
     8b2:	2240      	movs	r2, #64	; 0x40
     8b4:	4651      	mov	r1, sl
     8b6:	47c8      	blx	r9
	for (uint8_t i = 0; i <= channel_max; i++) {
     8b8:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     8ba:	22ff      	movs	r2, #255	; 0xff
     8bc:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     8be:	3301      	adds	r3, #1
     8c0:	b2db      	uxtb	r3, r3
     8c2:	429c      	cmp	r4, r3
     8c4:	d2fa      	bcs.n	8bc <adc_async_init+0x58>
	descr->channel_map    = channel_map;
     8c6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     8c8:	2324      	movs	r3, #36	; 0x24
     8ca:	54fc      	strb	r4, [r7, r3]
	descr->channel_amount = channel_amount;
     8cc:	3301      	adds	r3, #1
     8ce:	54fd      	strb	r5, [r7, r3]
	descr->descr_ch       = descr_ch;
     8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     8d2:	62bb      	str	r3, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     8d4:	9901      	ldr	r1, [sp, #4]
     8d6:	0038      	movs	r0, r7
     8d8:	f241 2393 	movw	r3, #4755	; 0x1293
     8dc:	f2c0 0300 	movt	r3, #0
     8e0:	4798      	blx	r3
	if (init_status) {
     8e2:	b970      	cbnz	r0, 902 <adc_async_init+0x9e>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     8e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
     8e8:	f2c0 0300 	movt	r3, #0
     8ec:	60bb      	str	r3, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     8ee:	f240 73eb 	movw	r3, #2027	; 0x7eb
     8f2:	f2c0 0300 	movt	r3, #0
     8f6:	603b      	str	r3, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     8f8:	f240 73f5 	movw	r3, #2037	; 0x7f5
     8fc:	f2c0 0300 	movt	r3, #0
     900:	607b      	str	r3, [r7, #4]
}
     902:	b003      	add	sp, #12
     904:	bc0c      	pop	{r2, r3}
     906:	4691      	mov	r9, r2
     908:	469a      	mov	sl, r3
     90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     90c:	2000      	movs	r0, #0
     90e:	e7bf      	b.n	890 <adc_async_init+0x2c>
     910:	2000      	movs	r0, #0
     912:	e7bd      	b.n	890 <adc_async_init+0x2c>
     914:	2000      	movs	r0, #0
     916:	e7bb      	b.n	890 <adc_async_init+0x2c>

00000918 <adc_async_register_channel_buffer>:
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	b083      	sub	sp, #12
     91c:	0007      	movs	r7, r0
     91e:	000c      	movs	r4, r1
     920:	9200      	str	r2, [sp, #0]
     922:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     924:	b300      	cbz	r0, 968 <adc_async_register_channel_buffer+0x50>
     926:	b30a      	cbz	r2, 96c <adc_async_register_channel_buffer+0x54>
     928:	0018      	movs	r0, r3
     92a:	1e43      	subs	r3, r0, #1
     92c:	4198      	sbcs	r0, r3
     92e:	f642 1564 	movw	r5, #10596	; 0x2964
     932:	f2c0 0500 	movt	r5, #0
     936:	2266      	movs	r2, #102	; 0x66
     938:	0029      	movs	r1, r5
     93a:	f640 7687 	movw	r6, #3975	; 0xf87
     93e:	f2c0 0600 	movt	r6, #0
     942:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     944:	2324      	movs	r3, #36	; 0x24
     946:	5cfb      	ldrb	r3, [r7, r3]
     948:	2000      	movs	r0, #0
     94a:	42a3      	cmp	r3, r4
     94c:	4140      	adcs	r0, r0
     94e:	b2c0      	uxtb	r0, r0
     950:	2267      	movs	r2, #103	; 0x67
     952:	0029      	movs	r1, r5
     954:	47b0      	blx	r6
	if (descr->channel_map[channel] != 0xFF) {
     956:	6a39      	ldr	r1, [r7, #32]
     958:	5d0b      	ldrb	r3, [r1, r4]
     95a:	2bff      	cmp	r3, #255	; 0xff
     95c:	d12c      	bne.n	9b8 <adc_async_register_channel_buffer+0xa0>
	for (i = 0; i <= descr->channel_max; i++) {
     95e:	3bdb      	subs	r3, #219	; 0xdb
     960:	5cf8      	ldrb	r0, [r7, r3]
     962:	2600      	movs	r6, #0
     964:	2300      	movs	r3, #0
     966:	e007      	b.n	978 <adc_async_register_channel_buffer+0x60>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     968:	2000      	movs	r0, #0
     96a:	e7e0      	b.n	92e <adc_async_register_channel_buffer+0x16>
     96c:	2000      	movs	r0, #0
     96e:	e7de      	b.n	92e <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
     970:	3301      	adds	r3, #1
     972:	b2db      	uxtb	r3, r3
     974:	4283      	cmp	r3, r0
     976:	d805      	bhi.n	984 <adc_async_register_channel_buffer+0x6c>
		if (descr->channel_map[i] != 0xFF) {
     978:	5cca      	ldrb	r2, [r1, r3]
     97a:	2aff      	cmp	r2, #255	; 0xff
     97c:	d0f8      	beq.n	970 <adc_async_register_channel_buffer+0x58>
			index++;
     97e:	3601      	adds	r6, #1
     980:	b2f6      	uxtb	r6, r6
     982:	e7f5      	b.n	970 <adc_async_register_channel_buffer+0x58>
	if (index > descr->channel_amount) {
     984:	2325      	movs	r3, #37	; 0x25
     986:	5cfb      	ldrb	r3, [r7, r3]
     988:	42b3      	cmp	r3, r6
     98a:	d318      	bcc.n	9be <adc_async_register_channel_buffer+0xa6>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     98c:	0073      	lsls	r3, r6, #1
     98e:	199b      	adds	r3, r3, r6
     990:	00dd      	lsls	r5, r3, #3
     992:	6abb      	ldr	r3, [r7, #40]	; 0x28
     994:	1958      	adds	r0, r3, r5
     996:	3004      	adds	r0, #4
     998:	9a01      	ldr	r2, [sp, #4]
     99a:	9900      	ldr	r1, [sp, #0]
     99c:	f640 73f3 	movw	r3, #4083	; 0xff3
     9a0:	f2c0 0300 	movt	r3, #0
     9a4:	4798      	blx	r3
     9a6:	b968      	cbnz	r0, 9c4 <adc_async_register_channel_buffer+0xac>
	descr->channel_map[channel]            = index;
     9a8:	6a3b      	ldr	r3, [r7, #32]
     9aa:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9ae:	195b      	adds	r3, r3, r5
     9b0:	2200      	movs	r2, #0
     9b2:	829a      	strh	r2, [r3, #20]
}
     9b4:	b003      	add	sp, #12
     9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     9b8:	200d      	movs	r0, #13
     9ba:	4240      	negs	r0, r0
     9bc:	e7fa      	b.n	9b4 <adc_async_register_channel_buffer+0x9c>
		return ERR_NO_RESOURCE;
     9be:	201c      	movs	r0, #28
     9c0:	4240      	negs	r0, r0
     9c2:	e7f7      	b.n	9b4 <adc_async_register_channel_buffer+0x9c>
		return ERR_INVALID_ARG;
     9c4:	200d      	movs	r0, #13
     9c6:	4240      	negs	r0, r0
     9c8:	e7f4      	b.n	9b4 <adc_async_register_channel_buffer+0x9c>

000009ca <adc_async_enable_channel>:
{
     9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9cc:	0007      	movs	r7, r0
     9ce:	000c      	movs	r4, r1
	ASSERT(descr);
     9d0:	f642 1664 	movw	r6, #10596	; 0x2964
     9d4:	f2c0 0600 	movt	r6, #0
     9d8:	1e43      	subs	r3, r0, #1
     9da:	4198      	sbcs	r0, r3
     9dc:	b2c0      	uxtb	r0, r0
     9de:	2283      	movs	r2, #131	; 0x83
     9e0:	0031      	movs	r1, r6
     9e2:	f640 7587 	movw	r5, #3975	; 0xf87
     9e6:	f2c0 0500 	movt	r5, #0
     9ea:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     9ec:	2324      	movs	r3, #36	; 0x24
     9ee:	5cfb      	ldrb	r3, [r7, r3]
     9f0:	2000      	movs	r0, #0
     9f2:	42a3      	cmp	r3, r4
     9f4:	4140      	adcs	r0, r0
     9f6:	b2c0      	uxtb	r0, r0
     9f8:	2284      	movs	r2, #132	; 0x84
     9fa:	0031      	movs	r1, r6
     9fc:	47a8      	blx	r5
	_adc_async_enable_channel(&descr->device, channel);
     9fe:	0021      	movs	r1, r4
     a00:	0038      	movs	r0, r7
     a02:	f241 331b 	movw	r3, #4891	; 0x131b
     a06:	f2c0 0300 	movt	r3, #0
     a0a:	4798      	blx	r3
}
     a0c:	2000      	movs	r0, #0
     a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a10 <adc_async_start_conversion>:
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	ASSERT(descr);
     a14:	f642 1164 	movw	r1, #10596	; 0x2964
     a18:	f2c0 0100 	movt	r1, #0
     a1c:	1e43      	subs	r3, r0, #1
     a1e:	4198      	sbcs	r0, r3
     a20:	b2c0      	uxtb	r0, r0
     a22:	22d6      	movs	r2, #214	; 0xd6
     a24:	f640 7387 	movw	r3, #3975	; 0xf87
     a28:	f2c0 0300 	movt	r3, #0
     a2c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     a2e:	0020      	movs	r0, r4
     a30:	f241 3341 	movw	r3, #4929	; 0x1341
     a34:	f2c0 0300 	movt	r3, #0
     a38:	4798      	blx	r3
}
     a3a:	2000      	movs	r0, #0
     a3c:	bd10      	pop	{r4, pc}

00000a3e <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     a3e:	b510      	push	{r4, lr}
	return _event_system_init();
     a40:	f641 23d3 	movw	r3, #6867	; 0x1ad3
     a44:	f2c0 0300 	movt	r3, #0
     a48:	4798      	blx	r3
}
     a4a:	bd10      	pop	{r4, pc}

00000a4c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     a4c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     a4e:	f240 0340 	movw	r3, #64	; 0x40
     a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a56:	685c      	ldr	r4, [r3, #4]
     a58:	42a0      	cmp	r0, r4
     a5a:	d00d      	beq.n	a78 <process_ext_irq+0x2c>
     a5c:	2201      	movs	r2, #1
     a5e:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     a60:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     a62:	25ff      	movs	r5, #255	; 0xff
     a64:	e003      	b.n	a6e <process_ext_irq+0x22>
     a66:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     a68:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     a6a:	085b      	lsrs	r3, r3, #1
     a6c:	b95b      	cbnz	r3, a86 <process_ext_irq+0x3a>
		if (ext_irqs[middle].pin < pin) {
     a6e:	42a0      	cmp	r0, r4
     a70:	d9f9      	bls.n	a66 <process_ext_irq+0x1a>
	while (upper >= lower) {
     a72:	b142      	cbz	r2, a86 <process_ext_irq+0x3a>
			lower = middle + 1;
     a74:	0031      	movs	r1, r6
     a76:	e7f7      	b.n	a68 <process_ext_irq+0x1c>
			if (ext_irqs[middle].cb) {
     a78:	f240 0340 	movw	r3, #64	; 0x40
     a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	b103      	cbz	r3, a86 <process_ext_irq+0x3a>
				ext_irqs[middle].cb();
     a84:	4798      	blx	r3
		}
	}
}
     a86:	bd70      	pop	{r4, r5, r6, pc}

00000a88 <ext_irq_init>:
{
     a88:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     a8a:	f240 0340 	movw	r3, #64	; 0x40
     a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a92:	2201      	movs	r2, #1
     a94:	4252      	negs	r2, r2
     a96:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     a98:	2200      	movs	r2, #0
     a9a:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     a9c:	f640 204d 	movw	r0, #2637	; 0xa4d
     aa0:	f2c0 0000 	movt	r0, #0
     aa4:	f641 03a7 	movw	r3, #6311	; 0x18a7
     aa8:	f2c0 0300 	movt	r3, #0
     aac:	4798      	blx	r3
}
     aae:	bd10      	pop	{r4, pc}

00000ab0 <ext_irq_register>:
{
     ab0:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     ab2:	f240 0340 	movw	r3, #64	; 0x40
     ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     aba:	685b      	ldr	r3, [r3, #4]
     abc:	4298      	cmp	r0, r3
     abe:	d009      	beq.n	ad4 <ext_irq_register+0x24>
	if (NULL == cb) {
     ac0:	b309      	cbz	r1, b06 <ext_irq_register+0x56>
			if (NULL == ext_irqs[i].cb) {
     ac2:	f240 0340 	movw	r3, #64	; 0x40
     ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	b173      	cbz	r3, aec <ext_irq_register+0x3c>
		return ERR_INVALID_ARG;
     ace:	200d      	movs	r0, #13
     ad0:	4240      	negs	r0, r0
     ad2:	e017      	b.n	b04 <ext_irq_register+0x54>
			ext_irqs[i].cb = cb;
     ad4:	f240 0340 	movw	r3, #64	; 0x40
     ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     adc:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     ade:	b959      	cbnz	r1, af8 <ext_irq_register+0x48>
		return _ext_irq_enable(pin, false);
     ae0:	f641 13af 	movw	r3, #6575	; 0x19af
     ae4:	f2c0 0300 	movt	r3, #0
     ae8:	4798      	blx	r3
     aea:	e00b      	b.n	b04 <ext_irq_register+0x54>
				ext_irqs[i].cb  = cb;
     aec:	f240 0340 	movw	r3, #64	; 0x40
     af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     af4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     af6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     af8:	2101      	movs	r1, #1
     afa:	f641 13af 	movw	r3, #6575	; 0x19af
     afe:	f2c0 0300 	movt	r3, #0
     b02:	4798      	blx	r3
}
     b04:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     b06:	200d      	movs	r0, #13
     b08:	4240      	negs	r0, r0
     b0a:	e7fb      	b.n	b04 <ext_irq_register+0x54>

00000b0c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	0006      	movs	r6, r0
     b10:	000c      	movs	r4, r1
     b12:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     b14:	b198      	cbz	r0, b3e <io_write+0x32>
     b16:	0008      	movs	r0, r1
     b18:	1e43      	subs	r3, r0, #1
     b1a:	4198      	sbcs	r0, r3
     b1c:	b2c0      	uxtb	r0, r0
     b1e:	f642 1180 	movw	r1, #10624	; 0x2980
     b22:	f2c0 0100 	movt	r1, #0
     b26:	2234      	movs	r2, #52	; 0x34
     b28:	f640 7387 	movw	r3, #3975	; 0xf87
     b2c:	f2c0 0300 	movt	r3, #0
     b30:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b32:	6833      	ldr	r3, [r6, #0]
     b34:	002a      	movs	r2, r5
     b36:	0021      	movs	r1, r4
     b38:	0030      	movs	r0, r6
     b3a:	4798      	blx	r3
}
     b3c:	bd70      	pop	{r4, r5, r6, pc}
     b3e:	2000      	movs	r0, #0
     b40:	e7ed      	b.n	b1e <io_write+0x12>

00000b42 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
     b42:	b570      	push	{r4, r5, r6, lr}
     b44:	0004      	movs	r4, r0
     b46:	000d      	movs	r5, r1
	ASSERT(desc);
     b48:	f642 1194 	movw	r1, #10644	; 0x2994
     b4c:	f2c0 0100 	movt	r1, #0
     b50:	1e43      	subs	r3, r0, #1
     b52:	4198      	sbcs	r0, r3
     b54:	b2c0      	uxtb	r0, r0
     b56:	2229      	movs	r2, #41	; 0x29
     b58:	f640 7387 	movw	r3, #3975	; 0xf87
     b5c:	f2c0 0300 	movt	r3, #0
     b60:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
     b62:	0029      	movs	r1, r5
     b64:	0020      	movs	r0, r4
     b66:	f242 3349 	movw	r3, #9033	; 0x2349
     b6a:	f2c0 0300 	movt	r3, #0
     b6e:	4798      	blx	r3
}
     b70:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b74 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     b74:	b570      	push	{r4, r5, r6, lr}
     b76:	0004      	movs	r4, r0
     b78:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     b7a:	b328      	cbz	r0, bc8 <spi_m_sync_init+0x54>
     b7c:	0008      	movs	r0, r1
     b7e:	1e43      	subs	r3, r0, #1
     b80:	4198      	sbcs	r0, r3
     b82:	b2c0      	uxtb	r0, r0
     b84:	f642 11b0 	movw	r1, #10672	; 0x29b0
     b88:	f2c0 0100 	movt	r1, #0
     b8c:	2240      	movs	r2, #64	; 0x40
     b8e:	f640 7387 	movw	r3, #3975	; 0xf87
     b92:	f2c0 0300 	movt	r3, #0
     b96:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b98:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     b9a:	1d20      	adds	r0, r4, #4
     b9c:	0029      	movs	r1, r5
     b9e:	f641 6373 	movw	r3, #7795	; 0x1e73
     ba2:	f2c0 0300 	movt	r3, #0
     ba6:	4798      	blx	r3

	if (rc < 0) {
     ba8:	2800      	cmp	r0, #0
     baa:	db0c      	blt.n	bc6 <spi_m_sync_init+0x52>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     bac:	4b07      	ldr	r3, [pc, #28]	; (bcc <spi_m_sync_init+0x58>)
     bae:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     bb0:	f640 4387 	movw	r3, #3207	; 0xc87
     bb4:	f2c0 0300 	movt	r3, #0
     bb8:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     bba:	f640 4347 	movw	r3, #3143	; 0xc47
     bbe:	f2c0 0300 	movt	r3, #0
     bc2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     bc4:	2000      	movs	r0, #0
}
     bc6:	bd70      	pop	{r4, r5, r6, pc}
     bc8:	2000      	movs	r0, #0
     bca:	e7db      	b.n	b84 <spi_m_sync_init+0x10>
     bcc:	ffff8000 	.word	0xffff8000

00000bd0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     bd0:	b510      	push	{r4, lr}
     bd2:	0004      	movs	r4, r0
	ASSERT(spi);
     bd4:	f642 11b0 	movw	r1, #10672	; 0x29b0
     bd8:	f2c0 0100 	movt	r1, #0
     bdc:	1e43      	subs	r3, r0, #1
     bde:	4198      	sbcs	r0, r3
     be0:	b2c0      	uxtb	r0, r0
     be2:	2257      	movs	r2, #87	; 0x57
     be4:	f640 7387 	movw	r3, #3975	; 0xf87
     be8:	f2c0 0300 	movt	r3, #0
     bec:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     bee:	1d20      	adds	r0, r4, #4
     bf0:	f641 739b 	movw	r3, #8091	; 0x1f9b
     bf4:	f2c0 0300 	movt	r3, #0
     bf8:	4798      	blx	r3
}
     bfa:	bd10      	pop	{r4, pc}

00000bfc <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     bfc:	b530      	push	{r4, r5, lr}
     bfe:	b087      	sub	sp, #28
     c00:	0004      	movs	r4, r0
     c02:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     c04:	b1e8      	cbz	r0, c42 <spi_m_sync_transfer+0x46>
     c06:	0008      	movs	r0, r1
     c08:	1e43      	subs	r3, r0, #1
     c0a:	4198      	sbcs	r0, r3
     c0c:	b2c0      	uxtb	r0, r0
     c0e:	f642 11b0 	movw	r1, #10672	; 0x29b0
     c12:	f2c0 0100 	movt	r1, #0
     c16:	22b3      	movs	r2, #179	; 0xb3
     c18:	f640 7387 	movw	r3, #3975	; 0xf87
     c1c:	f2c0 0300 	movt	r3, #0
     c20:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     c22:	682b      	ldr	r3, [r5, #0]
     c24:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     c26:	686b      	ldr	r3, [r5, #4]
     c28:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     c2a:	68ab      	ldr	r3, [r5, #8]
     c2c:	9301      	str	r3, [sp, #4]
     c2e:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     c30:	1d20      	adds	r0, r4, #4
     c32:	a903      	add	r1, sp, #12
     c34:	f641 73d1 	movw	r3, #8145	; 0x1fd1
     c38:	f2c0 0300 	movt	r3, #0
     c3c:	4798      	blx	r3
}
     c3e:	b007      	add	sp, #28
     c40:	bd30      	pop	{r4, r5, pc}
     c42:	2000      	movs	r0, #0
     c44:	e7e3      	b.n	c0e <spi_m_sync_transfer+0x12>

00000c46 <_spi_m_sync_io_write>:
{
     c46:	b570      	push	{r4, r5, r6, lr}
     c48:	b084      	sub	sp, #16
     c4a:	0004      	movs	r4, r0
     c4c:	000e      	movs	r6, r1
     c4e:	0015      	movs	r5, r2
	ASSERT(io);
     c50:	f642 11b0 	movw	r1, #10672	; 0x29b0
     c54:	f2c0 0100 	movt	r1, #0
     c58:	1e43      	subs	r3, r0, #1
     c5a:	4198      	sbcs	r0, r3
     c5c:	b2c0      	uxtb	r0, r0
     c5e:	22a3      	movs	r2, #163	; 0xa3
     c60:	f640 7387 	movw	r3, #3975	; 0xf87
     c64:	f2c0 0300 	movt	r3, #0
     c68:	4798      	blx	r3
	xfer.rxbuf = 0;
     c6a:	2300      	movs	r3, #0
     c6c:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     c6e:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     c70:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     c72:	0020      	movs	r0, r4
     c74:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     c76:	a901      	add	r1, sp, #4
     c78:	f640 33fd 	movw	r3, #3069	; 0xbfd
     c7c:	f2c0 0300 	movt	r3, #0
     c80:	4798      	blx	r3
}
     c82:	b004      	add	sp, #16
     c84:	bd70      	pop	{r4, r5, r6, pc}

00000c86 <_spi_m_sync_io_read>:
{
     c86:	b570      	push	{r4, r5, r6, lr}
     c88:	b084      	sub	sp, #16
     c8a:	0004      	movs	r4, r0
     c8c:	000e      	movs	r6, r1
     c8e:	0015      	movs	r5, r2
	ASSERT(io);
     c90:	f642 11b0 	movw	r1, #10672	; 0x29b0
     c94:	f2c0 0100 	movt	r1, #0
     c98:	1e43      	subs	r3, r0, #1
     c9a:	4198      	sbcs	r0, r3
     c9c:	b2c0      	uxtb	r0, r0
     c9e:	2287      	movs	r2, #135	; 0x87
     ca0:	f640 7387 	movw	r3, #3975	; 0xf87
     ca4:	f2c0 0300 	movt	r3, #0
     ca8:	4798      	blx	r3
	xfer.rxbuf = buf;
     caa:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     cac:	2300      	movs	r3, #0
     cae:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     cb0:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     cb2:	0020      	movs	r0, r4
     cb4:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     cb6:	a901      	add	r1, sp, #4
     cb8:	f640 33fd 	movw	r3, #3069	; 0xbfd
     cbc:	f2c0 0300 	movt	r3, #0
     cc0:	4798      	blx	r3
}
     cc2:	b004      	add	sp, #16
     cc4:	bd70      	pop	{r4, r5, r6, pc}

00000cc6 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     cc6:	b570      	push	{r4, r5, r6, lr}
     cc8:	0004      	movs	r4, r0
     cca:	000d      	movs	r5, r1
	ASSERT(spi && io);
     ccc:	b188      	cbz	r0, cf2 <spi_m_sync_get_io_descriptor+0x2c>
     cce:	0008      	movs	r0, r1
     cd0:	1e43      	subs	r3, r0, #1
     cd2:	4198      	sbcs	r0, r3
     cd4:	b2c0      	uxtb	r0, r0
     cd6:	f642 11b0 	movw	r1, #10672	; 0x29b0
     cda:	f2c0 0100 	movt	r1, #0
     cde:	22bd      	movs	r2, #189	; 0xbd
     ce0:	f640 7387 	movw	r3, #3975	; 0xf87
     ce4:	f2c0 0300 	movt	r3, #0
     ce8:	4798      	blx	r3
	*io = &spi->io;
     cea:	340c      	adds	r4, #12
     cec:	602c      	str	r4, [r5, #0]
	return 0;
}
     cee:	2000      	movs	r0, #0
     cf0:	bd70      	pop	{r4, r5, r6, pc}
     cf2:	2000      	movs	r0, #0
     cf4:	e7ef      	b.n	cd6 <spi_m_sync_get_io_descriptor+0x10>

00000cf6 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cf8:	46ce      	mov	lr, r9
     cfa:	4647      	mov	r7, r8
     cfc:	b580      	push	{r7, lr}
     cfe:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     d00:	6803      	ldr	r3, [r0, #0]
     d02:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     d04:	b12b      	cbz	r3, d12 <timer_add_timer_task+0x1c>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     d06:	688e      	ldr	r6, [r1, #8]
     d08:	001c      	movs	r4, r3
     d0a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     d0c:	2701      	movs	r7, #1
     d0e:	1abf      	subs	r7, r7, r2
     d10:	e00f      	b.n	d32 <timer_add_timer_task+0x3c>
		list_insert_as_head(list, new_task);
     d12:	f640 73ad 	movw	r3, #4013	; 0xfad
     d16:	f2c0 0300 	movt	r3, #0
     d1a:	4798      	blx	r3
		return;
     d1c:	e01a      	b.n	d54 <timer_add_timer_task+0x5e>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     d1e:	18fb      	adds	r3, r7, r3
     d20:	68a0      	ldr	r0, [r4, #8]
     d22:	4680      	mov	r8, r0
     d24:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     d26:	42b3      	cmp	r3, r6
     d28:	d20b      	bcs.n	d42 <timer_add_timer_task+0x4c>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     d2a:	6823      	ldr	r3, [r4, #0]
     d2c:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     d2e:	b15b      	cbz	r3, d48 <timer_add_timer_task+0x52>
     d30:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     d32:	6863      	ldr	r3, [r4, #4]
     d34:	4293      	cmp	r3, r2
     d36:	d8f2      	bhi.n	d1e <timer_add_timer_task+0x28>
			time_left = it->interval - (time - it->time_label);
     d38:	68a0      	ldr	r0, [r4, #8]
     d3a:	4680      	mov	r8, r0
     d3c:	4443      	add	r3, r8
     d3e:	1a9b      	subs	r3, r3, r2
     d40:	e7f1      	b.n	d26 <timer_add_timer_task+0x30>
			break;
		prev = it;
	}

	if (it == head) {
     d42:	45a4      	cmp	ip, r4
     d44:	d00a      	beq.n	d5c <timer_add_timer_task+0x66>
     d46:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     d48:	0020      	movs	r0, r4
     d4a:	f640 73df 	movw	r3, #4063	; 0xfdf
     d4e:	f2c0 0300 	movt	r3, #0
     d52:	4798      	blx	r3
	}
}
     d54:	bc0c      	pop	{r2, r3}
     d56:	4690      	mov	r8, r2
     d58:	4699      	mov	r9, r3
     d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     d5c:	4648      	mov	r0, r9
     d5e:	f640 73ad 	movw	r3, #4013	; 0xfad
     d62:	f2c0 0300 	movt	r3, #0
     d66:	4798      	blx	r3
     d68:	e7f4      	b.n	d54 <timer_add_timer_task+0x5e>

00000d6a <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6c:	46d6      	mov	lr, sl
     d6e:	4647      	mov	r7, r8
     d70:	b580      	push	{r7, lr}
     d72:	b083      	sub	sp, #12
     d74:	0007      	movs	r7, r0
	return (void *)list->head;
     d76:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     d78:	6903      	ldr	r3, [r0, #16]
     d7a:	3301      	adds	r3, #1
     d7c:	4698      	mov	r8, r3
     d7e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     d80:	7e03      	ldrb	r3, [r0, #24]
     d82:	07db      	lsls	r3, r3, #31
     d84:	d417      	bmi.n	db6 <timer_process_counted+0x4c>
     d86:	7e03      	ldrb	r3, [r0, #24]
     d88:	079b      	lsls	r3, r3, #30
     d8a:	d414      	bmi.n	db6 <timer_process_counted+0x4c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     d8c:	b1bc      	cbz	r4, dbe <timer_process_counted+0x54>
     d8e:	4643      	mov	r3, r8
     d90:	6862      	ldr	r2, [r4, #4]
     d92:	1a9b      	subs	r3, r3, r2
     d94:	68a2      	ldr	r2, [r4, #8]
     d96:	4293      	cmp	r3, r2
     d98:	d311      	bcc.n	dbe <timer_process_counted+0x54>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     d9a:	f240 0c14 	movw	ip, #20
     d9e:	4484      	add	ip, r0
     da0:	4663      	mov	r3, ip
     da2:	9301      	str	r3, [sp, #4]
     da4:	f640 76e7 	movw	r6, #4071	; 0xfe7
     da8:	f2c0 0600 	movt	r6, #0
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     dac:	f640 4af7 	movw	sl, #3319	; 0xcf7
     db0:	f2c0 0a00 	movt	sl, #0
     db4:	e015      	b.n	de2 <timer_process_counted+0x78>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     db6:	7e3b      	ldrb	r3, [r7, #24]
     db8:	2202      	movs	r2, #2
     dba:	4313      	orrs	r3, r2
     dbc:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     dbe:	b003      	add	sp, #12
     dc0:	bc0c      	pop	{r2, r3}
     dc2:	4690      	mov	r8, r2
     dc4:	469a      	mov	sl, r3
     dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc8:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     dca:	68e3      	ldr	r3, [r4, #12]
     dcc:	0020      	movs	r0, r4
     dce:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     dd0:	2d00      	cmp	r5, #0
     dd2:	d0f4      	beq.n	dbe <timer_process_counted+0x54>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     dd4:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     dd6:	4643      	mov	r3, r8
     dd8:	686a      	ldr	r2, [r5, #4]
     dda:	1a9b      	subs	r3, r3, r2
     ddc:	68aa      	ldr	r2, [r5, #8]
     dde:	4293      	cmp	r3, r2
     de0:	d3ed      	bcc.n	dbe <timer_process_counted+0x54>
		list_remove_head(&timer->tasks);
     de2:	9801      	ldr	r0, [sp, #4]
     de4:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     de6:	7c23      	ldrb	r3, [r4, #16]
     de8:	2b01      	cmp	r3, #1
     dea:	d1ed      	bne.n	dc8 <timer_process_counted+0x5e>
			tmp->time_label = time;
     dec:	4643      	mov	r3, r8
     dee:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     df0:	4642      	mov	r2, r8
     df2:	0021      	movs	r1, r4
     df4:	9801      	ldr	r0, [sp, #4]
     df6:	47d0      	blx	sl
     df8:	e7e6      	b.n	dc8 <timer_process_counted+0x5e>

00000dfa <timer_init>:
{
     dfa:	b570      	push	{r4, r5, r6, lr}
     dfc:	0005      	movs	r5, r0
     dfe:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     e00:	b1e8      	cbz	r0, e3e <timer_init+0x44>
     e02:	0008      	movs	r0, r1
     e04:	1e43      	subs	r3, r0, #1
     e06:	4198      	sbcs	r0, r3
     e08:	b2c0      	uxtb	r0, r0
     e0a:	f642 11cc 	movw	r1, #10700	; 0x29cc
     e0e:	f2c0 0100 	movt	r1, #0
     e12:	223b      	movs	r2, #59	; 0x3b
     e14:	f640 7387 	movw	r3, #3975	; 0xf87
     e18:	f2c0 0300 	movt	r3, #0
     e1c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e1e:	0021      	movs	r1, r4
     e20:	0028      	movs	r0, r5
     e22:	f242 130f 	movw	r3, #8463	; 0x210f
     e26:	f2c0 0300 	movt	r3, #0
     e2a:	4798      	blx	r3
	descr->time                           = 0;
     e2c:	2300      	movs	r3, #0
     e2e:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e30:	f640 536b 	movw	r3, #3435	; 0xd6b
     e34:	f2c0 0300 	movt	r3, #0
     e38:	602b      	str	r3, [r5, #0]
}
     e3a:	2000      	movs	r0, #0
     e3c:	bd70      	pop	{r4, r5, r6, pc}
     e3e:	2000      	movs	r0, #0
     e40:	e7e3      	b.n	e0a <timer_init+0x10>

00000e42 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e44:	46ce      	mov	lr, r9
     e46:	4647      	mov	r7, r8
     e48:	b580      	push	{r7, lr}
     e4a:	0004      	movs	r4, r0
     e4c:	000f      	movs	r7, r1
     e4e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     e50:	2800      	cmp	r0, #0
     e52:	d037      	beq.n	ec4 <usart_sync_write+0x82>
     e54:	2900      	cmp	r1, #0
     e56:	d037      	beq.n	ec8 <usart_sync_write+0x86>
     e58:	0010      	movs	r0, r2
     e5a:	1e43      	subs	r3, r0, #1
     e5c:	4198      	sbcs	r0, r3
     e5e:	f642 11e4 	movw	r1, #10724	; 0x29e4
     e62:	f2c0 0100 	movt	r1, #0
     e66:	22f1      	movs	r2, #241	; 0xf1
     e68:	f640 7387 	movw	r3, #3975	; 0xf87
     e6c:	f2c0 0300 	movt	r3, #0
     e70:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     e72:	3408      	adds	r4, #8
     e74:	f641 6555 	movw	r5, #7765	; 0x1e55
     e78:	f2c0 0500 	movt	r5, #0
     e7c:	0020      	movs	r0, r4
     e7e:	47a8      	blx	r5
     e80:	2800      	cmp	r0, #0
     e82:	d0fb      	beq.n	e7c <usart_sync_write+0x3a>
     e84:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     e86:	f641 6945 	movw	r9, #7749	; 0x1e45
     e8a:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     e8e:	f641 6555 	movw	r5, #7765	; 0x1e55
     e92:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     e96:	5db9      	ldrb	r1, [r7, r6]
     e98:	0020      	movs	r0, r4
     e9a:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     e9c:	0020      	movs	r0, r4
     e9e:	47a8      	blx	r5
     ea0:	2800      	cmp	r0, #0
     ea2:	d0fb      	beq.n	e9c <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     ea4:	3601      	adds	r6, #1
     ea6:	4546      	cmp	r6, r8
     ea8:	d3f5      	bcc.n	e96 <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     eaa:	f641 655f 	movw	r5, #7775	; 0x1e5f
     eae:	f2c0 0500 	movt	r5, #0
     eb2:	0020      	movs	r0, r4
     eb4:	47a8      	blx	r5
     eb6:	2800      	cmp	r0, #0
     eb8:	d0fb      	beq.n	eb2 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     eba:	0030      	movs	r0, r6
     ebc:	bc0c      	pop	{r2, r3}
     ebe:	4690      	mov	r8, r2
     ec0:	4699      	mov	r9, r3
     ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     ec4:	2000      	movs	r0, #0
     ec6:	e7ca      	b.n	e5e <usart_sync_write+0x1c>
     ec8:	2000      	movs	r0, #0
     eca:	e7c8      	b.n	e5e <usart_sync_write+0x1c>

00000ecc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ece:	46ce      	mov	lr, r9
     ed0:	4647      	mov	r7, r8
     ed2:	b580      	push	{r7, lr}
     ed4:	0004      	movs	r4, r0
     ed6:	4688      	mov	r8, r1
     ed8:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     eda:	b340      	cbz	r0, f2e <usart_sync_read+0x62>
     edc:	b349      	cbz	r1, f32 <usart_sync_read+0x66>
     ede:	0010      	movs	r0, r2
     ee0:	1e43      	subs	r3, r0, #1
     ee2:	4198      	sbcs	r0, r3
     ee4:	f642 11e4 	movw	r1, #10724	; 0x29e4
     ee8:	f2c0 0100 	movt	r1, #0
     eec:	f240 120c 	movw	r2, #268	; 0x10c
     ef0:	f640 7387 	movw	r3, #3975	; 0xf87
     ef4:	f2c0 0300 	movt	r3, #0
     ef8:	4798      	blx	r3
	uint32_t                      offset = 0;
     efa:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     efc:	3408      	adds	r4, #8
     efe:	f641 6569 	movw	r5, #7785	; 0x1e69
     f02:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     f06:	f641 674d 	movw	r7, #7757	; 0x1e4d
     f0a:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     f0e:	0020      	movs	r0, r4
     f10:	47a8      	blx	r5
     f12:	2800      	cmp	r0, #0
     f14:	d0fb      	beq.n	f0e <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     f16:	0020      	movs	r0, r4
     f18:	47b8      	blx	r7
     f1a:	4643      	mov	r3, r8
     f1c:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
     f1e:	3601      	adds	r6, #1
     f20:	454e      	cmp	r6, r9
     f22:	d3f4      	bcc.n	f0e <usart_sync_read+0x42>

	return (int32_t)offset;
}
     f24:	0030      	movs	r0, r6
     f26:	bc0c      	pop	{r2, r3}
     f28:	4690      	mov	r8, r2
     f2a:	4699      	mov	r9, r3
     f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     f2e:	2000      	movs	r0, #0
     f30:	e7d8      	b.n	ee4 <usart_sync_read+0x18>
     f32:	2000      	movs	r0, #0
     f34:	e7d6      	b.n	ee4 <usart_sync_read+0x18>

00000f36 <usart_sync_init>:
{
     f36:	b570      	push	{r4, r5, r6, lr}
     f38:	0005      	movs	r5, r0
     f3a:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     f3c:	b308      	cbz	r0, f82 <usart_sync_init+0x4c>
     f3e:	0008      	movs	r0, r1
     f40:	1e43      	subs	r3, r0, #1
     f42:	4198      	sbcs	r0, r3
     f44:	b2c0      	uxtb	r0, r0
     f46:	f642 11e4 	movw	r1, #10724	; 0x29e4
     f4a:	f2c0 0100 	movt	r1, #0
     f4e:	2234      	movs	r2, #52	; 0x34
     f50:	f640 7387 	movw	r3, #3975	; 0xf87
     f54:	f2c0 0300 	movt	r3, #0
     f58:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     f5a:	0028      	movs	r0, r5
     f5c:	3008      	adds	r0, #8
     f5e:	0021      	movs	r1, r4
     f60:	f641 6315 	movw	r3, #7701	; 0x1e15
     f64:	f2c0 0300 	movt	r3, #0
     f68:	4798      	blx	r3
	if (init_status) {
     f6a:	b948      	cbnz	r0, f80 <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
     f6c:	f640 63cd 	movw	r3, #3789	; 0xecd
     f70:	f2c0 0300 	movt	r3, #0
     f74:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     f76:	f640 6343 	movw	r3, #3651	; 0xe43
     f7a:	f2c0 0300 	movt	r3, #0
     f7e:	602b      	str	r3, [r5, #0]
}
     f80:	bd70      	pop	{r4, r5, r6, pc}
     f82:	2000      	movs	r0, #0
     f84:	e7df      	b.n	f46 <usart_sync_init+0x10>

00000f86 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f86:	b900      	cbnz	r0, f8a <assert+0x4>
		__asm("BKPT #0");
     f88:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     f8a:	4770      	bx	lr

00000f8c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f8c:	6803      	ldr	r3, [r0, #0]
     f8e:	b14b      	cbz	r3, fa4 <is_list_element+0x18>
		if (it == element) {
     f90:	428b      	cmp	r3, r1
     f92:	d009      	beq.n	fa8 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	b11b      	cbz	r3, fa0 <is_list_element+0x14>
		if (it == element) {
     f98:	4299      	cmp	r1, r3
     f9a:	d1fb      	bne.n	f94 <is_list_element+0x8>
			return true;
     f9c:	2001      	movs	r0, #1
     f9e:	e000      	b.n	fa2 <is_list_element+0x16>
		}
	}

	return false;
     fa0:	2000      	movs	r0, #0
}
     fa2:	4770      	bx	lr
	return false;
     fa4:	2000      	movs	r0, #0
     fa6:	e7fc      	b.n	fa2 <is_list_element+0x16>
			return true;
     fa8:	2001      	movs	r0, #1
     faa:	e7fa      	b.n	fa2 <is_list_element+0x16>

00000fac <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	0004      	movs	r4, r0
     fb0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     fb2:	f640 738d 	movw	r3, #3981	; 0xf8d
     fb6:	f2c0 0300 	movt	r3, #0
     fba:	4798      	blx	r3
     fbc:	f642 2100 	movw	r1, #10752	; 0x2a00
     fc0:	f2c0 0100 	movt	r1, #0
     fc4:	2301      	movs	r3, #1
     fc6:	4058      	eors	r0, r3
     fc8:	b2c0      	uxtb	r0, r0
     fca:	2239      	movs	r2, #57	; 0x39
     fcc:	f640 7387 	movw	r3, #3975	; 0xf87
     fd0:	f2c0 0300 	movt	r3, #0
     fd4:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     fd6:	6823      	ldr	r3, [r4, #0]
     fd8:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     fda:	6025      	str	r5, [r4, #0]
}
     fdc:	bd70      	pop	{r4, r5, r6, pc}

00000fde <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     fde:	6803      	ldr	r3, [r0, #0]
     fe0:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     fe2:	6001      	str	r1, [r0, #0]
}
     fe4:	4770      	bx	lr

00000fe6 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     fe6:	6803      	ldr	r3, [r0, #0]
     fe8:	b10b      	cbz	r3, fee <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     fea:	681a      	ldr	r2, [r3, #0]
     fec:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     fee:	0018      	movs	r0, r3
     ff0:	4770      	bx	lr

00000ff2 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     ff2:	b570      	push	{r4, r5, r6, lr}
     ff4:	0004      	movs	r4, r0
     ff6:	000e      	movs	r6, r1
     ff8:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     ffa:	b178      	cbz	r0, 101c <ringbuffer_init+0x2a>
     ffc:	b319      	cbz	r1, 1046 <ringbuffer_init+0x54>
     ffe:	2001      	movs	r0, #1
    1000:	b96a      	cbnz	r2, 101e <ringbuffer_init+0x2c>
    1002:	f642 2120 	movw	r1, #10784	; 0x2a20
    1006:	f2c0 0100 	movt	r1, #0
    100a:	2228      	movs	r2, #40	; 0x28
    100c:	2000      	movs	r0, #0
    100e:	f640 7387 	movw	r3, #3975	; 0xf87
    1012:	f2c0 0300 	movt	r3, #0
    1016:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1018:	1e6b      	subs	r3, r5, #1
    101a:	e00d      	b.n	1038 <ringbuffer_init+0x46>
	ASSERT(rb && buf && size);
    101c:	2000      	movs	r0, #0
    101e:	f642 2120 	movw	r1, #10784	; 0x2a20
    1022:	f2c0 0100 	movt	r1, #0
    1026:	2228      	movs	r2, #40	; 0x28
    1028:	f640 7387 	movw	r3, #3975	; 0xf87
    102c:	f2c0 0300 	movt	r3, #0
    1030:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1032:	1e6b      	subs	r3, r5, #1
    1034:	422b      	tst	r3, r5
    1036:	d108      	bne.n	104a <ringbuffer_init+0x58>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1038:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    103a:	2300      	movs	r3, #0
    103c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    103e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1040:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1042:	2000      	movs	r0, #0
}
    1044:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1046:	2000      	movs	r0, #0
    1048:	e7e9      	b.n	101e <ringbuffer_init+0x2c>
		return ERR_INVALID_ARG;
    104a:	200d      	movs	r0, #13
    104c:	4240      	negs	r0, r0
    104e:	e7f9      	b.n	1044 <ringbuffer_init+0x52>

00001050 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1050:	b570      	push	{r4, r5, r6, lr}
    1052:	0004      	movs	r4, r0
    1054:	000d      	movs	r5, r1
	ASSERT(rb);
    1056:	f642 2120 	movw	r1, #10784	; 0x2a20
    105a:	f2c0 0100 	movt	r1, #0
    105e:	1e43      	subs	r3, r0, #1
    1060:	4198      	sbcs	r0, r3
    1062:	b2c0      	uxtb	r0, r0
    1064:	2251      	movs	r2, #81	; 0x51
    1066:	f640 7387 	movw	r3, #3975	; 0xf87
    106a:	f2c0 0300 	movt	r3, #0
    106e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1070:	6863      	ldr	r3, [r4, #4]
    1072:	68e2      	ldr	r2, [r4, #12]
    1074:	4013      	ands	r3, r2
    1076:	6822      	ldr	r2, [r4, #0]
    1078:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    107a:	68e3      	ldr	r3, [r4, #12]
    107c:	6861      	ldr	r1, [r4, #4]
    107e:	68a2      	ldr	r2, [r4, #8]
    1080:	1a9a      	subs	r2, r3, r2
    1082:	428a      	cmp	r2, r1
    1084:	d901      	bls.n	108a <ringbuffer_put+0x3a>
		rb->read_index = rb->write_index - rb->size;
    1086:	1a59      	subs	r1, r3, r1
    1088:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    108a:	3301      	adds	r3, #1
    108c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    108e:	2000      	movs	r0, #0
    1090:	bd70      	pop	{r4, r5, r6, pc}

00001092 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1092:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
    1094:	6942      	ldr	r2, [r0, #20]
	return tmp;
}

static inline hri_adc_intflag_reg_t hri_adc_read_INTFLAG_reg(const void *const hw)
{
	return ((Adc *)hw)->INTFLAG.reg;
    1096:	7991      	ldrb	r1, [r2, #6]
	return tmp;
}

static inline hri_adc_intenset_reg_t hri_adc_read_INTEN_reg(const void *const hw)
{
	return ((Adc *)hw)->INTENSET.reg;
    1098:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    109a:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    109c:	07d9      	lsls	r1, r3, #31
    109e:	d404      	bmi.n	10aa <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    10a0:	0799      	lsls	r1, r3, #30
    10a2:	d40a      	bmi.n	10ba <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    10a4:	075b      	lsls	r3, r3, #29
    10a6:	d40e      	bmi.n	10c6 <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
    10a8:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY_Msk;
    10aa:	2301      	movs	r3, #1
    10ac:	7193      	strb	r3, [r2, #6]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    10ae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    10b0:	b292      	uxth	r2, r2
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    10b2:	6883      	ldr	r3, [r0, #8]
    10b4:	2100      	movs	r1, #0
    10b6:	4798      	blx	r3
    10b8:	e7f6      	b.n	10a8 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN_Msk;
    10ba:	2302      	movs	r3, #2
    10bc:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
    10be:	6843      	ldr	r3, [r0, #4]
    10c0:	2100      	movs	r1, #0
    10c2:	4798      	blx	r3
    10c4:	e7f0      	b.n	10a8 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON_Msk;
    10c6:	2304      	movs	r3, #4
    10c8:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
    10ca:	6803      	ldr	r3, [r0, #0]
    10cc:	2100      	movs	r1, #0
    10ce:	4798      	blx	r3
}
    10d0:	e7ea      	b.n	10a8 <_adc_interrupt_handler+0x16>

000010d2 <_adc_get_regs>:
}
    10d2:	2000      	movs	r0, #0
    10d4:	4770      	bx	lr

000010d6 <_adc_init>:
{
    10d6:	b570      	push	{r4, r5, r6, lr}
    10d8:	0004      	movs	r4, r0
    10da:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    10dc:	f642 2160 	movw	r1, #10848	; 0x2a60
    10e0:	f2c0 0100 	movt	r1, #0
    10e4:	f24e 4300 	movw	r3, #58368	; 0xe400
    10e8:	f6cb 53ff 	movt	r3, #48639	; 0xbdff
    10ec:	18c0      	adds	r0, r0, r3
    10ee:	4243      	negs	r3, r0
    10f0:	4158      	adcs	r0, r3
    10f2:	b2c0      	uxtb	r0, r0
    10f4:	22b1      	movs	r2, #177	; 0xb1
    10f6:	f640 7387 	movw	r3, #3975	; 0xf87
    10fa:	f2c0 0300 	movt	r3, #0
    10fe:	4798      	blx	r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1100:	8c23      	ldrh	r3, [r4, #32]
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1102:	07db      	lsls	r3, r3, #31
    1104:	d418      	bmi.n	1138 <_adc_init+0x62>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1106:	2203      	movs	r2, #3
    1108:	8c23      	ldrh	r3, [r4, #32]
    110a:	4213      	tst	r3, r2
    110c:	d1fc      	bne.n	1108 <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    110e:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1110:	079b      	lsls	r3, r3, #30
    1112:	d50b      	bpl.n	112c <_adc_init+0x56>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE_Msk;
    1114:	7823      	ldrb	r3, [r4, #0]
    1116:	2202      	movs	r2, #2
    1118:	4393      	bics	r3, r2
    111a:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    111c:	3201      	adds	r2, #1
    111e:	8c23      	ldrh	r3, [r4, #32]
    1120:	4213      	tst	r3, r2
    1122:	d1fc      	bne.n	111e <_adc_init+0x48>
    1124:	2202      	movs	r2, #2
    1126:	8c23      	ldrh	r3, [r4, #32]
    1128:	4213      	tst	r3, r2
    112a:	d1fc      	bne.n	1126 <_adc_init+0x50>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    112c:	2301      	movs	r3, #1
    112e:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1130:	2203      	movs	r2, #3
    1132:	8c23      	ldrh	r3, [r4, #32]
    1134:	4213      	tst	r3, r2
    1136:	d1fc      	bne.n	1132 <_adc_init+0x5c>
    1138:	2201      	movs	r2, #1
    113a:	8c23      	ldrh	r3, [r4, #32]
    113c:	4213      	tst	r3, r2
    113e:	d1fc      	bne.n	113a <_adc_init+0x64>
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1140:	00eb      	lsls	r3, r5, #3
    1142:	1b5b      	subs	r3, r3, r5
    1144:	009b      	lsls	r3, r3, #2
    1146:	f642 2244 	movw	r2, #10820	; 0x2a44
    114a:	f2c0 0200 	movt	r2, #0
    114e:	4694      	mov	ip, r2
    1150:	4463      	add	r3, ip
    1152:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1154:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1156:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1158:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    115a:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    115c:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    115e:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1160:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1162:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1166:	8c23      	ldrh	r3, [r4, #32]
    1168:	4213      	tst	r3, r2
    116a:	d1fc      	bne.n	1166 <_adc_init+0x90>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    116c:	00eb      	lsls	r3, r5, #3
    116e:	1b5b      	subs	r3, r3, r5
    1170:	009b      	lsls	r3, r3, #2
    1172:	f642 2244 	movw	r2, #10820	; 0x2a44
    1176:	f2c0 0200 	movt	r2, #0
    117a:	4694      	mov	ip, r2
    117c:	4463      	add	r3, ip
    117e:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
    1180:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1182:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1186:	8c23      	ldrh	r3, [r4, #32]
    1188:	4213      	tst	r3, r2
    118a:	d1fc      	bne.n	1186 <_adc_init+0xb0>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    118c:	00eb      	lsls	r3, r5, #3
    118e:	1b5b      	subs	r3, r3, r5
    1190:	009b      	lsls	r3, r3, #2
    1192:	f642 2244 	movw	r2, #10820	; 0x2a44
    1196:	f2c0 0200 	movt	r2, #0
    119a:	4694      	mov	ip, r2
    119c:	4463      	add	r3, ip
    119e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    11a0:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    11a6:	8c23      	ldrh	r3, [r4, #32]
    11a8:	4213      	tst	r3, r2
    11aa:	d1fc      	bne.n	11a6 <_adc_init+0xd0>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    11ac:	00eb      	lsls	r3, r5, #3
    11ae:	1b5b      	subs	r3, r3, r5
    11b0:	009b      	lsls	r3, r3, #2
    11b2:	f642 2244 	movw	r2, #10820	; 0x2a44
    11b6:	f2c0 0200 	movt	r2, #0
    11ba:	4694      	mov	ip, r2
    11bc:	4463      	add	r3, ip
    11be:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    11c0:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    11c6:	8c23      	ldrh	r3, [r4, #32]
    11c8:	4213      	tst	r3, r2
    11ca:	d1fc      	bne.n	11c6 <_adc_init+0xf0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    11cc:	00eb      	lsls	r3, r5, #3
    11ce:	1b5b      	subs	r3, r3, r5
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	f642 2244 	movw	r2, #10820	; 0x2a44
    11d6:	f2c0 0200 	movt	r2, #0
    11da:	4694      	mov	ip, r2
    11dc:	4463      	add	r3, ip
    11de:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    11e0:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11e2:	2240      	movs	r2, #64	; 0x40
    11e4:	8c23      	ldrh	r3, [r4, #32]
    11e6:	4213      	tst	r3, r2
    11e8:	d1fc      	bne.n	11e4 <_adc_init+0x10e>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    11ea:	00eb      	lsls	r3, r5, #3
    11ec:	1b5b      	subs	r3, r3, r5
    11ee:	009b      	lsls	r3, r3, #2
    11f0:	f642 2244 	movw	r2, #10820	; 0x2a44
    11f4:	f2c0 0200 	movt	r2, #0
    11f8:	4694      	mov	ip, r2
    11fa:	4463      	add	r3, ip
    11fc:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    11fe:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1200:	2280      	movs	r2, #128	; 0x80
    1202:	8c23      	ldrh	r3, [r4, #32]
    1204:	4213      	tst	r3, r2
    1206:	d1fc      	bne.n	1202 <_adc_init+0x12c>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1208:	00eb      	lsls	r3, r5, #3
    120a:	1b5b      	subs	r3, r3, r5
    120c:	009b      	lsls	r3, r3, #2
    120e:	f642 2244 	movw	r2, #10820	; 0x2a44
    1212:	f2c0 0200 	movt	r2, #0
    1216:	4694      	mov	ip, r2
    1218:	4463      	add	r3, ip
    121a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    121c:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    121e:	f240 1200 	movw	r2, #256	; 0x100
    1222:	8c23      	ldrh	r3, [r4, #32]
    1224:	4213      	tst	r3, r2
    1226:	d1fc      	bne.n	1222 <_adc_init+0x14c>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1228:	00eb      	lsls	r3, r5, #3
    122a:	1b5b      	subs	r3, r3, r5
    122c:	009b      	lsls	r3, r3, #2
    122e:	f642 2244 	movw	r2, #10820	; 0x2a44
    1232:	f2c0 0200 	movt	r2, #0
    1236:	4694      	mov	ip, r2
    1238:	4463      	add	r3, ip
    123a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    123c:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    123e:	f240 2200 	movw	r2, #512	; 0x200
    1242:	8c23      	ldrh	r3, [r4, #32]
    1244:	4213      	tst	r3, r2
    1246:	d1fc      	bne.n	1242 <_adc_init+0x16c>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1248:	00eb      	lsls	r3, r5, #3
    124a:	1b5a      	subs	r2, r3, r5
    124c:	0092      	lsls	r2, r2, #2
    124e:	f642 2144 	movw	r1, #10820	; 0x2a44
    1252:	f2c0 0100 	movt	r1, #0
    1256:	468c      	mov	ip, r1
    1258:	4462      	add	r2, ip
    125a:	7d12      	ldrb	r2, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    125c:	7722      	strb	r2, [r4, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
    125e:	2200      	movs	r2, #0
    1260:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_CALIB_reg(hw, ADC_CALIB_BIASCOMP(BIASCOMP_VAL) | ADC_CALIB_BIASREFBUF(BIASREFBUF_VAL));
    1262:	f246 0220 	movw	r2, #24608	; 0x6020
    1266:	f2c0 0280 	movt	r2, #128	; 0x80
    126a:	6811      	ldr	r1, [r2, #0]
    126c:	068a      	lsls	r2, r1, #26
    126e:	0f52      	lsrs	r2, r2, #29
    1270:	0209      	lsls	r1, r1, #8
    1272:	f240 7000 	movw	r0, #1792	; 0x700
    1276:	4001      	ands	r1, r0
    1278:	430a      	orrs	r2, r1
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    127a:	85a2      	strh	r2, [r4, #44]	; 0x2c
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    127c:	1b5d      	subs	r5, r3, r5
    127e:	00ad      	lsls	r5, r5, #2
    1280:	4465      	add	r5, ip
    1282:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1284:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1286:	2203      	movs	r2, #3
    1288:	8c23      	ldrh	r3, [r4, #32]
    128a:	4213      	tst	r3, r2
    128c:	d1fc      	bne.n	1288 <_adc_init+0x1b2>
}
    128e:	2000      	movs	r0, #0
    1290:	bd70      	pop	{r4, r5, r6, pc}

00001292 <_adc_async_init>:
{
    1292:	b570      	push	{r4, r5, r6, lr}
    1294:	0005      	movs	r5, r0
    1296:	000c      	movs	r4, r1
	ASSERT(device);
    1298:	f642 2160 	movw	r1, #10848	; 0x2a60
    129c:	f2c0 0100 	movt	r1, #0
    12a0:	1e43      	subs	r3, r0, #1
    12a2:	4198      	sbcs	r0, r3
    12a4:	b2c0      	uxtb	r0, r0
    12a6:	22ed      	movs	r2, #237	; 0xed
    12a8:	f640 7387 	movw	r3, #3975	; 0xf87
    12ac:	f2c0 0300 	movt	r3, #0
    12b0:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    12b2:	0020      	movs	r0, r4
    12b4:	f241 03d3 	movw	r3, #4307	; 0x10d3
    12b8:	f2c0 0300 	movt	r3, #0
    12bc:	4798      	blx	r3
    12be:	0001      	movs	r1, r0
    12c0:	0020      	movs	r0, r4
    12c2:	f241 03d7 	movw	r3, #4311	; 0x10d7
    12c6:	f2c0 0300 	movt	r3, #0
    12ca:	4798      	blx	r3
	if (init_status) {
    12cc:	b100      	cbz	r0, 12d0 <_adc_async_init+0x3e>
}
    12ce:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    12d0:	616c      	str	r4, [r5, #20]
	if (hw == ADC) {
    12d2:	f641 4300 	movw	r3, #7168	; 0x1c00
    12d6:	f2c4 2300 	movt	r3, #16896	; 0x4200
    12da:	429c      	cmp	r4, r3
    12dc:	d017      	beq.n	130e <_adc_async_init+0x7c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12de:	f24e 1300 	movw	r3, #57600	; 0xe100
    12e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12e6:	2484      	movs	r4, #132	; 0x84
    12e8:	2220      	movs	r2, #32
    12ea:	511a      	str	r2, [r3, r4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12f0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12f4:	f240 1184 	movw	r1, #388	; 0x184
    12f8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12fa:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12fc:	3220      	adds	r2, #32
    12fe:	511a      	str	r2, [r3, r4]
  __ASM volatile ("dsb 0xF":::"memory");
    1300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1304:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1308:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130a:	605a      	str	r2, [r3, #4]
    130c:	e7df      	b.n	12ce <_adc_async_init+0x3c>
		_adc0_dev = dev;
    130e:	f240 0348 	movw	r3, #72	; 0x48
    1312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1316:	601d      	str	r5, [r3, #0]
    1318:	e7e1      	b.n	12de <_adc_async_init+0x4c>

0000131a <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    131a:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE_Msk;
    131c:	7813      	ldrb	r3, [r2, #0]
    131e:	2102      	movs	r1, #2
    1320:	430b      	orrs	r3, r1
    1322:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1324:	3101      	adds	r1, #1
    1326:	8c13      	ldrh	r3, [r2, #32]
    1328:	420b      	tst	r3, r1
    132a:	d1fc      	bne.n	1326 <_adc_async_enable_channel+0xc>
}
    132c:	4770      	bx	lr

0000132e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    132e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
    1330:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    1332:	0680      	lsls	r0, r0, #26
    1334:	0f80      	lsrs	r0, r0, #30
    1336:	3803      	subs	r0, #3
    1338:	1e43      	subs	r3, r0, #1
    133a:	4198      	sbcs	r0, r3
    133c:	3001      	adds	r0, #1
}
    133e:	4770      	bx	lr

00001340 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1340:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START_Msk;
    1342:	7e13      	ldrb	r3, [r2, #24]
    1344:	2102      	movs	r1, #2
    1346:	430b      	orrs	r3, r1
    1348:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    134a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    134e:	8c13      	ldrh	r3, [r2, #32]
    1350:	420b      	tst	r3, r1
    1352:	d1fc      	bne.n	134e <_adc_async_convert+0xe>
}
    1354:	4770      	bx	lr

00001356 <ADC_OTHER_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC_OTHER_Handler(void)
{
    1356:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    1358:	f240 0348 	movw	r3, #72	; 0x48
    135c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1360:	6818      	ldr	r0, [r3, #0]
    1362:	f241 0393 	movw	r3, #4243	; 0x1093
    1366:	f2c0 0300 	movt	r3, #0
    136a:	4798      	blx	r3
}
    136c:	bd10      	pop	{r4, pc}

0000136e <ADC_RESRDY_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC_RESRDY_Handler(void)
{
    136e:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    1370:	f240 0348 	movw	r3, #72	; 0x48
    1374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1378:	6818      	ldr	r0, [r3, #0]
    137a:	f241 0393 	movw	r3, #4243	; 0x1093
    137e:	f2c0 0300 	movt	r3, #0
    1382:	4798      	blx	r3
}
    1384:	bd10      	pop	{r4, pc}

00001386 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1386:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1388:	f245 0300 	movw	r3, #20480	; 0x5000
    138c:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1390:	685a      	ldr	r2, [r3, #4]
    1392:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
    1394:	2000      	movs	r0, #0
    1396:	f641 33e1 	movw	r3, #7137	; 0x1be1
    139a:	f2c0 0300 	movt	r3, #0
    139e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    13a0:	f641 3399 	movw	r3, #7065	; 0x1b99
    13a4:	f2c0 0300 	movt	r3, #0
    13a8:	4798      	blx	r3
	_oscctrl_init_sources();
    13aa:	f641 33b1 	movw	r3, #7089	; 0x1bb1
    13ae:	f2c0 0300 	movt	r3, #0
    13b2:	4798      	blx	r3
	_mclk_init();
    13b4:	f641 338b 	movw	r3, #7051	; 0x1b8b
    13b8:	f2c0 0300 	movt	r3, #0
    13bc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    13be:	f641 33df 	movw	r3, #7135	; 0x1bdf
    13c2:	f2c0 0300 	movt	r3, #0
    13c6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13c8:	201f      	movs	r0, #31
    13ca:	f641 333d 	movw	r3, #6973	; 0x1b3d
    13ce:	f2c0 0300 	movt	r3, #0
    13d2:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    13d4:	f640 0300 	movw	r3, #2048	; 0x800
    13d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    13dc:	691a      	ldr	r2, [r3, #16]
    13de:	2108      	movs	r1, #8
    13e0:	430a      	orrs	r2, r1
    13e2:	611a      	str	r2, [r3, #16]
	CRITICAL_SECTION_LEAVE();
#endif

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    13e4:	f241 33f1 	movw	r3, #5105	; 0x13f1
    13e8:	f2c0 0300 	movt	r3, #0
    13ec:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    13ee:	bd10      	pop	{r4, pc}

000013f0 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
    13f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f2:	46ce      	mov	lr, r9
    13f4:	4647      	mov	r7, r8
    13f6:	b580      	push	{r7, lr}
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE_Msk;
    13f8:	f246 0300 	movw	r3, #24576	; 0x6000
    13fc:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1400:	881a      	ldrh	r2, [r3, #0]
    1402:	2102      	movs	r1, #2
    1404:	438a      	bics	r2, r1
    1406:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE_Msk;
    1408:	881a      	ldrh	r2, [r3, #0]
    140a:	3102      	adds	r1, #2
    140c:	438a      	bics	r2, r1
    140e:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST_Msk;
    1410:	2240      	movs	r2, #64	; 0x40
    1412:	5c99      	ldrb	r1, [r3, r2]
    1414:	2001      	movs	r0, #1
    1416:	4301      	orrs	r1, r0
    1418:	b2c9      	uxtb	r1, r1
    141a:	5499      	strb	r1, [r3, r2]
	((Dmac *)hw)->CTRL.reg = data;
    141c:	f640 7200 	movw	r2, #3840	; 0xf00
    1420:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1422:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN_Msk;
    1424:	2101      	movs	r1, #1
    1426:	438a      	bics	r2, r1
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    1428:	4302      	orrs	r2, r0
    142a:	b2d2      	uxtb	r2, r2
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    142c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    142e:	2200      	movs	r2, #0
    1430:	615a      	str	r2, [r3, #20]
	    DMAC,
	    DMAC_PRICTRL0_LVLPRI0(CONF_DMAC_LVLPRI0) | DMAC_PRICTRL0_LVLPRI1(CONF_DMAC_LVLPRI1)
	        | DMAC_PRICTRL0_LVLPRI2(CONF_DMAC_LVLPRI2) | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	        | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos) | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	        | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos) | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1432:	f240 1260 	movw	r2, #352	; 0x160
    1436:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->BASEADDR.reg = data;
    143a:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    143c:	f240 12e0 	movw	r2, #480	; 0x1e0
    1440:	f2c2 0200 	movt	r2, #8192	; 0x2000
	((Dmac *)hw)->WRBADDR.reg = data;
    1444:	639a      	str	r2, [r3, #56]	; 0x38
    1446:	f642 2278 	movw	r2, #10872	; 0x2a78
    144a:	f2c0 0200 	movt	r2, #0
    144e:	2100      	movs	r1, #0
	((Dmac *)hw)->CHID.reg = data;
    1450:	f246 0000 	movw	r0, #24576	; 0x6000
    1454:	f2c4 1000 	movt	r0, #16640	; 0x4100
    1458:	f240 0c3f 	movw	ip, #63	; 0x3f

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    145c:	2440      	movs	r4, #64	; 0x40

	for (; i < DMAC_CH_NUM; i++) {
		hri_dmac_write_CHID_reg(DMAC, i);

		hri_dmac_write_CHCTRLA_RUNSTDBY_bit(DMAC, _cfgs[i].ctrla & DMAC_CHCTRLA_RUNSTDBY);
    145e:	2701      	movs	r7, #1
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1460:	f240 1560 	movw	r5, #352	; 0x160
    1464:	f2c2 0500 	movt	r5, #8192	; 0x2000
}

static inline void hri_dmacdescriptor_write_DESCADDR_reg(const void *const hw, hri_dmacdescriptor_descaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1468:	f240 0900 	movw	r9, #0
    146c:	b2cb      	uxtb	r3, r1
	((Dmac *)hw)->CHID.reg = data;
    146e:	4666      	mov	r6, ip
    1470:	5583      	strb	r3, [r0, r6]
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
    1472:	5d03      	ldrb	r3, [r0, r4]
    1474:	4698      	mov	r8, r3
    1476:	7813      	ldrb	r3, [r2, #0]
    1478:	099b      	lsrs	r3, r3, #6
    147a:	403b      	ands	r3, r7
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    147c:	019b      	lsls	r3, r3, #6
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY_Msk;
    147e:	4646      	mov	r6, r8
    1480:	43a6      	bics	r6, r4
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
    1482:	4333      	orrs	r3, r6
	((Dmac *)hw)->CHCTRLA.reg = tmp;
    1484:	5503      	strb	r3, [r0, r4]
	((Dmac *)hw)->CHCTRLB.reg = data;
    1486:	6853      	ldr	r3, [r2, #4]
    1488:	6443      	str	r3, [r0, #68]	; 0x44

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    148a:	8913      	ldrh	r3, [r2, #8]
    148c:	4698      	mov	r8, r3
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    148e:	010b      	lsls	r3, r1, #4
    1490:	4646      	mov	r6, r8
    1492:	535e      	strh	r6, [r3, r5]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1494:	f240 1660 	movw	r6, #352	; 0x160
    1498:	f2c2 0600 	movt	r6, #8192	; 0x2000
    149c:	46b0      	mov	r8, r6
    149e:	4443      	add	r3, r8
    14a0:	464e      	mov	r6, r9
    14a2:	60de      	str	r6, [r3, #12]
    14a4:	3101      	adds	r1, #1
    14a6:	320c      	adds	r2, #12
	for (; i < DMAC_CH_NUM; i++) {
    14a8:	2908      	cmp	r1, #8
    14aa:	d1df      	bne.n	146c <_dma_init+0x7c>
    14ac:	230b      	movs	r3, #11
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ae:	241f      	movs	r4, #31
    14b0:	2001      	movs	r0, #1
    14b2:	f24e 1100 	movw	r1, #57600	; 0xe100
    14b6:	f2ce 0100 	movt	r1, #57344	; 0xe000
		hri_dmacdescriptor_write_DESCADDR_reg(&_descriptor_section[i], 0x0);
	}

	for (i = 0; i < 5; i++) {
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    14ba:	b2da      	uxtb	r2, r3
  if ((int32_t)(IRQn) >= 0)
    14bc:	061d      	lsls	r5, r3, #24
    14be:	d50f      	bpl.n	14e0 <_dma_init+0xf0>
    14c0:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    14c2:	2b10      	cmp	r3, #16
    14c4:	d1f9      	bne.n	14ba <_dma_init+0xca>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE_Msk;
    14c6:	f246 0300 	movw	r3, #24576	; 0x6000
    14ca:	f2c4 1300 	movt	r3, #16640	; 0x4100
    14ce:	881a      	ldrh	r2, [r3, #0]
    14d0:	2102      	movs	r1, #2
    14d2:	430a      	orrs	r2, r1
    14d4:	801a      	strh	r2, [r3, #0]
	}

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);

	return ERR_NONE;
}
    14d6:	2000      	movs	r0, #0
    14d8:	bc0c      	pop	{r2, r3}
    14da:	4690      	mov	r8, r2
    14dc:	4699      	mov	r9, r3
    14de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14e0:	095d      	lsrs	r5, r3, #5
    14e2:	4022      	ands	r2, r4
    14e4:	0006      	movs	r6, r0
    14e6:	4096      	lsls	r6, r2
    14e8:	002a      	movs	r2, r5
    14ea:	3520      	adds	r5, #32
    14ec:	00ad      	lsls	r5, r5, #2
    14ee:	506e      	str	r6, [r5, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    14f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14f8:	0015      	movs	r5, r2
    14fa:	3560      	adds	r5, #96	; 0x60
    14fc:	00ad      	lsls	r5, r5, #2
    14fe:	506e      	str	r6, [r5, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1500:	0092      	lsls	r2, r2, #2
    1502:	5056      	str	r6, [r2, r1]
    1504:	e7dc      	b.n	14c0 <_dma_init+0xd0>

00001506 <_dma_set_irq_state>:

/**
 * \brief Enable/disable DMA interrupt
 */
void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
    1506:	b510      	push	{r4, lr}
	((Dmac *)hw)->CHID.reg = data;
    1508:	f246 0300 	movw	r3, #24576	; 0x6000
    150c:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1510:	243f      	movs	r4, #63	; 0x3f
    1512:	5518      	strb	r0, [r3, r4]
	hri_dmac_write_CHID_reg(DMAC, channel);

	if (DMA_TRANSFER_COMPLETE_CB == type) {
    1514:	b981      	cbnz	r1, 1538 <_dma_set_irq_state+0x32>
	if (value == 0x0) {
    1516:	b93a      	cbnz	r2, 1528 <_dma_set_irq_state+0x22>
		((Dmac *)hw)->CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL_Msk;
    1518:	f246 0300 	movw	r3, #24576	; 0x6000
    151c:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1520:	3102      	adds	r1, #2
    1522:	324c      	adds	r2, #76	; 0x4c
    1524:	5499      	strb	r1, [r3, r2]
    1526:	e009      	b.n	153c <_dma_set_irq_state+0x36>
		((Dmac *)hw)->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL_Msk;
    1528:	f246 0300 	movw	r3, #24576	; 0x6000
    152c:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1530:	2102      	movs	r1, #2
    1532:	224d      	movs	r2, #77	; 0x4d
    1534:	5499      	strb	r1, [r3, r2]
    1536:	e001      	b.n	153c <_dma_set_irq_state+0x36>
		hri_dmac_write_CHINTEN_TCMPL_bit(DMAC, state);
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1538:	2901      	cmp	r1, #1
    153a:	d000      	beq.n	153e <_dma_set_irq_state+0x38>
		hri_dmac_write_CHINTEN_TERR_bit(DMAC, state);
	}
}
    153c:	bd10      	pop	{r4, pc}
	if (value == 0x0) {
    153e:	b13a      	cbz	r2, 1550 <_dma_set_irq_state+0x4a>
		((Dmac *)hw)->CHINTENSET.reg = DMAC_CHINTENSET_TERR_Msk;
    1540:	f246 0300 	movw	r3, #24576	; 0x6000
    1544:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1548:	2101      	movs	r1, #1
    154a:	224d      	movs	r2, #77	; 0x4d
    154c:	5499      	strb	r1, [r3, r2]
    154e:	e7f5      	b.n	153c <_dma_set_irq_state+0x36>
		((Dmac *)hw)->CHINTENCLR.reg = DMAC_CHINTENSET_TERR_Msk;
    1550:	f246 0300 	movw	r3, #24576	; 0x6000
    1554:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1558:	324c      	adds	r2, #76	; 0x4c
    155a:	5499      	strb	r1, [r3, r2]
    155c:	e7ee      	b.n	153c <_dma_set_irq_state+0x36>

0000155e <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    155e:	0100      	lsls	r0, r0, #4
    1560:	f240 1360 	movw	r3, #352	; 0x160
    1564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1568:	469c      	mov	ip, r3
    156a:	4460      	add	r0, ip
    156c:	6081      	str	r1, [r0, #8]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], (uint32_t)dst);

	return ERR_NONE;
}
    156e:	2000      	movs	r0, #0
    1570:	4770      	bx	lr

00001572 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1572:	0100      	lsls	r0, r0, #4
    1574:	f240 1360 	movw	r3, #352	; 0x160
    1578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    157c:	469c      	mov	ip, r3
    157e:	4460      	add	r0, ip
    1580:	6041      	str	r1, [r0, #4]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], (uint32_t)src);

	return ERR_NONE;
}
    1582:	2000      	movs	r0, #0
    1584:	4770      	bx	lr

00001586 <_dma_set_next_descriptor>:

int32_t _dma_set_next_descriptor(const uint8_t current_channel, const uint8_t next_channel)
{
	hri_dmacdescriptor_write_DESCADDR_reg(&_descriptor_section[current_channel],
	                                      (uint32_t)&_descriptor_section[next_channel]);
    1586:	0109      	lsls	r1, r1, #4
    1588:	f240 1360 	movw	r3, #352	; 0x160
    158c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1590:	469c      	mov	ip, r3
    1592:	4461      	add	r1, ip
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1594:	0100      	lsls	r0, r0, #4
    1596:	4460      	add	r0, ip
    1598:	60c1      	str	r1, [r0, #12]

	return ERR_NONE;
}
    159a:	2000      	movs	r0, #0
    159c:	4770      	bx	lr

0000159e <_dma_set_data_amount>:

	return ERR_NONE;
}

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
    159e:	b530      	push	{r4, r5, lr}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    15a0:	f240 1260 	movw	r2, #352	; 0x160
    15a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    15a8:	0104      	lsls	r4, r0, #4
    15aa:	18a3      	adds	r3, r4, r2
    15ac:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15ae:	5aa3      	ldrh	r3, [r4, r2]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    15b0:	059b      	lsls	r3, r3, #22
	uint32_t address   = hri_dmacdescriptor_read_DSTADDR_reg(&_descriptor_section[channel]);
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    15b2:	0f9b      	lsrs	r3, r3, #30
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15b4:	5aa2      	ldrh	r2, [r4, r2]

	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    15b6:	0512      	lsls	r2, r2, #20
    15b8:	d50a      	bpl.n	15d0 <_dma_set_data_amount+0x32>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    15ba:	000c      	movs	r4, r1
    15bc:	409c      	lsls	r4, r3
    15be:	1964      	adds	r4, r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    15c0:	0102      	lsls	r2, r0, #4
    15c2:	f240 1560 	movw	r5, #352	; 0x160
    15c6:	f2c2 0500 	movt	r5, #8192	; 0x2000
    15ca:	46ac      	mov	ip, r5
    15cc:	4462      	add	r2, ip
    15ce:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    15d0:	f240 1260 	movw	r2, #352	; 0x160
    15d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    15d8:	0104      	lsls	r4, r0, #4
    15da:	18a5      	adds	r5, r4, r2
    15dc:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15de:	5aa4      	ldrh	r4, [r4, r2]
	}

	address = hri_dmacdescriptor_read_SRCADDR_reg(&_descriptor_section[channel]);

	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    15e0:	0562      	lsls	r2, r4, #21
    15e2:	d50a      	bpl.n	15fa <_dma_set_data_amount+0x5c>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    15e4:	000a      	movs	r2, r1
    15e6:	409a      	lsls	r2, r3
    15e8:	1952      	adds	r2, r2, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    15ea:	0103      	lsls	r3, r0, #4
    15ec:	f240 1460 	movw	r4, #352	; 0x160
    15f0:	f2c2 0400 	movt	r4, #8192	; 0x2000
    15f4:	46a4      	mov	ip, r4
    15f6:	4463      	add	r3, ip
    15f8:	605a      	str	r2, [r3, #4]
	}

	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    15fa:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    15fc:	0100      	lsls	r0, r0, #4
    15fe:	f240 1360 	movw	r3, #352	; 0x160
    1602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1606:	469c      	mov	ip, r3
    1608:	4460      	add	r0, ip
    160a:	8041      	strh	r1, [r0, #2]

	return ERR_NONE;
}
    160c:	2000      	movs	r0, #0
    160e:	bd30      	pop	{r4, r5, pc}

00001610 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
    1610:	b570      	push	{r4, r5, r6, lr}
	((Dmac *)hw)->CHID.reg = data;
    1612:	f246 0300 	movw	r3, #24576	; 0x6000
    1616:	f2c4 1300 	movt	r3, #16640	; 0x4100
    161a:	223f      	movs	r2, #63	; 0x3f
    161c:	5498      	strb	r0, [r3, r2]
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID_Msk;
    161e:	f240 1260 	movw	r2, #352	; 0x160
    1622:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1626:	0105      	lsls	r5, r0, #4
    1628:	5aac      	ldrh	r4, [r5, r2]
    162a:	2601      	movs	r6, #1
    162c:	4334      	orrs	r4, r6
    162e:	52ac      	strh	r4, [r5, r2]
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE_Msk;
    1630:	2440      	movs	r4, #64	; 0x40
    1632:	5d1a      	ldrb	r2, [r3, r4]
    1634:	2502      	movs	r5, #2
    1636:	432a      	orrs	r2, r5
    1638:	551a      	strb	r2, [r3, r4]
	hri_dmac_write_CHID_reg(DMAC, channel);
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(&_descriptor_section[channel]);
	hri_dmac_set_CHCTRLA_ENABLE_bit(DMAC);
	if (software_trigger) {
    163a:	b141      	cbz	r1, 164e <_dma_enable_transaction+0x3e>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    163c:	f246 0200 	movw	r2, #24576	; 0x6000
    1640:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1644:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1646:	2301      	movs	r3, #1
    1648:	4083      	lsls	r3, r0
    164a:	430b      	orrs	r3, r1
    164c:	6113      	str	r3, [r2, #16]
	}

	return ERR_NONE;
}
    164e:	2000      	movs	r0, #0
    1650:	bd70      	pop	{r4, r5, r6, pc}

00001652 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
    1652:	000b      	movs	r3, r1
	*resource = &_resources[channel];
    1654:	0049      	lsls	r1, r1, #1
    1656:	18c9      	adds	r1, r1, r3
    1658:	0089      	lsls	r1, r1, #2
    165a:	f240 034c 	movw	r3, #76	; 0x4c
    165e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1662:	469c      	mov	ip, r3
    1664:	4461      	add	r1, ip
    1666:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr

0000166c <DMAC_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    166c:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    166e:	f246 0200 	movw	r2, #24576	; 0x6000
    1672:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1676:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1678:	2307      	movs	r3, #7
    167a:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    167c:	243f      	movs	r4, #63	; 0x3f
    167e:	5d15      	ldrb	r5, [r2, r4]
    1680:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    1682:	0058      	lsls	r0, r3, #1
    1684:	18c0      	adds	r0, r0, r3
    1686:	0080      	lsls	r0, r0, #2
    1688:	f240 014c 	movw	r1, #76	; 0x4c
    168c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1690:	468c      	mov	ip, r1
    1692:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1694:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1696:	214e      	movs	r1, #78	; 0x4e
    1698:	5c51      	ldrb	r1, [r2, r1]
    169a:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    169c:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    169e:	07ca      	lsls	r2, r1, #31
    16a0:	d402      	bmi.n	16a8 <DMAC_0_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    16a2:	078a      	lsls	r2, r1, #30
    16a4:	d40a      	bmi.n	16bc <DMAC_0_Handler+0x50>
	_dmac_handler();
}
    16a6:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    16a8:	f246 0200 	movw	r2, #24576	; 0x6000
    16ac:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16b0:	3c3e      	subs	r4, #62	; 0x3e
    16b2:	214e      	movs	r1, #78	; 0x4e
    16b4:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    16b6:	6843      	ldr	r3, [r0, #4]
    16b8:	4798      	blx	r3
    16ba:	e7f4      	b.n	16a6 <DMAC_0_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    16bc:	f246 0200 	movw	r2, #24576	; 0x6000
    16c0:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16c4:	2402      	movs	r4, #2
    16c6:	214e      	movs	r1, #78	; 0x4e
    16c8:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    16ca:	f240 014c 	movw	r1, #76	; 0x4c
    16ce:	f2c2 0100 	movt	r1, #8192	; 0x2000
    16d2:	005a      	lsls	r2, r3, #1
    16d4:	18d3      	adds	r3, r2, r3
    16d6:	009b      	lsls	r3, r3, #2
    16d8:	585b      	ldr	r3, [r3, r1]
    16da:	4798      	blx	r3
}
    16dc:	e7e3      	b.n	16a6 <DMAC_0_Handler+0x3a>

000016de <DMAC_1_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    16de:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    16e0:	f246 0200 	movw	r2, #24576	; 0x6000
    16e4:	f2c4 1200 	movt	r2, #16640	; 0x4100
    16e8:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    16ea:	2307      	movs	r3, #7
    16ec:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    16ee:	243f      	movs	r4, #63	; 0x3f
    16f0:	5d15      	ldrb	r5, [r2, r4]
    16f2:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    16f4:	0058      	lsls	r0, r3, #1
    16f6:	18c0      	adds	r0, r0, r3
    16f8:	0080      	lsls	r0, r0, #2
    16fa:	f240 014c 	movw	r1, #76	; 0x4c
    16fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1702:	468c      	mov	ip, r1
    1704:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1706:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    1708:	214e      	movs	r1, #78	; 0x4e
    170a:	5c51      	ldrb	r1, [r2, r1]
    170c:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    170e:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1710:	07ca      	lsls	r2, r1, #31
    1712:	d402      	bmi.n	171a <DMAC_1_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    1714:	078a      	lsls	r2, r1, #30
    1716:	d40a      	bmi.n	172e <DMAC_1_Handler+0x50>
	_dmac_handler();
}
    1718:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    171a:	f246 0200 	movw	r2, #24576	; 0x6000
    171e:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1722:	3c3e      	subs	r4, #62	; 0x3e
    1724:	214e      	movs	r1, #78	; 0x4e
    1726:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    1728:	6843      	ldr	r3, [r0, #4]
    172a:	4798      	blx	r3
    172c:	e7f4      	b.n	1718 <DMAC_1_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    172e:	f246 0200 	movw	r2, #24576	; 0x6000
    1732:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1736:	2402      	movs	r4, #2
    1738:	214e      	movs	r1, #78	; 0x4e
    173a:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    173c:	f240 014c 	movw	r1, #76	; 0x4c
    1740:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1744:	005a      	lsls	r2, r3, #1
    1746:	18d3      	adds	r3, r2, r3
    1748:	009b      	lsls	r3, r3, #2
    174a:	585b      	ldr	r3, [r3, r1]
    174c:	4798      	blx	r3
}
    174e:	e7e3      	b.n	1718 <DMAC_1_Handler+0x3a>

00001750 <DMAC_2_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1750:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1752:	f246 0200 	movw	r2, #24576	; 0x6000
    1756:	f2c4 1200 	movt	r2, #16640	; 0x4100
    175a:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    175c:	2307      	movs	r3, #7
    175e:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1760:	243f      	movs	r4, #63	; 0x3f
    1762:	5d15      	ldrb	r5, [r2, r4]
    1764:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    1766:	0058      	lsls	r0, r3, #1
    1768:	18c0      	adds	r0, r0, r3
    176a:	0080      	lsls	r0, r0, #2
    176c:	f240 014c 	movw	r1, #76	; 0x4c
    1770:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1774:	468c      	mov	ip, r1
    1776:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    1778:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    177a:	214e      	movs	r1, #78	; 0x4e
    177c:	5c51      	ldrb	r1, [r2, r1]
    177e:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1780:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1782:	07ca      	lsls	r2, r1, #31
    1784:	d402      	bmi.n	178c <DMAC_2_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    1786:	078a      	lsls	r2, r1, #30
    1788:	d40a      	bmi.n	17a0 <DMAC_2_Handler+0x50>
	_dmac_handler();
}
    178a:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    178c:	f246 0200 	movw	r2, #24576	; 0x6000
    1790:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1794:	3c3e      	subs	r4, #62	; 0x3e
    1796:	214e      	movs	r1, #78	; 0x4e
    1798:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    179a:	6843      	ldr	r3, [r0, #4]
    179c:	4798      	blx	r3
    179e:	e7f4      	b.n	178a <DMAC_2_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    17a0:	f246 0200 	movw	r2, #24576	; 0x6000
    17a4:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17a8:	2402      	movs	r4, #2
    17aa:	214e      	movs	r1, #78	; 0x4e
    17ac:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    17ae:	f240 014c 	movw	r1, #76	; 0x4c
    17b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17b6:	005a      	lsls	r2, r3, #1
    17b8:	18d3      	adds	r3, r2, r3
    17ba:	009b      	lsls	r3, r3, #2
    17bc:	585b      	ldr	r3, [r3, r1]
    17be:	4798      	blx	r3
}
    17c0:	e7e3      	b.n	178a <DMAC_2_Handler+0x3a>

000017c2 <DMAC_3_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    17c2:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17c4:	f246 0200 	movw	r2, #24576	; 0x6000
    17c8:	f2c4 1200 	movt	r2, #16640	; 0x4100
    17cc:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    17ce:	2307      	movs	r3, #7
    17d0:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    17d2:	243f      	movs	r4, #63	; 0x3f
    17d4:	5d15      	ldrb	r5, [r2, r4]
    17d6:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    17d8:	0058      	lsls	r0, r3, #1
    17da:	18c0      	adds	r0, r0, r3
    17dc:	0080      	lsls	r0, r0, #2
    17de:	f240 014c 	movw	r1, #76	; 0x4c
    17e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    17e6:	468c      	mov	ip, r1
    17e8:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    17ea:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    17ec:	214e      	movs	r1, #78	; 0x4e
    17ee:	5c51      	ldrb	r1, [r2, r1]
    17f0:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    17f2:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    17f4:	07ca      	lsls	r2, r1, #31
    17f6:	d402      	bmi.n	17fe <DMAC_3_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    17f8:	078a      	lsls	r2, r1, #30
    17fa:	d40a      	bmi.n	1812 <DMAC_3_Handler+0x50>
	_dmac_handler();
}
    17fc:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    17fe:	f246 0200 	movw	r2, #24576	; 0x6000
    1802:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1806:	3c3e      	subs	r4, #62	; 0x3e
    1808:	214e      	movs	r1, #78	; 0x4e
    180a:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    180c:	6843      	ldr	r3, [r0, #4]
    180e:	4798      	blx	r3
    1810:	e7f4      	b.n	17fc <DMAC_3_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1812:	f246 0200 	movw	r2, #24576	; 0x6000
    1816:	f2c4 1200 	movt	r2, #16640	; 0x4100
    181a:	2402      	movs	r4, #2
    181c:	214e      	movs	r1, #78	; 0x4e
    181e:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1820:	f240 014c 	movw	r1, #76	; 0x4c
    1824:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1828:	005a      	lsls	r2, r3, #1
    182a:	18d3      	adds	r3, r2, r3
    182c:	009b      	lsls	r3, r3, #2
    182e:	585b      	ldr	r3, [r3, r1]
    1830:	4798      	blx	r3
}
    1832:	e7e3      	b.n	17fc <DMAC_3_Handler+0x3a>

00001834 <DMAC_OTHER_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_OTHER_Handler(void)
{
    1834:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1836:	f246 0200 	movw	r2, #24576	; 0x6000
    183a:	f2c4 1200 	movt	r2, #16640	; 0x4100
    183e:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
    1840:	2307      	movs	r3, #7
    1842:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
    1844:	243f      	movs	r4, #63	; 0x3f
    1846:	5d15      	ldrb	r5, [r2, r4]
    1848:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
    184a:	0058      	lsls	r0, r3, #1
    184c:	18c0      	adds	r0, r0, r3
    184e:	0080      	lsls	r0, r0, #2
    1850:	f240 014c 	movw	r1, #76	; 0x4c
    1854:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1858:	468c      	mov	ip, r1
    185a:	4460      	add	r0, ip
	((Dmac *)hw)->CHID.reg = data;
    185c:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
    185e:	214e      	movs	r1, #78	; 0x4e
    1860:	5c51      	ldrb	r1, [r2, r1]
    1862:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
    1864:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
    1866:	07ca      	lsls	r2, r1, #31
    1868:	d402      	bmi.n	1870 <DMAC_OTHER_Handler+0x3c>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
    186a:	078a      	lsls	r2, r1, #30
    186c:	d40a      	bmi.n	1884 <DMAC_OTHER_Handler+0x50>
	_dmac_handler();
}
    186e:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR_Msk;
    1870:	f246 0200 	movw	r2, #24576	; 0x6000
    1874:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1878:	3c3e      	subs	r4, #62	; 0x3e
    187a:	214e      	movs	r1, #78	; 0x4e
    187c:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.error(tmp_resource);
    187e:	6843      	ldr	r3, [r0, #4]
    1880:	4798      	blx	r3
    1882:	e7f4      	b.n	186e <DMAC_OTHER_Handler+0x3a>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL_Msk;
    1884:	f246 0200 	movw	r2, #24576	; 0x6000
    1888:	f2c4 1200 	movt	r2, #16640	; 0x4100
    188c:	2402      	movs	r4, #2
    188e:	214e      	movs	r1, #78	; 0x4e
    1890:	5454      	strb	r4, [r2, r1]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1892:	f240 014c 	movw	r1, #76	; 0x4c
    1896:	f2c2 0100 	movt	r1, #8192	; 0x2000
    189a:	005a      	lsls	r2, r3, #1
    189c:	18d3      	adds	r3, r2, r3
    189e:	009b      	lsls	r3, r3, #2
    18a0:	585b      	ldr	r3, [r3, r1]
    18a2:	4798      	blx	r3
}
    18a4:	e7e3      	b.n	186e <DMAC_OTHER_Handler+0x3a>

000018a6 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    18a6:	f642 2300 	movw	r3, #10752	; 0x2a00
    18aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18ae:	685b      	ldr	r3, [r3, #4]
	 | (CONF_EIC_FILTEN4 << EIC_CONFIG_FILTEN4_Pos) | EIC_CONFIG_SENSE4(CONF_EIC_SENSE4)                               \
	 | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)                               \
	 | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)                               \
	 | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7) | 0)

	if (!hri_eic_is_syncing(EIC_SEC, EIC_SYNCBUSY_SWRST)) {
    18b0:	07db      	lsls	r3, r3, #31
    18b2:	d434      	bmi.n	191e <_ext_irq_init+0x78>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18b4:	f642 2200 	movw	r2, #10752	; 0x2a00
    18b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18bc:	2103      	movs	r1, #3
    18be:	6853      	ldr	r3, [r2, #4]
    18c0:	4219      	tst	r1, r3
    18c2:	d1fc      	bne.n	18be <_ext_irq_init+0x18>
	tmp = ((Eic *)hw)->CTRLA.reg;
    18c4:	f642 2300 	movw	r3, #10752	; 0x2a00
    18c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18cc:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC_SEC, EIC_CTRLA_ENABLE)) {
    18ce:	079b      	lsls	r3, r3, #30
    18d0:	d517      	bpl.n	1902 <_ext_irq_init+0x5c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
    18d2:	f642 2300 	movw	r3, #10752	; 0x2a00
    18d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18da:	781a      	ldrb	r2, [r3, #0]
    18dc:	2102      	movs	r1, #2
    18de:	438a      	bics	r2, r1
    18e0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18e2:	f642 2200 	movw	r2, #10752	; 0x2a00
    18e6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18ea:	3101      	adds	r1, #1
    18ec:	6853      	ldr	r3, [r2, #4]
    18ee:	4219      	tst	r1, r3
    18f0:	d1fc      	bne.n	18ec <_ext_irq_init+0x46>
    18f2:	f642 2200 	movw	r2, #10752	; 0x2a00
    18f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    18fa:	2102      	movs	r1, #2
    18fc:	6853      	ldr	r3, [r2, #4]
    18fe:	4219      	tst	r1, r3
    1900:	d1fc      	bne.n	18fc <_ext_irq_init+0x56>
	((Eic *)hw)->CTRLA.reg = data;
    1902:	f642 2300 	movw	r3, #10752	; 0x2a00
    1906:	f2c4 0300 	movt	r3, #16384	; 0x4000
    190a:	2201      	movs	r2, #1
    190c:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    190e:	f642 2200 	movw	r2, #10752	; 0x2a00
    1912:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1916:	2103      	movs	r1, #3
    1918:	6853      	ldr	r3, [r2, #4]
    191a:	4219      	tst	r1, r3
    191c:	d1fc      	bne.n	1918 <_ext_irq_init+0x72>
    191e:	f642 2200 	movw	r2, #10752	; 0x2a00
    1922:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1926:	2101      	movs	r1, #1
    1928:	6853      	ldr	r3, [r2, #4]
    192a:	4219      	tst	r1, r3
    192c:	d1fc      	bne.n	1928 <_ext_irq_init+0x82>
	tmp = ((Eic *)hw)->CTRLA.reg;
    192e:	f642 2200 	movw	r2, #10752	; 0x2a00
    1932:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1936:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL_Msk;
    1938:	2110      	movs	r1, #16
    193a:	438b      	bics	r3, r1
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    193c:	430b      	orrs	r3, r1
	((Eic *)hw)->CTRLA.reg = tmp;
    193e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1940:	f642 2200 	movw	r2, #10752	; 0x2a00
    1944:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1948:	390d      	subs	r1, #13
    194a:	6853      	ldr	r3, [r2, #4]
    194c:	4219      	tst	r1, r3
    194e:	d1fc      	bne.n	194a <_ext_irq_init+0xa4>
	((Eic *)hw)->NONSEC.reg = data;
    1950:	f642 2300 	movw	r3, #10752	; 0x2a00
    1954:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1958:	2220      	movs	r2, #32
    195a:	641a      	str	r2, [r3, #64]	; 0x40
	((Eic *)hw)->DPRESCALER.reg = data;
    195c:	2200      	movs	r2, #0
    195e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->EVCTRL.reg = data;
    1960:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
    1962:	619a      	str	r2, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1964:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
    1966:	22a0      	movs	r2, #160	; 0xa0
    1968:	03d2      	lsls	r2, r2, #15
    196a:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
    196c:	781a      	ldrb	r2, [r3, #0]
    196e:	2102      	movs	r1, #2
    1970:	430a      	orrs	r2, r1
    1972:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1974:	f642 2200 	movw	r2, #10752	; 0x2a00
    1978:	f2c4 0200 	movt	r2, #16384	; 0x4000
    197c:	3101      	adds	r1, #1
    197e:	6853      	ldr	r3, [r2, #4]
    1980:	4219      	tst	r1, r3
    1982:	d1fc      	bne.n	197e <_ext_irq_init+0xd8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1984:	f24e 1300 	movw	r3, #57600	; 0xe100
    1988:	f2ce 0300 	movt	r3, #57344	; 0xe000
    198c:	2280      	movs	r2, #128	; 0x80
    198e:	509a      	str	r2, [r3, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1994:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1998:	f240 1180 	movw	r1, #384	; 0x180
    199c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    199e:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_OTHER_IRQn);
	NVIC_ClearPendingIRQ(EIC_OTHER_IRQn);
	NVIC_EnableIRQ(EIC_OTHER_IRQn);

	callback = cb;
    19a0:	f240 03ac 	movw	r3, #172	; 0xac
    19a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19a8:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    19aa:	2000      	movs	r0, #0
    19ac:	4770      	bx	lr

000019ae <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    19ae:	281b      	cmp	r0, #27
    19b0:	d002      	beq.n	19b8 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    19b2:	2001      	movs	r0, #1
    19b4:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC_SEC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC_SEC, 1ul << extint);
	}

	return ERR_NONE;
}
    19b6:	4770      	bx	lr
	if (enable) {
    19b8:	b941      	cbnz	r1, 19cc <_ext_irq_enable+0x1e>
	((Eic *)hw)->INTENCLR.reg = mask;
    19ba:	f642 2300 	movw	r3, #10752	; 0x2a00
    19be:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19c2:	2220      	movs	r2, #32
    19c4:	60da      	str	r2, [r3, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    19c6:	615a      	str	r2, [r3, #20]
	return ERR_NONE;
    19c8:	2000      	movs	r0, #0
    19ca:	e7f4      	b.n	19b6 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
    19cc:	f642 2300 	movw	r3, #10752	; 0x2a00
    19d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19d4:	2220      	movs	r2, #32
    19d6:	611a      	str	r2, [r3, #16]
    19d8:	2000      	movs	r0, #0
    19da:	e7ec      	b.n	19b6 <_ext_irq_enable+0x8>

000019dc <EIC_OTHER_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_OTHER_Handler(void)
{
    19dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19de:	46c6      	mov	lr, r8
    19e0:	b500      	push	{lr}
    19e2:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    19e4:	f642 2300 	movw	r3, #10752	; 0x2a00
    19e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19ec:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    19ee:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    19f0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    19f2:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    19f4:	f642 21e0 	movw	r1, #10976	; 0x2ae0
    19f8:	f2c0 0100 	movt	r1, #0
    19fc:	f240 03ac 	movw	r3, #172	; 0xac
    1a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a04:	6818      	ldr	r0, [r3, #0]
    1a06:	1e43      	subs	r3, r0, #1
    1a08:	4198      	sbcs	r0, r3
    1a0a:	b2c0      	uxtb	r0, r0
    1a0c:	22f2      	movs	r2, #242	; 0xf2
    1a0e:	f640 7387 	movw	r3, #3975	; 0xf87
    1a12:	f2c0 0300 	movt	r3, #0
    1a16:	4798      	blx	r3
	while (flags) {
    1a18:	9b01      	ldr	r3, [sp, #4]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d055      	beq.n	1aca <EIC_OTHER_Handler+0xee>
    1a1e:	2301      	movs	r3, #1
    1a20:	425b      	negs	r3, r3
    1a22:	4698      	mov	r8, r3
				if (_map[middle].extint == pos) {
    1a24:	f642 25d8 	movw	r5, #10968	; 0x2ad8
    1a28:	f2c0 0500 	movt	r5, #0
    1a2c:	e041      	b.n	1ab2 <EIC_OTHER_Handler+0xd6>
					upper = middle - 1;
    1a2e:	3a01      	subs	r2, #1
    1a30:	b2d1      	uxtb	r1, r2
			while (upper >= lower) {
    1a32:	428f      	cmp	r7, r1
    1a34:	d80c      	bhi.n	1a50 <EIC_OTHER_Handler+0x74>
				middle = (upper + lower) >> 1;
    1a36:	19cb      	adds	r3, r1, r7
    1a38:	105b      	asrs	r3, r3, #1
    1a3a:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    1a3c:	4003      	ands	r3, r0
    1a3e:	00db      	lsls	r3, r3, #3
    1a40:	5d5b      	ldrb	r3, [r3, r5]
    1a42:	42a3      	cmp	r3, r4
    1a44:	d008      	beq.n	1a58 <EIC_OTHER_Handler+0x7c>
				if (_map[middle].extint < pos) {
    1a46:	429c      	cmp	r4, r3
    1a48:	ddf1      	ble.n	1a2e <EIC_OTHER_Handler+0x52>
					lower = middle + 1;
    1a4a:	3201      	adds	r2, #1
    1a4c:	b2d7      	uxtb	r7, r2
    1a4e:	e7f0      	b.n	1a32 <EIC_OTHER_Handler+0x56>
			if (INVALID_PIN_NUMBER != pin) {
    1a50:	4643      	mov	r3, r8
    1a52:	3301      	adds	r3, #1
    1a54:	d009      	beq.n	1a6a <EIC_OTHER_Handler+0x8e>
    1a56:	e001      	b.n	1a5c <EIC_OTHER_Handler+0x80>
				if (_map[middle].extint == pos) {
    1a58:	f240 081b 	movw	r8, #27
				callback(pin);
    1a5c:	f240 03ac 	movw	r3, #172	; 0xac
    1a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a64:	681b      	ldr	r3, [r3, #0]
    1a66:	4640      	mov	r0, r8
    1a68:	4798      	blx	r3
			flags &= ~(1ul << pos);
    1a6a:	9b01      	ldr	r3, [sp, #4]
    1a6c:	0032      	movs	r2, r6
    1a6e:	40a2      	lsls	r2, r4
    1a70:	4393      	bics	r3, r2
    1a72:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1a74:	9801      	ldr	r0, [sp, #4]
    1a76:	f642 03a9 	movw	r3, #10409	; 0x28a9
    1a7a:	f2c0 0300 	movt	r3, #0
    1a7e:	4798      	blx	r3
    1a80:	3801      	subs	r0, #1
    1a82:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1a84:	1c63      	adds	r3, r4, #1
    1a86:	d00a      	beq.n	1a9e <EIC_OTHER_Handler+0xc2>
				if (_map[middle].extint == pos) {
    1a88:	2c05      	cmp	r4, #5
    1a8a:	d005      	beq.n	1a98 <EIC_OTHER_Handler+0xbc>
    1a8c:	2305      	movs	r3, #5
    1a8e:	2200      	movs	r2, #0
    1a90:	2700      	movs	r7, #0
    1a92:	0031      	movs	r1, r6
    1a94:	20ff      	movs	r0, #255	; 0xff
    1a96:	e7d6      	b.n	1a46 <EIC_OTHER_Handler+0x6a>
    1a98:	f240 081b 	movw	r8, #27
    1a9c:	e7de      	b.n	1a5c <EIC_OTHER_Handler+0x80>
	return ((Eic *)hw)->INTFLAG.reg;
    1a9e:	f642 2300 	movw	r3, #10752	; 0x2a00
    1aa2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1aa6:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC_SEC);
    1aa8:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC_SEC, flags);
    1aaa:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1aac:	615a      	str	r2, [r3, #20]
	while (flags) {
    1aae:	9b01      	ldr	r3, [sp, #4]
    1ab0:	b15b      	cbz	r3, 1aca <EIC_OTHER_Handler+0xee>
		pos = ffs(flags) - 1;
    1ab2:	9801      	ldr	r0, [sp, #4]
    1ab4:	f642 03a9 	movw	r3, #10409	; 0x28a9
    1ab8:	f2c0 0300 	movt	r3, #0
    1abc:	4798      	blx	r3
    1abe:	3801      	subs	r0, #1
    1ac0:	b244      	sxtb	r4, r0
				if (_map[middle].extint == pos) {
    1ac2:	2601      	movs	r6, #1
		while (-1 != pos) {
    1ac4:	1c63      	adds	r3, r4, #1
    1ac6:	d1df      	bne.n	1a88 <EIC_OTHER_Handler+0xac>
    1ac8:	e7e9      	b.n	1a9e <EIC_OTHER_Handler+0xc2>
	_ext_irq_handler();
}
    1aca:	b002      	add	sp, #8
    1acc:	bc04      	pop	{r2}
    1ace:	4690      	mov	r8, r2
    1ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ad2 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1ad2:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_evsys_write_NONSECUSER_reg(const void *const hw, uint8_t index, hri_evsys_nonsecuser_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->NONSECUSER[index].reg = data;
    1ad4:	f240 2300 	movw	r3, #512	; 0x200
    1ad8:	f2c4 2300 	movt	r3, #16896	; 0x4200
    1adc:	2200      	movs	r2, #0
    1ade:	f240 11e0 	movw	r1, #480	; 0x1e0
    1ae2:	505a      	str	r2, [r3, r1]
	((Evsys *)hw)->NONSECCHAN.reg = data;
    1ae4:	3908      	subs	r1, #8
    1ae6:	505a      	str	r2, [r3, r1]
    1ae8:	2301      	movs	r3, #1
	hri_evsys_write_NONSECCHAN_reg(EVSYS_SEC, CHANNEL_NONSECCHAN_CONF_VALUE);
#endif

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1aea:	f642 21f8 	movw	r1, #11000	; 0x2af8
    1aee:	f2c0 0100 	movt	r1, #0
    1af2:	e008      	b.n	1b06 <_event_system_init+0x34>
	((Evsys *)hw)->USER[index].reg = data;
    1af4:	f240 3020 	movw	r0, #800	; 0x320
    1af8:	f2c4 2000 	movt	r0, #16896	; 0x4200
    1afc:	1818      	adds	r0, r3, r0
    1afe:	7002      	strb	r2, [r0, #0]
    1b00:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_USERS; i++) {
    1b02:	2b17      	cmp	r3, #23
    1b04:	d003      	beq.n	1b0e <_event_system_init+0x3c>
		if (user_mux_confs[i] != 0) { /* When user has channel output selected */
    1b06:	5c5a      	ldrb	r2, [r3, r1]
    1b08:	2a00      	cmp	r2, #0
    1b0a:	d1f3      	bne.n	1af4 <_event_system_init+0x22>
    1b0c:	e7f8      	b.n	1b00 <_event_system_init+0x2e>
    1b0e:	3b16      	subs	r3, #22

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1b10:	f240 2200 	movw	r2, #512	; 0x200
    1b14:	f2c4 2200 	movt	r2, #16896	; 0x4200
    1b18:	f24c 260c 	movw	r6, #49676	; 0xc20c
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1b1c:	2525      	movs	r5, #37	; 0x25
    1b1e:	2400      	movs	r4, #0
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1b20:	2024      	movs	r0, #36	; 0x24
    1b22:	21ff      	movs	r1, #255	; 0xff
    1b24:	e004      	b.n	1b30 <_event_system_init+0x5e>
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1b26:	6216      	str	r6, [r2, #32]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1b28:	5554      	strb	r4, [r2, r5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1b2a:	5411      	strb	r1, [r2, r0]
    1b2c:	3301      	adds	r3, #1
    1b2e:	b2db      	uxtb	r3, r3
		}
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		if (EVENT_CHANNEL_SETTING_ENABLED & (1u << i)) {
    1b30:	2b01      	cmp	r3, #1
    1b32:	d0f8      	beq.n	1b26 <_event_system_init+0x54>
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1b34:	2b07      	cmp	r3, #7
    1b36:	d9f9      	bls.n	1b2c <_event_system_init+0x5a>
			hri_evsys_write_CHINTEN_reg(EVSYS_SEC, i, interrupt_cfg[i]);
		}
	}

	return ERR_NONE;
}
    1b38:	2000      	movs	r0, #0
    1b3a:	bd70      	pop	{r4, r5, r6, pc}

00001b3c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b3c:	07c3      	lsls	r3, r0, #31
    1b3e:	d510      	bpl.n	1b62 <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b40:	f641 4300 	movw	r3, #7168	; 0x1c00
    1b44:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b48:	f242 1205 	movw	r2, #8453	; 0x2105
    1b4c:	f2c0 0201 	movt	r2, #1
    1b50:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b52:	f641 4200 	movw	r2, #7168	; 0x1c00
    1b56:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b5a:	217d      	movs	r1, #125	; 0x7d
    1b5c:	6853      	ldr	r3, [r2, #4]
    1b5e:	4219      	tst	r1, r3
    1b60:	d1fc      	bne.n	1b5c <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1b62:	0783      	lsls	r3, r0, #30
    1b64:	d510      	bpl.n	1b88 <_gclk_init_generators_by_fref+0x4c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b66:	f641 4300 	movw	r3, #7168	; 0x1c00
    1b6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b6e:	f242 1203 	movw	r2, #8451	; 0x2103
    1b72:	f2c0 0201 	movt	r2, #1
    1b76:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b78:	f641 4200 	movw	r2, #7168	; 0x1c00
    1b7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1b80:	217d      	movs	r1, #125	; 0x7d
    1b82:	6853      	ldr	r3, [r2, #4]
    1b84:	4219      	tst	r1, r3
    1b86:	d1fc      	bne.n	1b82 <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    1b88:	4770      	bx	lr

00001b8a <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1b8a:	f640 0300 	movw	r3, #2048	; 0x800
    1b8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1b92:	2201      	movs	r2, #1
    1b94:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1b96:	4770      	bx	lr

00001b98 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1b98:	f241 4300 	movw	r3, #5120	; 0x1400
    1b9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1ba0:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1ba2:	f641 7100 	movw	r1, #7936	; 0x1f00
    1ba6:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ba8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1baa:	2201      	movs	r2, #1
    1bac:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1bae:	4770      	bx	lr

00001bb0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1bb0:	f241 0300 	movw	r3, #4096	; 0x1000
    1bb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bb8:	2242      	movs	r2, #66	; 0x42
    1bba:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    1bbc:	f241 0200 	movw	r2, #4096	; 0x1000
    1bc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1bc4:	2110      	movs	r1, #16
    1bc6:	6913      	ldr	r3, [r2, #16]
    1bc8:	4219      	tst	r1, r3
    1bca:	d0fc      	beq.n	1bc6 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
    1bcc:	f241 0300 	movw	r3, #4096	; 0x1000
    1bd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bd4:	7e1a      	ldrb	r2, [r3, #24]
    1bd6:	2180      	movs	r1, #128	; 0x80
    1bd8:	430a      	orrs	r2, r1
    1bda:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1bdc:	4770      	bx	lr

00001bde <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1bde:	4770      	bx	lr

00001be0 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1be0:	f240 4300 	movw	r3, #1024	; 0x400
    1be4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1be8:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1bea:	2203      	movs	r2, #3
    1bec:	4013      	ands	r3, r2
    1bee:	4298      	cmp	r0, r3
    1bf0:	d012      	beq.n	1c18 <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
    1bf2:	f240 4200 	movw	r2, #1024	; 0x400
    1bf6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1bfa:	23ff      	movs	r3, #255	; 0xff
    1bfc:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1bfe:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1c00:	2103      	movs	r1, #3
    1c02:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    1c04:	4008      	ands	r0, r1
    1c06:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    1c08:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1c0a:	f240 4200 	movw	r2, #1024	; 0x400
    1c0e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c12:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1c14:	2b00      	cmp	r3, #0
    1c16:	d0fc      	beq.n	1c12 <_set_performance_level+0x32>
			;
	}
}
    1c18:	4770      	bx	lr

00001c1a <RTC_init>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c1a:	f242 4200 	movw	r2, #9216	; 0x2400
    1c1e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c22:	2101      	movs	r1, #1
    1c24:	6913      	ldr	r3, [r2, #16]
    1c26:	4219      	tst	r1, r3
    1c28:	d1fc      	bne.n	1c24 <RTC_init+0xa>
    1c2a:	f242 4200 	movw	r2, #9216	; 0x2400
    1c2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c32:	f248 0103 	movw	r1, #32771	; 0x8003
    1c36:	6913      	ldr	r3, [r2, #16]
    1c38:	4219      	tst	r1, r3
    1c3a:	d1fc      	bne.n	1c36 <RTC_init+0x1c>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1c3c:	f242 4300 	movw	r3, #9216	; 0x2400
    1c40:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c44:	881b      	ldrh	r3, [r3, #0]
 */
int8_t RTC_init()
{

	hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_SWRST);
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(RTC)) {
    1c46:	079b      	lsls	r3, r3, #30
    1c48:	d518      	bpl.n	1c7c <RTC_init+0x62>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1c4a:	f242 4300 	movw	r3, #9216	; 0x2400
    1c4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c52:	881a      	ldrh	r2, [r3, #0]
    1c54:	2102      	movs	r1, #2
    1c56:	438a      	bics	r2, r1
    1c58:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c5a:	f242 4200 	movw	r2, #9216	; 0x2400
    1c5e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c62:	f248 0103 	movw	r1, #32771	; 0x8003
    1c66:	6913      	ldr	r3, [r2, #16]
    1c68:	4219      	tst	r1, r3
    1c6a:	d1fc      	bne.n	1c66 <RTC_init+0x4c>
    1c6c:	f242 4200 	movw	r2, #9216	; 0x2400
    1c70:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c74:	2102      	movs	r1, #2
    1c76:	6913      	ldr	r3, [r2, #16]
    1c78:	4219      	tst	r1, r3
    1c7a:	d1fc      	bne.n	1c76 <RTC_init+0x5c>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    1c7c:	f242 4300 	movw	r3, #9216	; 0x2400
    1c80:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c84:	881a      	ldrh	r2, [r3, #0]
    1c86:	2101      	movs	r1, #1
    1c88:	430a      	orrs	r2, r1
    1c8a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1c8c:	f242 4200 	movw	r2, #9216	; 0x2400
    1c90:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1c94:	6913      	ldr	r3, [r2, #16]
    1c96:	4219      	tst	r1, r3
    1c98:	d1fc      	bne.n	1c94 <RTC_init+0x7a>
    1c9a:	f242 4200 	movw	r2, #9216	; 0x2400
    1c9e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1ca2:	2101      	movs	r1, #1
    1ca4:	6913      	ldr	r3, [r2, #16]
    1ca6:	4219      	tst	r1, r3
    1ca8:	d1fc      	bne.n	1ca4 <RTC_init+0x8a>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1caa:	f242 4300 	movw	r3, #9216	; 0x2400
    1cae:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1cb2:	2280      	movs	r2, #128	; 0x80
    1cb4:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1cb6:	f242 4200 	movw	r2, #9216	; 0x2400
    1cba:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1cbe:	f248 0103 	movw	r1, #32771	; 0x8003
    1cc2:	6913      	ldr	r3, [r2, #16]
    1cc4:	4219      	tst	r1, r3
    1cc6:	d1fc      	bne.n	1cc2 <RTC_init+0xa8>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1cc8:	f242 4300 	movw	r3, #9216	; 0x2400
    1ccc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1cd0:	f240 1200 	movw	r2, #256	; 0x100
    1cd4:	605a      	str	r2, [r3, #4]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1cd6:	f640 42cc 	movw	r2, #3276	; 0xccc
    1cda:	621a      	str	r2, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1cdc:	f242 4200 	movw	r2, #9216	; 0x2400
    1ce0:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1ce4:	2120      	movs	r1, #32
    1ce6:	6913      	ldr	r3, [r2, #16]
    1ce8:	4219      	tst	r1, r3
    1cea:	d1fc      	bne.n	1ce6 <RTC_init+0xcc>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1cec:	f242 4200 	movw	r2, #9216	; 0x2400
    1cf0:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1cf4:	8813      	ldrh	r3, [r2, #0]
	tmp &= ~RTC_MODE0_CTRLA_ENABLE;
    1cf6:	2102      	movs	r1, #2
    1cf8:	438b      	bics	r3, r1
	tmp |= value << RTC_MODE0_CTRLA_ENABLE_Pos;
    1cfa:	430b      	orrs	r3, r1
	((Rtc *)hw)->MODE0.CTRLA.reg = tmp;
    1cfc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1cfe:	f242 4200 	movw	r2, #9216	; 0x2400
    1d02:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d06:	f248 0103 	movw	r1, #32771	; 0x8003
    1d0a:	6913      	ldr	r3, [r2, #16]
    1d0c:	4219      	tst	r1, r3
    1d0e:	d1fc      	bne.n	1d0a <RTC_init+0xf0>
	//		 | 0 << RTC_TAMPID_TAMPID3_Pos); /* Active Layer Internal Select n: disabled */

	hri_rtcmode0_write_CTRLA_ENABLE_bit(RTC, 1 << RTC_MODE0_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1d10:	2000      	movs	r0, #0
    1d12:	4770      	bx	lr

00001d14 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d14:	b530      	push	{r4, r5, lr}
    1d16:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d18:	aa01      	add	r2, sp, #4
    1d1a:	f642 3310 	movw	r3, #11024	; 0x2b10
    1d1e:	f2c0 0300 	movt	r3, #0
    1d22:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d24:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d26:	0003      	movs	r3, r0
    1d28:	9a01      	ldr	r2, [sp, #4]
    1d2a:	4282      	cmp	r2, r0
    1d2c:	d00c      	beq.n	1d48 <_sercom_get_hardware_index+0x34>
    1d2e:	9a02      	ldr	r2, [sp, #8]
    1d30:	4282      	cmp	r2, r0
    1d32:	d007      	beq.n	1d44 <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
    1d34:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d36:	9a03      	ldr	r2, [sp, #12]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d001      	beq.n	1d40 <_sercom_get_hardware_index+0x2c>
}
    1d3c:	b005      	add	sp, #20
    1d3e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d40:	3002      	adds	r0, #2
    1d42:	e002      	b.n	1d4a <_sercom_get_hardware_index+0x36>
    1d44:	2001      	movs	r0, #1
    1d46:	e000      	b.n	1d4a <_sercom_get_hardware_index+0x36>
    1d48:	2000      	movs	r0, #0
			return i;
    1d4a:	b2c0      	uxtb	r0, r0
    1d4c:	e7f6      	b.n	1d3c <_sercom_get_hardware_index+0x28>

00001d4e <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1d4e:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1d50:	07db      	lsls	r3, r3, #31
    1d52:	d409      	bmi.n	1d68 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1d54:	6803      	ldr	r3, [r0, #0]
    1d56:	2202      	movs	r2, #2
    1d58:	4313      	orrs	r3, r2
    1d5a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d5c:	3201      	adds	r2, #1
    1d5e:	69c3      	ldr	r3, [r0, #28]
    1d60:	421a      	tst	r2, r3
    1d62:	d1fc      	bne.n	1d5e <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1d64:	2000      	movs	r0, #0
}
    1d66:	4770      	bx	lr
		return ERR_BUSY;
    1d68:	2004      	movs	r0, #4
    1d6a:	4240      	negs	r0, r0
    1d6c:	e7fb      	b.n	1d66 <_spi_sync_enable+0x18>
	...

00001d70 <_usart_init>:
{
    1d70:	b510      	push	{r4, lr}
    1d72:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1d74:	f641 5315 	movw	r3, #7445	; 0x1d15
    1d78:	f2c0 0300 	movt	r3, #0
    1d7c:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1d7e:	2801      	cmp	r0, #1
    1d80:	d00b      	beq.n	1d9a <_usart_init+0x2a>
	ASSERT(false);
    1d82:	f642 3134 	movw	r1, #11060	; 0x2b34
    1d86:	f2c0 0100 	movt	r1, #0
    1d8a:	f240 2247 	movw	r2, #583	; 0x247
    1d8e:	2000      	movs	r0, #0
    1d90:	f640 7387 	movw	r3, #3975	; 0xf87
    1d94:	f2c0 0300 	movt	r3, #0
    1d98:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1d9a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1d9c:	07db      	lsls	r3, r3, #31
    1d9e:	d418      	bmi.n	1dd2 <_usart_init+0x62>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1da0:	2203      	movs	r2, #3
    1da2:	69e3      	ldr	r3, [r4, #28]
    1da4:	421a      	tst	r2, r3
    1da6:	d1fc      	bne.n	1da2 <_usart_init+0x32>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1da8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1daa:	079b      	lsls	r3, r3, #30
    1dac:	d50b      	bpl.n	1dc6 <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1dae:	6823      	ldr	r3, [r4, #0]
    1db0:	2202      	movs	r2, #2
    1db2:	4393      	bics	r3, r2
    1db4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1db6:	3201      	adds	r2, #1
    1db8:	69e3      	ldr	r3, [r4, #28]
    1dba:	421a      	tst	r2, r3
    1dbc:	d1fc      	bne.n	1db8 <_usart_init+0x48>
    1dbe:	2202      	movs	r2, #2
    1dc0:	69e3      	ldr	r3, [r4, #28]
    1dc2:	421a      	tst	r2, r3
    1dc4:	d1fc      	bne.n	1dc0 <_usart_init+0x50>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1dc6:	2305      	movs	r3, #5
    1dc8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dca:	2203      	movs	r2, #3
    1dcc:	69e3      	ldr	r3, [r4, #28]
    1dce:	421a      	tst	r2, r3
    1dd0:	d1fc      	bne.n	1dcc <_usart_init+0x5c>
    1dd2:	2201      	movs	r2, #1
    1dd4:	69e3      	ldr	r3, [r4, #28]
    1dd6:	421a      	tst	r2, r3
    1dd8:	d1fc      	bne.n	1dd4 <_usart_init+0x64>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1dda:	2304      	movs	r3, #4
    1ddc:	f2c4 0310 	movt	r3, #16400	; 0x4010
    1de0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1de2:	2203      	movs	r2, #3
    1de4:	69e3      	ldr	r3, [r4, #28]
    1de6:	421a      	tst	r2, r3
    1de8:	d1fc      	bne.n	1de4 <_usart_init+0x74>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1dea:	23c0      	movs	r3, #192	; 0xc0
    1dec:	029b      	lsls	r3, r3, #10
    1dee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1df0:	220f      	movs	r2, #15
    1df2:	69e3      	ldr	r3, [r4, #28]
    1df4:	421a      	tst	r2, r3
    1df6:	d1fc      	bne.n	1df2 <_usart_init+0x82>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1df8:	2302      	movs	r3, #2
    1dfa:	f2c0 0370 	movt	r3, #112	; 0x70
    1dfe:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1e00:	4b03      	ldr	r3, [pc, #12]	; (1e10 <_usart_init+0xa0>)
    1e02:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1e04:	2300      	movs	r3, #0
    1e06:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1e08:	2230      	movs	r2, #48	; 0x30
    1e0a:	54a3      	strb	r3, [r4, r2]
}
    1e0c:	2000      	movs	r0, #0
    1e0e:	bd10      	pop	{r4, pc}
    1e10:	fffff62b 	.word	0xfffff62b

00001e14 <_usart_sync_init>:
{
    1e14:	b570      	push	{r4, r5, r6, lr}
    1e16:	0005      	movs	r5, r0
    1e18:	000c      	movs	r4, r1
	ASSERT(device);
    1e1a:	f642 3134 	movw	r1, #11060	; 0x2b34
    1e1e:	f2c0 0100 	movt	r1, #0
    1e22:	1e43      	subs	r3, r0, #1
    1e24:	4198      	sbcs	r0, r3
    1e26:	b2c0      	uxtb	r0, r0
    1e28:	22bb      	movs	r2, #187	; 0xbb
    1e2a:	f640 7387 	movw	r3, #3975	; 0xf87
    1e2e:	f2c0 0300 	movt	r3, #0
    1e32:	4798      	blx	r3
	device->hw = hw;
    1e34:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1e36:	0020      	movs	r0, r4
    1e38:	f641 5371 	movw	r3, #7537	; 0x1d71
    1e3c:	f2c0 0300 	movt	r3, #0
    1e40:	4798      	blx	r3
}
    1e42:	bd70      	pop	{r4, r5, r6, pc}

00001e44 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1e44:	6803      	ldr	r3, [r0, #0]
    1e46:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1e48:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1e4a:	4770      	bx	lr

00001e4c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1e4c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1e4e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1e50:	b2c0      	uxtb	r0, r0
}
    1e52:	4770      	bx	lr

00001e54 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1e54:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1e56:	7e18      	ldrb	r0, [r3, #24]
    1e58:	2301      	movs	r3, #1
    1e5a:	4018      	ands	r0, r3
}
    1e5c:	4770      	bx	lr

00001e5e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1e5e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1e60:	7e18      	ldrb	r0, [r3, #24]
    1e62:	0780      	lsls	r0, r0, #30
    1e64:	0fc0      	lsrs	r0, r0, #31
}
    1e66:	4770      	bx	lr

00001e68 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1e68:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1e6a:	7e18      	ldrb	r0, [r3, #24]
    1e6c:	0740      	lsls	r0, r0, #29
    1e6e:	0fc0      	lsrs	r0, r0, #31
}
    1e70:	4770      	bx	lr

00001e72 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1e72:	b570      	push	{r4, r5, r6, lr}
    1e74:	0005      	movs	r5, r0
    1e76:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1e78:	0008      	movs	r0, r1
    1e7a:	f641 5315 	movw	r3, #7445	; 0x1d15
    1e7e:	f2c0 0300 	movt	r3, #0
    1e82:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1e84:	b190      	cbz	r0, 1eac <_spi_m_sync_init+0x3a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1e86:	2d00      	cmp	r5, #0
    1e88:	d068      	beq.n	1f5c <_spi_m_sync_init+0xea>
    1e8a:	f642 3134 	movw	r1, #11060	; 0x2b34
    1e8e:	f2c0 0100 	movt	r1, #0
    1e92:	1e60      	subs	r0, r4, #1
    1e94:	4184      	sbcs	r4, r0
    1e96:	b2e0      	uxtb	r0, r4
    1e98:	f640 1236 	movw	r2, #2358	; 0x936
    1e9c:	f640 7387 	movw	r3, #3975	; 0xf87
    1ea0:	f2c0 0300 	movt	r3, #0
    1ea4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1ea6:	200d      	movs	r0, #13
    1ea8:	4240      	negs	r0, r0
    1eaa:	e056      	b.n	1f5a <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    1eac:	2d00      	cmp	r5, #0
    1eae:	d164      	bne.n	1f7a <_spi_m_sync_init+0x108>
    1eb0:	f642 3134 	movw	r1, #11060	; 0x2b34
    1eb4:	f2c0 0100 	movt	r1, #0
    1eb8:	f640 1236 	movw	r2, #2358	; 0x936
    1ebc:	2000      	movs	r0, #0
    1ebe:	f640 7387 	movw	r3, #3975	; 0xf87
    1ec2:	f2c0 0300 	movt	r3, #0
    1ec6:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1ec8:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1eca:	07db      	lsls	r3, r3, #31
    1ecc:	d418      	bmi.n	1f00 <_spi_m_sync_init+0x8e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ece:	2203      	movs	r2, #3
    1ed0:	69e3      	ldr	r3, [r4, #28]
    1ed2:	421a      	tst	r2, r3
    1ed4:	d1fc      	bne.n	1ed0 <_spi_m_sync_init+0x5e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ed6:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1ed8:	079b      	lsls	r3, r3, #30
    1eda:	d50b      	bpl.n	1ef4 <_spi_m_sync_init+0x82>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1edc:	6823      	ldr	r3, [r4, #0]
    1ede:	2202      	movs	r2, #2
    1ee0:	4393      	bics	r3, r2
    1ee2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ee4:	3201      	adds	r2, #1
    1ee6:	69e3      	ldr	r3, [r4, #28]
    1ee8:	421a      	tst	r2, r3
    1eea:	d1fc      	bne.n	1ee6 <_spi_m_sync_init+0x74>
    1eec:	2202      	movs	r2, #2
    1eee:	69e3      	ldr	r3, [r4, #28]
    1ef0:	421a      	tst	r2, r3
    1ef2:	d1fc      	bne.n	1eee <_spi_m_sync_init+0x7c>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ef4:	230d      	movs	r3, #13
    1ef6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ef8:	2203      	movs	r2, #3
    1efa:	69e3      	ldr	r3, [r4, #28]
    1efc:	421a      	tst	r2, r3
    1efe:	d1fc      	bne.n	1efa <_spi_m_sync_init+0x88>
    1f00:	2201      	movs	r2, #1
    1f02:	69e3      	ldr	r3, [r4, #28]
    1f04:	421a      	tst	r2, r3
    1f06:	d1fc      	bne.n	1f02 <_spi_m_sync_init+0x90>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1f08:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1f0a:	f642 3134 	movw	r1, #11060	; 0x2b34
    1f0e:	f2c0 0100 	movt	r1, #0
    1f12:	0020      	movs	r0, r4
    1f14:	1e43      	subs	r3, r0, #1
    1f16:	4198      	sbcs	r0, r3
    1f18:	b2c0      	uxtb	r0, r0
    1f1a:	f640 1200 	movw	r2, #2304	; 0x900
    1f1e:	f640 7387 	movw	r3, #3975	; 0xf87
    1f22:	f2c0 0300 	movt	r3, #0
    1f26:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1f28:	230c      	movs	r3, #12
    1f2a:	f2c0 0301 	movt	r3, #1
    1f2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f30:	2203      	movs	r2, #3
    1f32:	69e3      	ldr	r3, [r4, #28]
    1f34:	421a      	tst	r2, r3
    1f36:	d1fc      	bne.n	1f32 <_spi_m_sync_init+0xc0>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1f38:	2380      	movs	r3, #128	; 0x80
    1f3a:	029b      	lsls	r3, r3, #10
    1f3c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f3e:	2207      	movs	r2, #7
    1f40:	69e3      	ldr	r3, [r4, #28]
    1f42:	421a      	tst	r2, r3
    1f44:	d1fc      	bne.n	1f40 <_spi_m_sync_init+0xce>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1f46:	2301      	movs	r3, #1
    1f48:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1f4a:	2100      	movs	r1, #0
    1f4c:	2230      	movs	r2, #48	; 0x30
    1f4e:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1f50:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1f52:	33ff      	adds	r3, #255	; 0xff
    1f54:	33ff      	adds	r3, #255	; 0xff
    1f56:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1f58:	2000      	movs	r0, #0
}
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1f5c:	f642 3134 	movw	r1, #11060	; 0x2b34
    1f60:	f2c0 0100 	movt	r1, #0
    1f64:	f640 1236 	movw	r2, #2358	; 0x936
    1f68:	2000      	movs	r0, #0
    1f6a:	f640 7387 	movw	r3, #3975	; 0xf87
    1f6e:	f2c0 0300 	movt	r3, #0
    1f72:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1f74:	200d      	movs	r0, #13
    1f76:	4240      	negs	r0, r0
    1f78:	e7ef      	b.n	1f5a <_spi_m_sync_init+0xe8>
	ASSERT(dev && hw);
    1f7a:	f642 3134 	movw	r1, #11060	; 0x2b34
    1f7e:	f2c0 0100 	movt	r1, #0
    1f82:	0020      	movs	r0, r4
    1f84:	1e43      	subs	r3, r0, #1
    1f86:	4198      	sbcs	r0, r3
    1f88:	b2c0      	uxtb	r0, r0
    1f8a:	f640 1236 	movw	r2, #2358	; 0x936
    1f8e:	f640 7387 	movw	r3, #3975	; 0xf87
    1f92:	f2c0 0300 	movt	r3, #0
    1f96:	4798      	blx	r3
    1f98:	e796      	b.n	1ec8 <_spi_m_sync_init+0x56>

00001f9a <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1f9a:	b510      	push	{r4, lr}
    1f9c:	0004      	movs	r4, r0
	ASSERT(dev && dev->prvt);
    1f9e:	b1a8      	cbz	r0, 1fcc <_spi_m_sync_enable+0x32>
    1fa0:	6800      	ldr	r0, [r0, #0]
    1fa2:	1e43      	subs	r3, r0, #1
    1fa4:	4198      	sbcs	r0, r3
    1fa6:	b2c0      	uxtb	r0, r0
    1fa8:	f642 3134 	movw	r1, #11060	; 0x2b34
    1fac:	f2c0 0100 	movt	r1, #0
    1fb0:	f640 1295 	movw	r2, #2453	; 0x995
    1fb4:	f640 7387 	movw	r3, #3975	; 0xf87
    1fb8:	f2c0 0300 	movt	r3, #0
    1fbc:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1fbe:	6820      	ldr	r0, [r4, #0]
    1fc0:	f641 534f 	movw	r3, #7503	; 0x1d4f
    1fc4:	f2c0 0300 	movt	r3, #0
    1fc8:	4798      	blx	r3
}
    1fca:	bd10      	pop	{r4, pc}
    1fcc:	2000      	movs	r0, #0
    1fce:	e7eb      	b.n	1fa8 <_spi_m_sync_enable+0xe>

00001fd0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	46de      	mov	lr, fp
    1fd4:	4657      	mov	r7, sl
    1fd6:	464e      	mov	r6, r9
    1fd8:	4645      	mov	r5, r8
    1fda:	b5e0      	push	{r5, r6, r7, lr}
    1fdc:	b083      	sub	sp, #12
    1fde:	4681      	mov	r9, r0
    1fe0:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1fe2:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1fe4:	680b      	ldr	r3, [r1, #0]
    1fe6:	4698      	mov	r8, r3
    1fe8:	684d      	ldr	r5, [r1, #4]
    1fea:	7903      	ldrb	r3, [r0, #4]
    1fec:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1fee:	b1e8      	cbz	r0, 202c <_spi_m_sync_trans+0x5c>
    1ff0:	0020      	movs	r0, r4
    1ff2:	1e43      	subs	r3, r0, #1
    1ff4:	4198      	sbcs	r0, r3
    1ff6:	b2c0      	uxtb	r0, r0
    1ff8:	f642 3134 	movw	r1, #11060	; 0x2b34
    1ffc:	f2c0 0100 	movt	r1, #0
    2000:	f640 229a 	movw	r2, #2714	; 0xa9a
    2004:	f640 7387 	movw	r3, #3975	; 0xf87
    2008:	f2c0 0300 	movt	r3, #0
    200c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    200e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2010:	075b      	lsls	r3, r3, #29
    2012:	d140      	bne.n	2096 <_spi_m_sync_trans+0xc6>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2014:	2303      	movs	r3, #3
    2016:	69e0      	ldr	r0, [r4, #28]
    2018:	4018      	ands	r0, r3
    201a:	2800      	cmp	r0, #0
    201c:	d1fb      	bne.n	2016 <_spi_m_sync_trans+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    201e:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2020:	079b      	lsls	r3, r3, #30
    2022:	d53b      	bpl.n	209c <_spi_m_sync_trans+0xcc>
    2024:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2026:	f240 0c01 	movw	ip, #1
    202a:	e009      	b.n	2040 <_spi_m_sync_trans+0x70>
    202c:	2000      	movs	r0, #0
    202e:	e7e3      	b.n	1ff8 <_spi_m_sync_trans+0x28>
		*ctrl->rxbuf++ = (uint8_t)data;
    2030:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    2032:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2034:	b25b      	sxtb	r3, r3
    2036:	2b00      	cmp	r3, #0
    2038:	db16      	blt.n	2068 <_spi_m_sync_trans+0x98>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    203a:	68b3      	ldr	r3, [r6, #8]
    203c:	4283      	cmp	r3, r0
    203e:	d927      	bls.n	2090 <_spi_m_sync_trans+0xc0>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2040:	7e23      	ldrb	r3, [r4, #24]
    2042:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2044:	2104      	movs	r1, #4
    2046:	4219      	tst	r1, r3
    2048:	d02b      	beq.n	20a2 <_spi_m_sync_trans+0xd2>
	return ((Sercom *)hw)->SPI.DATA.reg;
    204a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    204c:	2d00      	cmp	r5, #0
    204e:	d0f0      	beq.n	2032 <_spi_m_sync_trans+0x62>
		*ctrl->rxbuf++ = (uint8_t)data;
    2050:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    2052:	9901      	ldr	r1, [sp, #4]
    2054:	2901      	cmp	r1, #1
    2056:	d9eb      	bls.n	2030 <_spi_m_sync_trans+0x60>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2058:	0a3f      	lsrs	r7, r7, #8
    205a:	706f      	strb	r7, [r5, #1]
    205c:	3502      	adds	r5, #2
    205e:	e7e8      	b.n	2032 <_spi_m_sync_trans+0x62>
		data = *ctrl->txbuf++;
    2060:	f240 0b01 	movw	fp, #1
    2064:	44d8      	add	r8, fp
    2066:	e036      	b.n	20d6 <_spi_m_sync_trans+0x106>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2068:	2301      	movs	r3, #1
    206a:	425b      	negs	r3, r3
    206c:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    206e:	3381      	adds	r3, #129	; 0x81
    2070:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2072:	2013      	movs	r0, #19
    2074:	4240      	negs	r0, r0
	tmp &= mask;
    2076:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2078:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    207a:	4213      	tst	r3, r2
    207c:	d0fc      	beq.n	2078 <_spi_m_sync_trans+0xa8>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    207e:	2303      	movs	r3, #3
    2080:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2082:	b003      	add	sp, #12
    2084:	bc3c      	pop	{r2, r3, r4, r5}
    2086:	4690      	mov	r8, r2
    2088:	4699      	mov	r9, r3
    208a:	46a2      	mov	sl, r4
    208c:	46ab      	mov	fp, r5
    208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2090:	4293      	cmp	r3, r2
    2092:	d8d5      	bhi.n	2040 <_spi_m_sync_trans+0x70>
    2094:	e7ef      	b.n	2076 <_spi_m_sync_trans+0xa6>
		return ERR_BUSY;
    2096:	2004      	movs	r0, #4
    2098:	4240      	negs	r0, r0
    209a:	e7f2      	b.n	2082 <_spi_m_sync_trans+0xb2>
		return ERR_NOT_INITIALIZED;
    209c:	2014      	movs	r0, #20
    209e:	4240      	negs	r0, r0
    20a0:	e7ef      	b.n	2082 <_spi_m_sync_trans+0xb2>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    20a2:	4290      	cmp	r0, r2
    20a4:	d8c6      	bhi.n	2034 <_spi_m_sync_trans+0x64>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    20a6:	4667      	mov	r7, ip
    20a8:	421f      	tst	r7, r3
    20aa:	d0c3      	beq.n	2034 <_spi_m_sync_trans+0x64>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    20ac:	464f      	mov	r7, r9
    20ae:	88ff      	ldrh	r7, [r7, #6]
    20b0:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    20b2:	4647      	mov	r7, r8
    20b4:	b17f      	cbz	r7, 20d6 <_spi_m_sync_trans+0x106>
		data = *ctrl->txbuf++;
    20b6:	783f      	ldrb	r7, [r7, #0]
    20b8:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    20ba:	9901      	ldr	r1, [sp, #4]
    20bc:	2901      	cmp	r1, #1
    20be:	d9cf      	bls.n	2060 <_spi_m_sync_trans+0x90>
			data |= (*ctrl->txbuf) << 8;
    20c0:	4647      	mov	r7, r8
    20c2:	787f      	ldrb	r7, [r7, #1]
    20c4:	023f      	lsls	r7, r7, #8
    20c6:	46bb      	mov	fp, r7
    20c8:	4657      	mov	r7, sl
    20ca:	4659      	mov	r1, fp
    20cc:	430f      	orrs	r7, r1
    20ce:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    20d0:	f240 0b02 	movw	fp, #2
    20d4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    20d6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    20d8:	4657      	mov	r7, sl
    20da:	62a7      	str	r7, [r4, #40]	; 0x28
    20dc:	e7aa      	b.n	2034 <_spi_m_sync_trans+0x64>

000020de <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    20de:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    20e0:	f24f 0c00 	movw	ip, #61440	; 0xf000
    20e4:	f6cb 5cff 	movt	ip, #48639	; 0xbdff
    20e8:	4460      	add	r0, ip
    20ea:	0a80      	lsrs	r0, r0, #10
		if (_tcs[i].number == index) {
    20ec:	b2c0      	uxtb	r0, r0
    20ee:	b168      	cbz	r0, 210c <get_tc_index+0x2e>
	ASSERT(false);
    20f0:	f642 3168 	movw	r1, #11112	; 0x2b68
    20f4:	f2c0 0100 	movt	r1, #0
    20f8:	f240 123c 	movw	r2, #316	; 0x13c
    20fc:	2000      	movs	r0, #0
    20fe:	f640 7387 	movw	r3, #3975	; 0xf87
    2102:	f2c0 0300 	movt	r3, #0
    2106:	4798      	blx	r3
	return -1;
    2108:	2001      	movs	r0, #1
    210a:	4240      	negs	r0, r0
}
    210c:	bd10      	pop	{r4, pc}

0000210e <_timer_init>:
{
    210e:	b570      	push	{r4, r5, r6, lr}
    2110:	0006      	movs	r6, r0
    2112:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    2114:	0008      	movs	r0, r1
    2116:	f242 03df 	movw	r3, #8415	; 0x20df
    211a:	f2c0 0300 	movt	r3, #0
    211e:	4798      	blx	r3
    2120:	0005      	movs	r5, r0
	device->hw = hw;
    2122:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2124:	f642 3168 	movw	r1, #11112	; 0x2b68
    2128:	f2c0 0100 	movt	r1, #0
    212c:	228d      	movs	r2, #141	; 0x8d
    212e:	2001      	movs	r0, #1
    2130:	f640 7387 	movw	r3, #3975	; 0xf87
    2134:	f2c0 0300 	movt	r3, #0
    2138:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    213a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    213c:	07db      	lsls	r3, r3, #31
    213e:	d418      	bmi.n	2172 <_timer_init+0x64>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2140:	2203      	movs	r2, #3
    2142:	6923      	ldr	r3, [r4, #16]
    2144:	421a      	tst	r2, r3
    2146:	d1fc      	bne.n	2142 <_timer_init+0x34>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2148:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    214a:	079b      	lsls	r3, r3, #30
    214c:	d50b      	bpl.n	2166 <_timer_init+0x58>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE_Msk;
    214e:	6823      	ldr	r3, [r4, #0]
    2150:	2202      	movs	r2, #2
    2152:	4393      	bics	r3, r2
    2154:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2156:	3201      	adds	r2, #1
    2158:	6923      	ldr	r3, [r4, #16]
    215a:	421a      	tst	r2, r3
    215c:	d1fc      	bne.n	2158 <_timer_init+0x4a>
    215e:	2202      	movs	r2, #2
    2160:	6923      	ldr	r3, [r4, #16]
    2162:	421a      	tst	r2, r3
    2164:	d1fc      	bne.n	2160 <_timer_init+0x52>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2166:	2301      	movs	r3, #1
    2168:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    216a:	2203      	movs	r2, #3
    216c:	6923      	ldr	r3, [r4, #16]
    216e:	421a      	tst	r2, r3
    2170:	d1fc      	bne.n	216c <_timer_init+0x5e>
    2172:	2201      	movs	r2, #1
    2174:	6923      	ldr	r3, [r4, #16]
    2176:	421a      	tst	r2, r3
    2178:	d1fc      	bne.n	2174 <_timer_init+0x66>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    217a:	006b      	lsls	r3, r5, #1
    217c:	195b      	adds	r3, r3, r5
    217e:	00db      	lsls	r3, r3, #3
    2180:	f642 3250 	movw	r2, #11088	; 0x2b50
    2184:	f2c0 0200 	movt	r2, #0
    2188:	4694      	mov	ip, r2
    218a:	4463      	add	r3, ip
    218c:	6859      	ldr	r1, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    218e:	6021      	str	r1, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2190:	2203      	movs	r2, #3
    2192:	6923      	ldr	r3, [r4, #16]
    2194:	421a      	tst	r2, r3
    2196:	d1fc      	bne.n	2192 <_timer_init+0x84>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2198:	006b      	lsls	r3, r5, #1
    219a:	195b      	adds	r3, r3, r5
    219c:	00db      	lsls	r3, r3, #3
    219e:	f642 3250 	movw	r2, #11088	; 0x2b50
    21a2:	f2c0 0200 	movt	r2, #0
    21a6:	4694      	mov	ip, r2
    21a8:	4463      	add	r3, ip
    21aa:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    21ac:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    21ae:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    21b0:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    21b2:	2301      	movs	r3, #1
    21b4:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    21b6:	330b      	adds	r3, #11
    21b8:	400b      	ands	r3, r1
    21ba:	2b08      	cmp	r3, #8
    21bc:	d065      	beq.n	228a <_timer_init+0x17c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    21be:	2b00      	cmp	r3, #0
    21c0:	d000      	beq.n	21c4 <_timer_init+0xb6>
    21c2:	e082      	b.n	22ca <_timer_init+0x1bc>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    21c4:	006b      	lsls	r3, r5, #1
    21c6:	195b      	adds	r3, r3, r5
    21c8:	00db      	lsls	r3, r3, #3
    21ca:	f642 3250 	movw	r2, #11088	; 0x2b50
    21ce:	f2c0 0200 	movt	r2, #0
    21d2:	4694      	mov	ip, r2
    21d4:	4463      	add	r3, ip
    21d6:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    21d8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21da:	22c0      	movs	r2, #192	; 0xc0
    21dc:	6923      	ldr	r3, [r4, #16]
    21de:	421a      	tst	r2, r3
    21e0:	d1fc      	bne.n	21dc <_timer_init+0xce>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    21e2:	2300      	movs	r3, #0
    21e4:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21e6:	22c0      	movs	r2, #192	; 0xc0
    21e8:	6923      	ldr	r3, [r4, #16]
    21ea:	421a      	tst	r2, r3
    21ec:	d1fc      	bne.n	21e8 <_timer_init+0xda>
		hri_tccount16_write_PER_reg(hw, _tcs[i].per);
    21ee:	006b      	lsls	r3, r5, #1
    21f0:	195b      	adds	r3, r3, r5
    21f2:	00db      	lsls	r3, r3, #3
    21f4:	f642 3250 	movw	r2, #11088	; 0x2b50
    21f8:	f2c0 0200 	movt	r2, #0
    21fc:	4694      	mov	ip, r2
    21fe:	4463      	add	r3, ip
    2200:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.PER.reg = data;
    2202:	8363      	strh	r3, [r4, #26]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2204:	2220      	movs	r2, #32
    2206:	6923      	ldr	r3, [r4, #16]
    2208:	421a      	tst	r2, r3
    220a:	d1fc      	bne.n	2206 <_timer_init+0xf8>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF_Msk;
    220c:	2301      	movs	r3, #1
    220e:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    2210:	f241 0300 	movw	r3, #4096	; 0x1000
    2214:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2218:	429c      	cmp	r4, r3
    221a:	d100      	bne.n	221e <_timer_init+0x110>
    221c:	e07c      	b.n	2318 <_timer_init+0x20a>
	NVIC_DisableIRQ(_tcs[i].irq);
    221e:	006b      	lsls	r3, r5, #1
    2220:	195b      	adds	r3, r3, r5
    2222:	00db      	lsls	r3, r3, #3
    2224:	f642 3250 	movw	r2, #11088	; 0x2b50
    2228:	f2c0 0200 	movt	r2, #0
    222c:	4694      	mov	ip, r2
    222e:	4463      	add	r3, ip
    2230:	2201      	movs	r2, #1
    2232:	569a      	ldrsb	r2, [r3, r2]
  if ((int32_t)(IRQn) >= 0)
    2234:	2a00      	cmp	r2, #0
    2236:	db26      	blt.n	2286 <_timer_init+0x178>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2238:	0953      	lsrs	r3, r2, #5
    223a:	211f      	movs	r1, #31
    223c:	4011      	ands	r1, r2
    223e:	2201      	movs	r2, #1
    2240:	408a      	lsls	r2, r1
    2242:	f24e 1100 	movw	r1, #57600	; 0xe100
    2246:	f2ce 0100 	movt	r1, #57344	; 0xe000
    224a:	3320      	adds	r3, #32
    224c:	009b      	lsls	r3, r3, #2
    224e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2254:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2258:	006b      	lsls	r3, r5, #1
    225a:	195d      	adds	r5, r3, r5
    225c:	00ed      	lsls	r5, r5, #3
    225e:	4465      	add	r5, ip
    2260:	2201      	movs	r2, #1
    2262:	56aa      	ldrsb	r2, [r5, r2]
  if ((int32_t)(IRQn) >= 0)
    2264:	2a00      	cmp	r2, #0
    2266:	db0e      	blt.n	2286 <_timer_init+0x178>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2268:	0953      	lsrs	r3, r2, #5
    226a:	211f      	movs	r1, #31
    226c:	4011      	ands	r1, r2
    226e:	2201      	movs	r2, #1
    2270:	408a      	lsls	r2, r1
    2272:	f24e 1100 	movw	r1, #57600	; 0xe100
    2276:	f2ce 0100 	movt	r1, #57344	; 0xe000
    227a:	0018      	movs	r0, r3
    227c:	3060      	adds	r0, #96	; 0x60
    227e:	0080      	lsls	r0, r0, #2
    2280:	5042      	str	r2, [r0, r1]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2282:	009b      	lsls	r3, r3, #2
    2284:	505a      	str	r2, [r3, r1]
}
    2286:	2000      	movs	r0, #0
    2288:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    228a:	006b      	lsls	r3, r5, #1
    228c:	195b      	adds	r3, r3, r5
    228e:	00db      	lsls	r3, r3, #3
    2290:	4463      	add	r3, ip
    2292:	691b      	ldr	r3, [r3, #16]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2294:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2296:	22c0      	movs	r2, #192	; 0xc0
    2298:	6923      	ldr	r3, [r4, #16]
    229a:	421a      	tst	r2, r3
    229c:	d1fc      	bne.n	2298 <_timer_init+0x18a>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    229e:	2300      	movs	r3, #0
    22a0:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22a2:	22c0      	movs	r2, #192	; 0xc0
    22a4:	6923      	ldr	r3, [r4, #16]
    22a6:	421a      	tst	r2, r3
    22a8:	d1fc      	bne.n	22a4 <_timer_init+0x196>
		hri_tccount32_write_PER_reg(hw, _tcs[i].per);
    22aa:	006b      	lsls	r3, r5, #1
    22ac:	195b      	adds	r3, r3, r5
    22ae:	00db      	lsls	r3, r3, #3
    22b0:	f642 3250 	movw	r2, #11088	; 0x2b50
    22b4:	f2c0 0200 	movt	r2, #0
    22b8:	4694      	mov	ip, r2
    22ba:	4463      	add	r3, ip
    22bc:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.PER.reg = data;
    22be:	61a3      	str	r3, [r4, #24]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22c0:	2220      	movs	r2, #32
    22c2:	6923      	ldr	r3, [r4, #16]
    22c4:	421a      	tst	r2, r3
    22c6:	d1fc      	bne.n	22c2 <_timer_init+0x1b4>
    22c8:	e7a0      	b.n	220c <_timer_init+0xfe>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    22ca:	2b04      	cmp	r3, #4
    22cc:	d19e      	bne.n	220c <_timer_init+0xfe>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    22ce:	006b      	lsls	r3, r5, #1
    22d0:	195b      	adds	r3, r3, r5
    22d2:	00db      	lsls	r3, r3, #3
    22d4:	f642 3250 	movw	r2, #11088	; 0x2b50
    22d8:	f2c0 0200 	movt	r2, #0
    22dc:	4694      	mov	ip, r2
    22de:	4463      	add	r3, ip
    22e0:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    22e2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22e4:	22c0      	movs	r2, #192	; 0xc0
    22e6:	6923      	ldr	r3, [r4, #16]
    22e8:	421a      	tst	r2, r3
    22ea:	d1fc      	bne.n	22e6 <_timer_init+0x1d8>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    22ec:	2300      	movs	r3, #0
    22ee:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22f0:	22c0      	movs	r2, #192	; 0xc0
    22f2:	6923      	ldr	r3, [r4, #16]
    22f4:	421a      	tst	r2, r3
    22f6:	d1fc      	bne.n	22f2 <_timer_init+0x1e4>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    22f8:	006b      	lsls	r3, r5, #1
    22fa:	195b      	adds	r3, r3, r5
    22fc:	00db      	lsls	r3, r3, #3
    22fe:	f642 3250 	movw	r2, #11088	; 0x2b50
    2302:	f2c0 0200 	movt	r2, #0
    2306:	4694      	mov	ip, r2
    2308:	4463      	add	r3, ip
    230a:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.PER.reg = data;
    230c:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    230e:	2220      	movs	r2, #32
    2310:	6923      	ldr	r3, [r4, #16]
    2312:	421a      	tst	r2, r3
    2314:	d1fc      	bne.n	2310 <_timer_init+0x202>
    2316:	e779      	b.n	220c <_timer_init+0xfe>
		_tc0_dev = (struct _timer_device *)dev;
    2318:	f240 03b0 	movw	r3, #176	; 0xb0
    231c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2320:	601e      	str	r6, [r3, #0]
    2322:	e77c      	b.n	221e <_timer_init+0x110>

00002324 <_tc_get_timer>:
}
    2324:	2000      	movs	r0, #0
    2326:	4770      	bx	lr

00002328 <TC0_Handler>:
{
    2328:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    232a:	f240 03b0 	movw	r3, #176	; 0xb0
    232e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2332:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2334:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF_Msk) >> TC_INTFLAG_OVF_Pos;
    2336:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2338:	07d2      	lsls	r2, r2, #31
    233a:	d400      	bmi.n	233e <TC0_Handler+0x16>
}
    233c:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF_Msk;
    233e:	2201      	movs	r2, #1
    2340:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2342:	6803      	ldr	r3, [r0, #0]
    2344:	4798      	blx	r3
}
    2346:	e7f9      	b.n	233c <TC0_Handler+0x14>

00002348 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    2348:	b570      	push	{r4, r5, r6, lr}
    234a:	0005      	movs	r5, r0
    234c:	000c      	movs	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    234e:	b1e8      	cbz	r0, 238c <_rand_sync_init+0x44>
    2350:	0008      	movs	r0, r1
    2352:	1e43      	subs	r3, r0, #1
    2354:	4198      	sbcs	r0, r3
    2356:	b2c0      	uxtb	r0, r0
    2358:	f642 317c 	movw	r1, #11132	; 0x2b7c
    235c:	f2c0 0100 	movt	r1, #0
    2360:	223d      	movs	r2, #61	; 0x3d
    2362:	f640 7387 	movw	r3, #3975	; 0xf87
    2366:	f2c0 0300 	movt	r3, #0
    236a:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    236c:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    236e:	079b      	lsls	r3, r3, #30
    2370:	d40e      	bmi.n	2390 <_rand_sync_init+0x48>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY_Msk;
    2372:	7823      	ldrb	r3, [r4, #0]
    2374:	2240      	movs	r2, #64	; 0x40
    2376:	4393      	bics	r3, r2
    2378:	7023      	strb	r3, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO_Msk;
    237a:	7923      	ldrb	r3, [r4, #4]
    237c:	3a3f      	subs	r2, #63	; 0x3f
    237e:	4393      	bics	r3, r2
    2380:	7123      	strb	r3, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
    2382:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    2384:	2320      	movs	r3, #32
    2386:	712b      	strb	r3, [r5, #4]
	return ERR_NONE;
    2388:	2000      	movs	r0, #0
	}
	return rc;
}
    238a:	bd70      	pop	{r4, r5, r6, pc}
    238c:	2000      	movs	r0, #0
    238e:	e7e3      	b.n	2358 <_rand_sync_init+0x10>
		return ERR_DENIED;
    2390:	2011      	movs	r0, #17
    2392:	4240      	negs	r0, r0
	return rc;
    2394:	e7f9      	b.n	238a <_rand_sync_init+0x42>

00002396 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2396:	b510      	push	{r4, lr}
    2398:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    239a:	2800      	cmp	r0, #0
    239c:	d02b      	beq.n	23f6 <_wdt_init+0x60>
    239e:	6800      	ldr	r0, [r0, #0]
    23a0:	1e43      	subs	r3, r0, #1
    23a2:	4198      	sbcs	r0, r3
    23a4:	b2c0      	uxtb	r0, r0
    23a6:	f642 3194 	movw	r1, #11156	; 0x2b94
    23aa:	f2c0 0100 	movt	r1, #0
    23ae:	2250      	movs	r2, #80	; 0x50
    23b0:	f640 7387 	movw	r3, #3975	; 0xf87
    23b4:	f2c0 0300 	movt	r3, #0
    23b8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    23ba:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    23bc:	211e      	movs	r1, #30
    23be:	689a      	ldr	r2, [r3, #8]
    23c0:	4211      	tst	r1, r2
    23c2:	d1fc      	bne.n	23be <_wdt_init+0x28>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_RUNSTDBY | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    23c4:	781a      	ldrb	r2, [r3, #0]
    23c6:	09d2      	lsrs	r2, r2, #7
    23c8:	b9ba      	cbnz	r2, 23fa <_wdt_init+0x64>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    23ca:	211e      	movs	r1, #30
    23cc:	689a      	ldr	r2, [r3, #8]
    23ce:	4211      	tst	r1, r2
    23d0:	d1fc      	bne.n	23cc <_wdt_init+0x36>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    23d2:	781a      	ldrb	r2, [r3, #0]
    23d4:	0792      	lsls	r2, r2, #30
    23d6:	d413      	bmi.n	2400 <_wdt_init+0x6a>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN_Msk;
    23d8:	781a      	ldrb	r2, [r3, #0]
    23da:	2104      	movs	r1, #4
    23dc:	438a      	bics	r2, r1
    23de:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    23e0:	311a      	adds	r1, #26
    23e2:	689a      	ldr	r2, [r3, #8]
    23e4:	4211      	tst	r1, r2
    23e6:	d1fc      	bne.n	23e2 <_wdt_init+0x4c>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    23e8:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    23ea:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    23ec:	210f      	movs	r1, #15
    23ee:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    23f0:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    23f2:	2000      	movs	r0, #0
}
    23f4:	bd10      	pop	{r4, pc}
    23f6:	2000      	movs	r0, #0
    23f8:	e7d5      	b.n	23a6 <_wdt_init+0x10>
		return ERR_DENIED;
    23fa:	2011      	movs	r0, #17
    23fc:	4240      	negs	r0, r0
    23fe:	e7f9      	b.n	23f4 <_wdt_init+0x5e>
    2400:	2011      	movs	r0, #17
    2402:	4240      	negs	r0, r0
    2404:	e7f6      	b.n	23f4 <_wdt_init+0x5e>

00002406 <button_on_PA27_used>:
volatile uint32_t app_mode          = IDLE_MODE_IRQ;
volatile bool     SW0_flag          = false;

static void button_on_PA27_used(void)
{
	SW0_flag = true;
    2406:	f240 03b4 	movw	r3, #180	; 0xb4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	2201      	movs	r2, #1
    2410:	701a      	strb	r2, [r3, #0]
}
    2412:	4770      	bx	lr

00002414 <Enter_Mode_Standby>:
	((Pm *)hw)->SLEEPCFG.reg = data;
    2414:	f240 4300 	movw	r3, #1024	; 0x400
    2418:	f2c4 0300 	movt	r3, #16384	; 0x4000
    241c:	2204      	movs	r2, #4
    241e:	705a      	strb	r2, [r3, #1]
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    2420:	f240 4200 	movw	r2, #1024	; 0x400
    2424:	f2c4 0200 	movt	r2, #16384	; 0x4000
	tmp = (tmp & PM_SLEEPCFG_SLEEPMODE_Msk) >> PM_SLEEPCFG_SLEEPMODE_Pos;
    2428:	2107      	movs	r1, #7
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    242a:	7853      	ldrb	r3, [r2, #1]
{
	/* Enter STANDBY Sleep Mode */
	hri_pm_write_SLEEPCFG_reg(PM, PM_SLEEPCFG_SLEEPMODE_STANDBY);

	/* Ensure register is written before issuing wfi command */
	while (hri_pm_read_SLEEPCFG_SLEEPMODE_bf(PM) != PM_SLEEPCFG_SLEEPMODE_STANDBY_Val)
    242c:	400b      	ands	r3, r1
    242e:	2b04      	cmp	r3, #4
    2430:	d1fb      	bne.n	242a <Enter_Mode_Standby+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
    2432:	f3bf 8f4f 	dsb	sy
		;

	__DSB();
	__WFI();
    2436:	bf30      	wfi
}
    2438:	4770      	bx	lr
	...

0000243c <rtc_reconfig_Interrupts>:
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    243c:	f242 4300 	movw	r3, #9216	; 0x2400
    2440:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2444:	881a      	ldrh	r2, [r3, #0]
    2446:	2102      	movs	r1, #2
    2448:	438a      	bics	r2, r1
    244a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    244c:	f242 4200 	movw	r2, #9216	; 0x2400
    2450:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2454:	f248 0103 	movw	r1, #32771	; 0x8003
    2458:	6913      	ldr	r3, [r2, #16]
    245a:	4219      	tst	r1, r3
    245c:	d1fc      	bne.n	2458 <rtc_reconfig_Interrupts+0x1c>

/* reconfigure the RTC in interrupt when in IDLE_MODE_IRQ & STANDBY_MODE_IRQ */
static void rtc_reconfig_Interrupts(void)
{
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(RTC);     /* RTC Disable. */
	RTC->MODE1.CTRLA.reg = RTC_MODE1_CTRLA_SWRST; /* Perform a Software reset on the RTC */
    245e:	f242 4300 	movw	r3, #9216	; 0x2400
    2462:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2466:	2201      	movs	r2, #1
    2468:	801a      	strh	r2, [r3, #0]
	while (RTC->MODE1.SYNCBUSY.bit.SWRST)
    246a:	f242 4200 	movw	r2, #9216	; 0x2400
    246e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2472:	6913      	ldr	r3, [r2, #16]
    2474:	07db      	lsls	r3, r3, #31
    2476:	d4fc      	bmi.n	2472 <rtc_reconfig_Interrupts+0x36>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2478:	f242 4300 	movw	r3, #9216	; 0x2400
    247c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2480:	2280      	movs	r2, #128	; 0x80
    2482:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2484:	f242 4200 	movw	r2, #9216	; 0x2400
    2488:	f2c4 0200 	movt	r2, #16384	; 0x4000
    248c:	f248 0103 	movw	r1, #32771	; 0x8003
    2490:	6913      	ldr	r3, [r2, #16]
    2492:	4219      	tst	r1, r3
    2494:	d1fc      	bne.n	2490 <rtc_reconfig_Interrupts+0x54>
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2496:	f242 4300 	movw	r3, #9216	; 0x2400
    249a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    249e:	f640 42cc 	movw	r2, #3276	; 0xccc
    24a2:	621a      	str	r2, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    24a4:	f242 4200 	movw	r2, #9216	; 0x2400
    24a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    24ac:	2120      	movs	r1, #32
    24ae:	6913      	ldr	r3, [r2, #16]
    24b0:	4219      	tst	r1, r3
    24b2:	d1fc      	bne.n	24ae <rtc_reconfig_Interrupts+0x72>
	((Rtc *)hw)->MODE0.EVCTRL.reg &= ~RTC_MODE0_EVCTRL_CMPEO0;
    24b4:	f242 4300 	movw	r3, #9216	; 0x2400
    24b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    24bc:	685a      	ldr	r2, [r3, #4]
    24be:	4906      	ldr	r1, [pc, #24]	; (24d8 <rtc_reconfig_Interrupts+0x9c>)
    24c0:	400a      	ands	r2, r1
    24c2:	605a      	str	r2, [r3, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    24c4:	f240 1200 	movw	r2, #256	; 0x100
    24c8:	815a      	strh	r2, [r3, #10]
    24ca:	f24e 1300 	movw	r3, #57600	; 0xe100
    24ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24d2:	3afc      	subs	r2, #252	; 0xfc
    24d4:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COMP_reg(RTC, 0, 0xccc);  /* Compare Value: 3276 */
	hri_rtcmode0_clear_EVCTRL_CMPEO0_bit(RTC);   /* Clear the RTC CMPEO0 event to disable event coming from the RTC */
	hri_rtcmode0_set_INTEN_CMP0_bit(
	    RTC);                 /* Set the  CMPEO0 Interrupt to enable interrupt coming from the RTC compare 0 */
	NVIC_EnableIRQ(RTC_IRQn); /* Enable the interrupt at the core level */
}
    24d6:	4770      	bx	lr
    24d8:	fffffeff 	.word	0xfffffeff

000024dc <dmac_channel_0_callback>:
/**
 * \brief DMA Interrupt Handler function used in all state of the application
 */
void dmac_channel_0_callback(struct _dma_resource *resource)
{
	DMA_Flag = true;
    24dc:	f240 03b4 	movw	r3, #180	; 0xb4
    24e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24e4:	2201      	movs	r2, #1
    24e6:	705a      	strb	r2, [r3, #1]
}
    24e8:	4770      	bx	lr

000024ea <RTC_Handler>:
{
    24ea:	b510      	push	{r4, lr}
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    24ec:	f242 4300 	movw	r3, #9216	; 0x2400
    24f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    24f4:	f240 1200 	movw	r2, #256	; 0x100
    24f8:	819a      	strh	r2, [r3, #12]
	adc_async_start_conversion(&ADC_0);
    24fa:	f240 00cc 	movw	r0, #204	; 0xcc
    24fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2502:	f640 2311 	movw	r3, #2577	; 0xa11
    2506:	f2c0 0300 	movt	r3, #0
    250a:	4798      	blx	r3
}
    250c:	bd10      	pop	{r4, pc}

0000250e <EXTERNAL_IRQ_0_enable>:
{
    250e:	b510      	push	{r4, lr}
	ext_irq_register(PIN_PA27, button_on_PA27_used);
    2510:	f242 4107 	movw	r1, #9223	; 0x2407
    2514:	f2c0 0100 	movt	r1, #0
    2518:	201b      	movs	r0, #27
    251a:	f640 23b1 	movw	r3, #2737	; 0xab1
    251e:	f2c0 0300 	movt	r3, #0
    2522:	4798      	blx	r3
}
    2524:	bd10      	pop	{r4, pc}

00002526 <Light_sensor_to_data_streammer>:
{
    2526:	b510      	push	{r4, lr}
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2528:	f240 2260 	movw	r2, #608	; 0x260
    252c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2530:	8811      	ldrh	r1, [r2, #0]
    2532:	8893      	ldrh	r3, [r2, #4]
		temp2 = temp + temp2;
    2534:	18cb      	adds	r3, r1, r3
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    2536:	8911      	ldrh	r1, [r2, #8]
		temp2 = temp + temp2;
    2538:	18c9      	adds	r1, r1, r3
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    253a:	8993      	ldrh	r3, [r2, #12]
		temp2 = temp + temp2;
    253c:	1859      	adds	r1, r3, r1
		temp  = *(unsigned short *)(&adc_result_store + (i * 2));
    253e:	8a13      	ldrh	r3, [r2, #16]
		temp2 = temp + temp2;
    2540:	185b      	adds	r3, r3, r1
	average = temp2 / (MAX_TRANSFER / 2);
    2542:	2205      	movs	r2, #5
    2544:	fbb3 f3f2 	udiv	r3, r3, r2
	DataStream_buf[1] = (uint8_t)average;
    2548:	f240 0100 	movw	r1, #0
    254c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2550:	704b      	strb	r3, [r1, #1]
	DataStream_buf[2] = (uint8_t)(average >> 8);
    2552:	0a1b      	lsrs	r3, r3, #8
    2554:	708b      	strb	r3, [r1, #2]
	io_write(io, DataStream_buf, 4); /* use the SPI to send the data */
    2556:	f240 03b4 	movw	r3, #180	; 0xb4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	6858      	ldr	r0, [r3, #4]
    2560:	3a01      	subs	r2, #1
    2562:	f640 330d 	movw	r3, #2829	; 0xb0d
    2566:	f2c0 0300 	movt	r3, #0
    256a:	4798      	blx	r3
}
    256c:	bd10      	pop	{r4, pc}

0000256e <optimize_Low_Power>:
}

static inline void hri_supc_set_VREG_LPEFF_bit(const void *const hw)
{
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREG.reg |= SUPC_VREG_LPEFF_Msk;
    256e:	f641 0300 	movw	r3, #6144	; 0x1800
    2572:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2576:	699a      	ldr	r2, [r3, #24]
    2578:	f240 1100 	movw	r1, #256	; 0x100
    257c:	430a      	orrs	r2, r1
    257e:	619a      	str	r2, [r3, #24]

static inline void hri_supc_write_VREG_SEL_bf(const void *const hw, hri_supc_vreg_reg_t data)
{
	uint32_t tmp;
	SUPC_CRITICAL_SECTION_ENTER();
	tmp = ((Supc *)hw)->VREG.reg;
    2580:	699a      	ldr	r2, [r3, #24]
	tmp &= ~SUPC_VREG_SEL_Msk;
    2582:	39f4      	subs	r1, #244	; 0xf4
    2584:	438a      	bics	r2, r1
	tmp |= SUPC_VREG_SEL(data);
    2586:	3908      	subs	r1, #8
    2588:	430a      	orrs	r2, r1
	((Supc *)hw)->VREG.reg = tmp;
    258a:	619a      	str	r2, [r3, #24]
	return (((Supc *)hw)->STATUS.reg & SUPC_STATUS_VREGRDY_Msk) >> SUPC_STATUS_VREGRDY_Pos;
    258c:	f641 0200 	movw	r2, #6144	; 0x1800
    2590:	f2c4 0200 	movt	r2, #16384	; 0x4000
	while (hri_supc_get_STATUS_VREGRDY_bit(SUPC) == false)
    2594:	31fc      	adds	r1, #252	; 0xfc
    2596:	68d3      	ldr	r3, [r2, #12]
    2598:	4219      	tst	r1, r3
    259a:	d0fc      	beq.n	2596 <optimize_Low_Power+0x28>

static inline void hri_pm_write_STDBYCFG_PDCFG_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->STDBYCFG.reg;
    259c:	f240 4300 	movw	r3, #1024	; 0x400
    25a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    25a4:	891a      	ldrh	r2, [r3, #8]
	tmp &= ~PM_STDBYCFG_PDCFG_Msk;
    25a6:	2101      	movs	r1, #1
    25a8:	438a      	bics	r2, r1
	tmp |= value << PM_STDBYCFG_PDCFG_Pos;
	((Pm *)hw)->STDBYCFG.reg = tmp;
    25aa:	811a      	strh	r2, [r3, #8]
	PM->PWCFG.bit.RAMPSWC = PM_PWCFG_RAMPSWC_4KB_Val;
    25ac:	78da      	ldrb	r2, [r3, #3]
    25ae:	2103      	movs	r1, #3
    25b0:	430a      	orrs	r2, r1
    25b2:	70da      	strb	r2, [r3, #3]
}
    25b4:	4770      	bx	lr

000025b6 <config_dma_channel_0>:

void config_dma_channel_0(void)
{
    25b6:	b500      	push	{lr}
    25b8:	b083      	sub	sp, #12
	struct _dma_resource *dma_res;

	/* Set DMA CH-0 source address (SRAM: adc_result)*/
	_dma_set_source_address(0, (void *)(&(ADC->RESULT)));
    25ba:	f641 4124 	movw	r1, #7204	; 0x1c24
    25be:	f2c4 2100 	movt	r1, #16896	; 0x4200
    25c2:	2000      	movs	r0, #0
    25c4:	f241 5373 	movw	r3, #5491	; 0x1573
    25c8:	f2c0 0300 	movt	r3, #0
    25cc:	4798      	blx	r3

	/* Set DMA CH-0 destination address (SRAM: adc_result_copy)*/
	_dma_set_destination_address(
	    0, (void *)((uint32_t)(&adc_result_store) + (DMA_BITCOUNT_VALUE * (DMAC_BTCTRL_STEPSIZE_X1_Val + 1))));
    25ce:	f240 2160 	movw	r1, #608	; 0x260
    25d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    25d6:	310a      	adds	r1, #10
	_dma_set_destination_address(
    25d8:	2000      	movs	r0, #0
    25da:	f241 535f 	movw	r3, #5471	; 0x155f
    25de:	f2c0 0300 	movt	r3, #0
    25e2:	4798      	blx	r3

	/* Set DMA CH-0 block length */
	_dma_set_data_amount(0, (uint32_t)DMA_BITCOUNT_VALUE);
    25e4:	210a      	movs	r1, #10
    25e6:	2000      	movs	r0, #0
    25e8:	f241 539f 	movw	r3, #5535	; 0x159f
    25ec:	f2c0 0300 	movt	r3, #0
    25f0:	4798      	blx	r3

	/* Get DMA CH-0 resource to set the application callback */
	_dma_get_channel_resource(&dma_res, 0);
    25f2:	2100      	movs	r1, #0
    25f4:	a801      	add	r0, sp, #4
    25f6:	f241 6353 	movw	r3, #5715	; 0x1653
    25fa:	f2c0 0300 	movt	r3, #0
    25fe:	4798      	blx	r3

	/* Set application callback to handle the DMA CH-0 transfer done */
	dma_res->dma_cb.transfer_done = dmac_channel_0_callback;
    2600:	f242 43dd 	movw	r3, #9437	; 0x24dd
    2604:	f2c0 0300 	movt	r3, #0
    2608:	9a01      	ldr	r2, [sp, #4]
    260a:	6013      	str	r3, [r2, #0]

	/* Set next descriptor */
	_dma_set_next_descriptor(0, 0);
    260c:	2100      	movs	r1, #0
    260e:	2000      	movs	r0, #0
    2610:	f241 5387 	movw	r3, #5511	; 0x1587
    2614:	f2c0 0300 	movt	r3, #0
    2618:	4798      	blx	r3

	/* Enable DMA CH-0 transfer complete interrupt */
	_dma_set_irq_state(0, DMA_TRANSFER_COMPLETE_CB, true);
    261a:	2201      	movs	r2, #1
    261c:	2100      	movs	r1, #0
    261e:	2000      	movs	r0, #0
    2620:	f241 5307 	movw	r3, #5383	; 0x1507
    2624:	f2c0 0300 	movt	r3, #0
    2628:	4798      	blx	r3

	/* Enable CH-0 DMA transaction */
	_dma_enable_transaction(0, false);
    262a:	2100      	movs	r1, #0
    262c:	2000      	movs	r0, #0
    262e:	f241 6311 	movw	r3, #5649	; 0x1611
    2632:	f2c0 0300 	movt	r3, #0
    2636:	4798      	blx	r3
	while (DMAC->CHSTATUS.bit.BUSY)
    2638:	f246 0200 	movw	r2, #24576	; 0x6000
    263c:	f2c4 1200 	movt	r2, #16640	; 0x4100
    2640:	214f      	movs	r1, #79	; 0x4f
    2642:	5c53      	ldrb	r3, [r2, r1]
    2644:	079b      	lsls	r3, r3, #30
    2646:	d4fc      	bmi.n	2642 <config_dma_channel_0+0x8c>
		;
}
    2648:	b003      	add	sp, #12
    264a:	bd00      	pop	{pc}

0000264c <main>:

/* Main Function: STATE MACHINE IMPLEMENTATION */
int main(void)
{
    264c:	b5f0      	push	{r4, r5, r6, r7, lr}
    264e:	46c6      	mov	lr, r8
    2650:	b500      	push	{lr}
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
    2652:	f240 2381 	movw	r3, #641	; 0x281
    2656:	f2c0 0300 	movt	r3, #0
    265a:	4798      	blx	r3

	/* Optimize the SAM L10 Chip to Low Power */
	optimize_Low_Power();
    265c:	f242 536f 	movw	r3, #9583	; 0x256f
    2660:	f2c0 0300 	movt	r3, #0
    2664:	4798      	blx	r3

	/* Enable IRQ on the PA27 */
	EXTERNAL_IRQ_0_enable();
    2666:	f242 530f 	movw	r3, #9487	; 0x250f
    266a:	f2c0 0300 	movt	r3, #0
    266e:	4798      	blx	r3
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    2670:	f240 01b4 	movw	r1, #180	; 0xb4
    2674:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2678:	3104      	adds	r1, #4
    267a:	f240 1414 	movw	r4, #276	; 0x114
    267e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    2682:	0020      	movs	r0, r4
    2684:	f640 43c7 	movw	r3, #3271	; 0xcc7
    2688:	f2c0 0300 	movt	r3, #0
    268c:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    268e:	0020      	movs	r0, r4
    2690:	f640 33d1 	movw	r3, #3025	; 0xbd1
    2694:	f2c0 0300 	movt	r3, #0
    2698:	4798      	blx	r3

	/* Initialize the SPI connection for DGI usage */
	SPI_DGI_Init();

	config_dma_channel_0();
    269a:	f242 53b7 	movw	r3, #9655	; 0x25b7
    269e:	f2c0 0300 	movt	r3, #0
    26a2:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {

		if (SW0_flag) {
    26a4:	f240 04b4 	movw	r4, #180	; 0xb4
    26a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
			SW0_flag = false;
    26ac:	2500      	movs	r5, #0
    26ae:	e046      	b.n	273e <main+0xf2>
			if (app_mode == MAX_MODE_NUMBER) {
				app_mode = 0;
    26b0:	60a5      	str	r5, [r4, #8]
    26b2:	e04d      	b.n	2750 <main+0x104>
			}
		}
		switch (app_mode) {
		case IDLE_MODE_IRQ:
			/* reconfigure the RTC interrupt */
			rtc_reconfig_Interrupts();
    26b4:	f242 433d 	movw	r3, #9277	; 0x243d
    26b8:	f2c0 0300 	movt	r3, #0
    26bc:	4798      	blx	r3
	((Adc *)hw)->EVCTRL.reg &= ~ADC_EVCTRL_STARTEI_Msk;
    26be:	f641 4300 	movw	r3, #7168	; 0x1c00
    26c2:	f2c4 2300 	movt	r3, #16896	; 0x4200
    26c6:	78da      	ldrb	r2, [r3, #3]
    26c8:	2102      	movs	r1, #2
    26ca:	438a      	bics	r2, r1
    26cc:	70da      	strb	r2, [r3, #3]

			/* Reconfigure the ADC to work without event triggering */
			adc_reconfig();

			/* Enable ADC channel */
			adc_async_enable_channel(&ADC_0, 0);
    26ce:	f240 00cc 	movw	r0, #204	; 0xcc
    26d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    26d6:	0029      	movs	r1, r5
    26d8:	f640 13cb 	movw	r3, #2507	; 0x9cb
    26dc:	f2c0 0300 	movt	r3, #0
    26e0:	4798      	blx	r3

			/* reset DMA flag */
			DMA_Flag = false;
    26e2:	7065      	strb	r5, [r4, #1]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    26e4:	f242 4300 	movw	r3, #9216	; 0x2400
    26e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    26ec:	881a      	ldrh	r2, [r3, #0]
    26ee:	2102      	movs	r1, #2
    26f0:	430a      	orrs	r2, r1
    26f2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    26f4:	f242 4200 	movw	r2, #9216	; 0x2400
    26f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    26fc:	f248 0103 	movw	r1, #32771	; 0x8003
    2700:	6913      	ldr	r3, [r2, #16]
    2702:	4219      	tst	r1, r3
    2704:	d1fc      	bne.n	2700 <main+0xb4>

			/* RTC Enable */
			hri_rtcmode0_set_CTRLA_ENABLE_bit(RTC);

			/* Wait for DMA transfer complete */
			while (!(DMA_Flag)) {
    2706:	7863      	ldrb	r3, [r4, #1]
    2708:	b9a3      	cbnz	r3, 2734 <main+0xe8>
}

static inline void hri_pm_clear_STDBYCFG_DPGPDSW_bit(const void *const hw)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    270a:	f240 4200 	movw	r2, #1024	; 0x400
    270e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2712:	2610      	movs	r6, #16
	((Pm *)hw)->SLEEPCFG.reg = data;
    2714:	2002      	movs	r0, #2
	tmp = (tmp & PM_SLEEPCFG_SLEEPMODE_Msk) >> PM_SLEEPCFG_SLEEPMODE_Pos;
    2716:	2107      	movs	r1, #7
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    2718:	8913      	ldrh	r3, [r2, #8]
    271a:	43b3      	bics	r3, r6
    271c:	8113      	strh	r3, [r2, #8]
	((Pm *)hw)->SLEEPCFG.reg = data;
    271e:	7050      	strb	r0, [r2, #1]
	tmp = ((Pm *)hw)->SLEEPCFG.reg;
    2720:	7853      	ldrb	r3, [r2, #1]
	while (hri_pm_read_SLEEPCFG_SLEEPMODE_bf(PM) != PM_SLEEPCFG_SLEEPMODE_IDLE_Val)
    2722:	400b      	ands	r3, r1
    2724:	2b02      	cmp	r3, #2
    2726:	d1fb      	bne.n	2720 <main+0xd4>
    2728:	f3bf 8f4f 	dsb	sy
	__WFI();
    272c:	bf30      	wfi
			while (!(DMA_Flag)) {
    272e:	7863      	ldrb	r3, [r4, #1]
    2730:	2b00      	cmp	r3, #0
    2732:	d0f1      	beq.n	2718 <main+0xcc>
				Enter_Mode_Idle();
			}

			/* WAKE-UP!!! */
			/* DGI Transfer to the Data Streamer */
			Light_sensor_to_data_streammer();
    2734:	f242 5327 	movw	r3, #9511	; 0x2527
    2738:	f2c0 0300 	movt	r3, #0
    273c:	4798      	blx	r3
		if (SW0_flag) {
    273e:	7823      	ldrb	r3, [r4, #0]
    2740:	b133      	cbz	r3, 2750 <main+0x104>
			SW0_flag = false;
    2742:	7025      	strb	r5, [r4, #0]
			if (app_mode == MAX_MODE_NUMBER) {
    2744:	68a3      	ldr	r3, [r4, #8]
    2746:	2b03      	cmp	r3, #3
    2748:	d0b2      	beq.n	26b0 <main+0x64>
				app_mode++;
    274a:	68a3      	ldr	r3, [r4, #8]
    274c:	3301      	adds	r3, #1
    274e:	60a3      	str	r3, [r4, #8]
		switch (app_mode) {
    2750:	68a3      	ldr	r3, [r4, #8]
    2752:	2b01      	cmp	r3, #1
    2754:	d035      	beq.n	27c2 <main+0x176>
    2756:	2b00      	cmp	r3, #0
    2758:	d0ac      	beq.n	26b4 <main+0x68>
    275a:	2b02      	cmp	r3, #2
    275c:	d074      	beq.n	2848 <main+0x1fc>
    275e:	2b03      	cmp	r3, #3
    2760:	d1ed      	bne.n	273e <main+0xf2>
			Light_sensor_to_data_streammer();
			break;

		case STANDBY_MODE_SLPWKG_PWRGAT:
			/* Initializes MCU, drivers and middle ware */
			ADC_0_init();
    2762:	f240 3375 	movw	r3, #885	; 0x375
    2766:	f2c0 0300 	movt	r3, #0
    276a:	4798      	blx	r3

			/* RTC Initialization */
			RTC_init();
    276c:	f641 431b 	movw	r3, #7195	; 0x1c1b
    2770:	f2c0 0300 	movt	r3, #0
    2774:	4798      	blx	r3

			/* Enable ADC channel */
			adc_async_enable_channel(&ADC_0, 0);
    2776:	f240 00cc 	movw	r0, #204	; 0xcc
    277a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    277e:	0029      	movs	r1, r5
    2780:	f640 13cb 	movw	r3, #2507	; 0x9cb
    2784:	f2c0 0300 	movt	r3, #0
    2788:	4798      	blx	r3

			/* reset DMA flag */
			DMA_Flag = false;
    278a:	7065      	strb	r5, [r4, #1]

			/* Wait for DMA transfer complete*/
			while (!(DMA_Flag)) {
    278c:	7863      	ldrb	r3, [r4, #1]
    278e:	b993      	cbnz	r3, 27b6 <main+0x16a>
	((Pm *)hw)->STDBYCFG.reg |= PM_STDBYCFG_DPGPDSW_Msk;
    2790:	f240 4600 	movw	r6, #1024	; 0x400
    2794:	f2c4 0600 	movt	r6, #16384	; 0x4000
    2798:	f240 0810 	movw	r8, #16
				/* enable Power gating */
				enable_dynpower_gating();

				/* Enter STANDBY Sleep Mode */
				Enter_Mode_Standby();
    279c:	f242 4715 	movw	r7, #9237	; 0x2415
    27a0:	f2c0 0700 	movt	r7, #0
    27a4:	8933      	ldrh	r3, [r6, #8]
    27a6:	4642      	mov	r2, r8
    27a8:	4313      	orrs	r3, r2
    27aa:	b29b      	uxth	r3, r3
    27ac:	8133      	strh	r3, [r6, #8]
    27ae:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    27b0:	7863      	ldrb	r3, [r4, #1]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d0f6      	beq.n	27a4 <main+0x158>
			}

			/* WAKE-UP!!! */
			Light_sensor_to_data_streammer();
    27b6:	f242 5327 	movw	r3, #9511	; 0x2527
    27ba:	f2c0 0300 	movt	r3, #0
    27be:	4798      	blx	r3
			break;
    27c0:	e7bd      	b.n	273e <main+0xf2>
			rtc_reconfig_Interrupts();
    27c2:	f242 433d 	movw	r3, #9277	; 0x243d
    27c6:	f2c0 0300 	movt	r3, #0
    27ca:	4798      	blx	r3
    27cc:	f641 4300 	movw	r3, #7168	; 0x1c00
    27d0:	f2c4 2300 	movt	r3, #16896	; 0x4200
    27d4:	78da      	ldrb	r2, [r3, #3]
    27d6:	2102      	movs	r1, #2
    27d8:	438a      	bics	r2, r1
    27da:	70da      	strb	r2, [r3, #3]
			adc_async_enable_channel(&ADC_0, 0);
    27dc:	f240 00cc 	movw	r0, #204	; 0xcc
    27e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    27e4:	0029      	movs	r1, r5
    27e6:	f640 13cb 	movw	r3, #2507	; 0x9cb
    27ea:	f2c0 0300 	movt	r3, #0
    27ee:	4798      	blx	r3
			DMA_Flag = false;
    27f0:	7065      	strb	r5, [r4, #1]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    27f2:	f242 4300 	movw	r3, #9216	; 0x2400
    27f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    27fa:	881a      	ldrh	r2, [r3, #0]
    27fc:	2102      	movs	r1, #2
    27fe:	430a      	orrs	r2, r1
    2800:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2802:	f242 4200 	movw	r2, #9216	; 0x2400
    2806:	f2c4 0200 	movt	r2, #16384	; 0x4000
    280a:	f248 0103 	movw	r1, #32771	; 0x8003
    280e:	6913      	ldr	r3, [r2, #16]
    2810:	4219      	tst	r1, r3
    2812:	d1fc      	bne.n	280e <main+0x1c2>
			while (!(DMA_Flag)) {
    2814:	7863      	ldrb	r3, [r4, #1]
    2816:	b98b      	cbnz	r3, 283c <main+0x1f0>
	((Pm *)hw)->STDBYCFG.reg &= ~PM_STDBYCFG_DPGPDSW_Msk;
    2818:	f240 4600 	movw	r6, #1024	; 0x400
    281c:	f2c4 0600 	movt	r6, #16384	; 0x4000
    2820:	f240 0810 	movw	r8, #16
				Enter_Mode_Standby();
    2824:	f242 4715 	movw	r7, #9237	; 0x2415
    2828:	f2c0 0700 	movt	r7, #0
    282c:	8933      	ldrh	r3, [r6, #8]
    282e:	4642      	mov	r2, r8
    2830:	4393      	bics	r3, r2
    2832:	8133      	strh	r3, [r6, #8]
    2834:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    2836:	7863      	ldrb	r3, [r4, #1]
    2838:	2b00      	cmp	r3, #0
    283a:	d0f7      	beq.n	282c <main+0x1e0>
			Light_sensor_to_data_streammer();
    283c:	f242 5327 	movw	r3, #9511	; 0x2527
    2840:	f2c0 0300 	movt	r3, #0
    2844:	4798      	blx	r3
			break;
    2846:	e77a      	b.n	273e <main+0xf2>
			ADC_0_init();
    2848:	f240 3375 	movw	r3, #885	; 0x375
    284c:	f2c0 0300 	movt	r3, #0
    2850:	4798      	blx	r3
			RTC_init();
    2852:	f641 431b 	movw	r3, #7195	; 0x1c1b
    2856:	f2c0 0300 	movt	r3, #0
    285a:	4798      	blx	r3
			adc_async_enable_channel(&ADC_0, 0);
    285c:	f240 00cc 	movw	r0, #204	; 0xcc
    2860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2864:	0029      	movs	r1, r5
    2866:	f640 13cb 	movw	r3, #2507	; 0x9cb
    286a:	f2c0 0300 	movt	r3, #0
    286e:	4798      	blx	r3
			DMA_Flag = false;
    2870:	7065      	strb	r5, [r4, #1]
			while (!(DMA_Flag)) {
    2872:	7863      	ldrb	r3, [r4, #1]
    2874:	b98b      	cbnz	r3, 289a <main+0x24e>
    2876:	f240 4600 	movw	r6, #1024	; 0x400
    287a:	f2c4 0600 	movt	r6, #16384	; 0x4000
    287e:	f240 0810 	movw	r8, #16
				Enter_Mode_Standby();
    2882:	f242 4715 	movw	r7, #9237	; 0x2415
    2886:	f2c0 0700 	movt	r7, #0
    288a:	8933      	ldrh	r3, [r6, #8]
    288c:	4642      	mov	r2, r8
    288e:	4393      	bics	r3, r2
    2890:	8133      	strh	r3, [r6, #8]
    2892:	47b8      	blx	r7
			while (!(DMA_Flag)) {
    2894:	7863      	ldrb	r3, [r4, #1]
    2896:	2b00      	cmp	r3, #0
    2898:	d0f7      	beq.n	288a <main+0x23e>
			Light_sensor_to_data_streammer();
    289a:	f242 5327 	movw	r3, #9511	; 0x2527
    289e:	f2c0 0300 	movt	r3, #0
    28a2:	4798      	blx	r3
			break;
    28a4:	e74b      	b.n	273e <main+0xf2>
	...

000028a8 <__ffssi2>:
    28a8:	b510      	push	{r4, lr}
    28aa:	2300      	movs	r3, #0
    28ac:	b110      	cbz	r0, 28b4 <__ffssi2+0xc>
    28ae:	f000 f803 	bl	28b8 <__ctzsi2>
    28b2:	1c43      	adds	r3, r0, #1
    28b4:	0018      	movs	r0, r3
    28b6:	bd10      	pop	{r4, pc}

000028b8 <__ctzsi2>:
    28b8:	4241      	negs	r1, r0
    28ba:	4008      	ands	r0, r1
    28bc:	211c      	movs	r1, #28
    28be:	2301      	movs	r3, #1
    28c0:	041b      	lsls	r3, r3, #16
    28c2:	4298      	cmp	r0, r3
    28c4:	d301      	bcc.n	28ca <__ctzsi2+0x12>
    28c6:	0c00      	lsrs	r0, r0, #16
    28c8:	3910      	subs	r1, #16
    28ca:	0a1b      	lsrs	r3, r3, #8
    28cc:	4298      	cmp	r0, r3
    28ce:	d301      	bcc.n	28d4 <__ctzsi2+0x1c>
    28d0:	0a00      	lsrs	r0, r0, #8
    28d2:	3908      	subs	r1, #8
    28d4:	091b      	lsrs	r3, r3, #4
    28d6:	4298      	cmp	r0, r3
    28d8:	d301      	bcc.n	28de <__ctzsi2+0x26>
    28da:	0900      	lsrs	r0, r0, #4
    28dc:	3904      	subs	r1, #4
    28de:	a202      	add	r2, pc, #8	; (adr r2, 28e8 <__ctzsi2+0x30>)
    28e0:	5c10      	ldrb	r0, [r2, r0]
    28e2:	1a40      	subs	r0, r0, r1
    28e4:	4770      	bx	lr
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	1d1d1c1b 	.word	0x1d1d1c1b
    28ec:	1e1e1e1e 	.word	0x1e1e1e1e
    28f0:	1f1f1f1f 	.word	0x1f1f1f1f
    28f4:	1f1f1f1f 	.word	0x1f1f1f1f

000028f8 <__libc_init_array>:
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	2500      	movs	r5, #0
    28fc:	4b0e      	ldr	r3, [pc, #56]	; (2938 <__libc_init_array+0x40>)
    28fe:	4c0f      	ldr	r4, [pc, #60]	; (293c <__libc_init_array+0x44>)
    2900:	1ae4      	subs	r4, r4, r3
    2902:	10a4      	asrs	r4, r4, #2
    2904:	42a5      	cmp	r5, r4
    2906:	d109      	bne.n	291c <__libc_init_array+0x24>
    2908:	2500      	movs	r5, #0
    290a:	f000 f94f 	bl	2bac <_init>
    290e:	4c0c      	ldr	r4, [pc, #48]	; (2940 <__libc_init_array+0x48>)
    2910:	4b0c      	ldr	r3, [pc, #48]	; (2944 <__libc_init_array+0x4c>)
    2912:	1ae4      	subs	r4, r4, r3
    2914:	10a4      	asrs	r4, r4, #2
    2916:	42a5      	cmp	r5, r4
    2918:	d107      	bne.n	292a <__libc_init_array+0x32>
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	4a06      	ldr	r2, [pc, #24]	; (2938 <__libc_init_array+0x40>)
    291e:	00ab      	lsls	r3, r5, #2
    2920:	189b      	adds	r3, r3, r2
    2922:	681b      	ldr	r3, [r3, #0]
    2924:	4798      	blx	r3
    2926:	3501      	adds	r5, #1
    2928:	e7ec      	b.n	2904 <__libc_init_array+0xc>
    292a:	4a06      	ldr	r2, [pc, #24]	; (2944 <__libc_init_array+0x4c>)
    292c:	00ab      	lsls	r3, r5, #2
    292e:	189b      	adds	r3, r3, r2
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	4798      	blx	r3
    2934:	3501      	adds	r5, #1
    2936:	e7ee      	b.n	2916 <__libc_init_array+0x1e>
    2938:	00002bb8 	.word	0x00002bb8
    293c:	00002bb8 	.word	0x00002bb8
    2940:	00002bbc 	.word	0x00002bbc
    2944:	00002bb8 	.word	0x00002bb8
    2948:	682f2e2e 	.word	0x682f2e2e
    294c:	692f6c61 	.word	0x692f6c61
    2950:	756c636e 	.word	0x756c636e
    2954:	682f6564 	.word	0x682f6564
    2958:	775f6c61 	.word	0x775f6c61
    295c:	682e7464 	.word	0x682e7464
    2960:	00000000 	.word	0x00000000
    2964:	682f2e2e 	.word	0x682f2e2e
    2968:	732f6c61 	.word	0x732f6c61
    296c:	682f6372 	.word	0x682f6372
    2970:	615f6c61 	.word	0x615f6c61
    2974:	615f6364 	.word	0x615f6364
    2978:	636e7973 	.word	0x636e7973
    297c:	0000632e 	.word	0x0000632e
    2980:	682f2e2e 	.word	0x682f2e2e
    2984:	732f6c61 	.word	0x732f6c61
    2988:	682f6372 	.word	0x682f6372
    298c:	695f6c61 	.word	0x695f6c61
    2990:	00632e6f 	.word	0x00632e6f
    2994:	682f2e2e 	.word	0x682f2e2e
    2998:	732f6c61 	.word	0x732f6c61
    299c:	682f6372 	.word	0x682f6372
    29a0:	725f6c61 	.word	0x725f6c61
    29a4:	5f646e61 	.word	0x5f646e61
    29a8:	636e7973 	.word	0x636e7973
    29ac:	0000632e 	.word	0x0000632e
    29b0:	682f2e2e 	.word	0x682f2e2e
    29b4:	732f6c61 	.word	0x732f6c61
    29b8:	682f6372 	.word	0x682f6372
    29bc:	735f6c61 	.word	0x735f6c61
    29c0:	6d5f6970 	.word	0x6d5f6970
    29c4:	6e79735f 	.word	0x6e79735f
    29c8:	00632e63 	.word	0x00632e63
    29cc:	682f2e2e 	.word	0x682f2e2e
    29d0:	732f6c61 	.word	0x732f6c61
    29d4:	682f6372 	.word	0x682f6372
    29d8:	745f6c61 	.word	0x745f6c61
    29dc:	72656d69 	.word	0x72656d69
    29e0:	0000632e 	.word	0x0000632e
    29e4:	682f2e2e 	.word	0x682f2e2e
    29e8:	732f6c61 	.word	0x732f6c61
    29ec:	682f6372 	.word	0x682f6372
    29f0:	755f6c61 	.word	0x755f6c61
    29f4:	74726173 	.word	0x74726173
    29f8:	6e79735f 	.word	0x6e79735f
    29fc:	00632e63 	.word	0x00632e63
    2a00:	682f2e2e 	.word	0x682f2e2e
    2a04:	752f6c61 	.word	0x752f6c61
    2a08:	736c6974 	.word	0x736c6974
    2a0c:	6372732f 	.word	0x6372732f
    2a10:	6974752f 	.word	0x6974752f
    2a14:	6c5f736c 	.word	0x6c5f736c
    2a18:	2e747369 	.word	0x2e747369
    2a1c:	00000063 	.word	0x00000063
    2a20:	682f2e2e 	.word	0x682f2e2e
    2a24:	752f6c61 	.word	0x752f6c61
    2a28:	736c6974 	.word	0x736c6974
    2a2c:	6372732f 	.word	0x6372732f
    2a30:	6974752f 	.word	0x6974752f
    2a34:	725f736c 	.word	0x725f736c
    2a38:	62676e69 	.word	0x62676e69
    2a3c:	65666675 	.word	0x65666675
    2a40:	00632e72 	.word	0x00632e72

00002a44 <_adcs>:
    2a44:	0000c000 18000002 06000000 00000000     ................
	...
    2a60:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2a70:	632e6364 00000000                       dc.c....

00002a78 <_cfgs>:
    2a78:	00000042 00801300 00000908 00000000     B...............
	...

00002ad8 <_map>:
    2ad8:	00000005 0000001b 682f2e2e 652f6c70     ........../hpl/e
    2ae8:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00002af8 <user_mux_confs>:
	...
    2b04:	00010000 00000000 00000000 42000400     ...............B
    2b14:	42000800 42000c00                       ...B...B

00002b1c <_i2cms>:
	...
    2b34:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2b44:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00002b50 <_tcs>:
    2b50:	00002200 00000308 00000000 00000000     ."..............
    2b60:	000001f4 00000000 682f2e2e 742f6c70     ........../hpl/t
    2b70:	70682f63 63745f6c 0000632e 682f2e2e     c/hpl_tc.c..../h
    2b80:	742f6c70 2f676e72 5f6c7068 676e7274     pl/trng/hpl_trng
    2b90:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    2ba0:	775f6c70 632e7464 00000000              pl_wdt.c....

00002bac <_init>:
    2bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bb2:	bc08      	pop	{r3}
    2bb4:	469e      	mov	lr, r3
    2bb6:	4770      	bx	lr

00002bb8 <__init_array_start>:
    2bb8:	00000241 	.word	0x00000241

00002bbc <_fini>:
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bc2:	bc08      	pop	{r3}
    2bc4:	469e      	mov	lr, r3
    2bc6:	4770      	bx	lr

00002bc8 <__fini_array_start>:
    2bc8:	00000215 	.word	0x00000215

Disassembly of section .gnu.sgstubs:

0000fb00 <nsc_ext_irq_init>:
    fb00:	e97f e97f 	sg
    fb04:	f7f0 bb0f 	b.w	126 <__acle_se_nsc_ext_irq_init>

0000fb08 <nsc_periph_clock_init>:
    fb08:	e97f e97f 	sg
    fb0c:	f7f0 baf2 	b.w	f4 <__acle_se_nsc_periph_clock_init>
	...
